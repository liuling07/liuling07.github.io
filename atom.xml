<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[残剑博客]]></title>
  <subtitle><![CDATA[技术成长之路]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.liuling123.com/"/>
  <updated>2016-06-22T14:57:35.000Z</updated>
  <id>http://www.liuling123.com/</id>
  
  <author>
    <name><![CDATA[Lauren]]></name>
    <email><![CDATA[lauren.liuling@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Ubuntu下adb无法识别手机设备]]></title>
    <link href="http://www.liuling123.com/2016/06/ubuntu-adb-devices.html"/>
    <id>http://www.liuling123.com/2016/06/ubuntu-adb-devices.html</id>
    <published>2016-06-21T13:14:00.000Z</published>
    <updated>2016-06-22T14:57:35.000Z</updated>
    <content type="html"><![CDATA[<p>(1)首先使用lsusb命令，列出所有usb设备的VID、PID号。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">liuling@liuling-PC:~$ lsusb</span><br><span class="line">Bus <span class="number">002</span> Device <span class="number">001</span>: ID <span class="number">1</span>d6b:<span class="number">0003</span> Linux Foundation <span class="number">3.0</span> root hub</span><br><span class="line">Bus <span class="number">001</span> Device <span class="number">014</span>: ID <span class="number">2</span>b0e:<span class="number">1768</span>  </span><br><span class="line">Bus <span class="number">001</span> Device <span class="number">004</span>: ID <span class="number">0461</span>:<span class="number">0010</span> Primax Electronics, Ltd HP Keyboard</span><br><span class="line">Bus <span class="number">001</span> Device <span class="number">003</span>: ID <span class="number">03f</span>0:<span class="number">094</span>a Hewlett-Packard </span><br><span class="line">Bus <span class="number">001</span> Device <span class="number">009</span>: ID <span class="number">046</span>d:c053 Logitech, Inc. Laser Mouse</span><br><span class="line">Bus <span class="number">001</span> Device <span class="number">001</span>: ID <span class="number">1</span>d6b:<span class="number">0002</span> Linux Foundation <span class="number">2.0</span> root hub</span><br><span class="line">liuling@liuling-PC:~$</span><br></pre></td></tr></table></figure>
<p>其中Bus 001 Device 014: ID 2b0e:1768为我插入的手机设备，可以看出VID为2b0e，PID为1768。</p>
<p>(2)在用户的 home 目录下，寻找 .android 目录，如果没有就创建。在 .android 目录下新建一个文件，叫adb_usb.ini, 记住，后缀是 “ini” 哦；添加前面获得的 VID 到 adb_usb.ini 中，如 0xAAAA，注意要加上0x，因为是16进制的。</p>
<p>(3)在 shell 中 分别输入 adb kill-server, adb start-server, adb devices；若能看到 devices 列出，那么就成功了。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>(1)首先使用lsusb命令，列出所有usb设备的VID、PID号。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><s]]>
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="linux" scheme="http://www.liuling123.com/tags/linux/"/>
    
      <category term="Linux" scheme="http://www.liuling123.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JNI与C/C++数据类型的转换]]></title>
    <link href="http://www.liuling123.com/2016/06/jni-type-change.html"/>
    <id>http://www.liuling123.com/2016/06/jni-type-change.html</id>
    <published>2016-06-21T12:52:00.000Z</published>
    <updated>2016-06-21T13:19:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u5B57_u7B26_u6570_u7EC4_u4E0EjbyteArray"><a href="#u5B57_u7B26_u6570_u7EC4_u4E0EjbyteArray" class="headerlink" title="字符数组与jbyteArray"></a>字符数组与jbyteArray</h2><h4 id="jbyteArray_u8F6C_u5B57_u7B26_u6570_u7EC4"><a href="#jbyteArray_u8F6C_u5B57_u7B26_u6570_u7EC4" class="headerlink" title="jbyteArray转字符数组"></a>jbyteArray转字符数组</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> byteSize = (<span class="keyword">int</span>) env-&gt;GetArrayLength(jbyteArrayData);  <span class="comment">//jbyteArrayData是jbyteArray类型的数据</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* data = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[byteSize + <span class="number">1</span>];</span><br><span class="line">env-&gt;GetByteArrayRegion(jbyteArrayData, <span class="number">0</span>, byteSize, <span class="keyword">reinterpret_cast</span>&lt;jbyte*&gt;(data));</span><br><span class="line">data[byteSize] = <span class="string">'\0'</span>;</span><br></pre></td></tr></table></figure>
<h4 id="u5B57_u7B26_u6570_u7EC4_u8F6CjbyteArray"><a href="#u5B57_u7B26_u6570_u7EC4_u8F6CjbyteArray" class="headerlink" title="字符数组转jbyteArray"></a>字符数组转jbyteArray</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jbyte *jb =  <span class="list">(<span class="keyword">jbyte*</span>)</span> data<span class="comment">;   //data是字符数组类型</span></span><br><span class="line">jbyteArray jarray = env-&gt;NewByteArray<span class="list">(<span class="keyword">byteSize</span>)</span><span class="comment">;   //byteSize是字符数组大小</span></span><br><span class="line">env-&gt;SetByteArrayRegion<span class="list">(<span class="keyword">jarray</span>, <span class="number">0</span>, byteSize, jb)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="u5B57_u7B26_u6570_u7EC4_u4E0Ejstring"><a href="#u5B57_u7B26_u6570_u7EC4_u4E0Ejstring" class="headerlink" title="字符数组与jstring"></a>字符数组与jstring</h2><h4 id="jstring_u8F6C_u5B57_u7B26_u6570_u7EC4"><a href="#jstring_u8F6C_u5B57_u7B26_u6570_u7EC4" class="headerlink" title="jstring转字符数组"></a>jstring转字符数组</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">JstringToChar</span><span class="params">(JNIEnv* env, jstring jstr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(jstr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">char</span>* rtn = <span class="literal">NULL</span>;</span><br><span class="line">	jclass clsstring = env-&gt;FindClass(<span class="string">"java/lang/String"</span>);</span><br><span class="line">	jstring strencode = env-&gt;NewStringUTF(<span class="string">"utf-8"</span>);</span><br><span class="line">	jmethodID mid = env-&gt;GetMethodID(clsstring, <span class="string">"getBytes"</span>,</span><br><span class="line">			<span class="string">"(Ljava/lang/String;)[B"</span>);</span><br><span class="line">	jbyteArray barr = (jbyteArray) env-&gt;CallObjectMethod(jstr, mid, strencode);</span><br><span class="line">	jsize alen = env-&gt;GetArrayLength(barr);</span><br><span class="line">	jbyte* ba = env-&gt;GetByteArrayElements(barr, JNI_FALSE);</span><br><span class="line">	<span class="keyword">if</span> (alen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		rtn = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>(alen + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">memcpy</span>(rtn, ba, alen);</span><br><span class="line">		rtn[alen] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	env-&gt;ReleaseByteArrayElements(barr, ba, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> rtn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5B57_u7B26_u6570_u7EC4_u8F6Cjstring"><a href="#u5B57_u7B26_u6570_u7EC4_u8F6Cjstring" class="headerlink" title="字符数组转jstring"></a>字符数组转jstring</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jstring StrtoJstring(JNIEnv* env, const char* pat)</span><br><span class="line">&#123;</span><br><span class="line">	jclass strClass = env<span class="subst">-&gt;</span>FindClass(<span class="string">"java/lang/String"</span>);</span><br><span class="line">	jmethodID ctorID = env<span class="subst">-&gt;</span>GetMethodID(strClass, <span class="string">"&lt;init&gt;"</span>, <span class="string">"([BLjava/lang/String;)V"</span>);</span><br><span class="line">	jbyteArray <span class="built_in">bytes</span> = env<span class="subst">-&gt;</span>NewByteArray(strlen(pat));</span><br><span class="line">	env<span class="subst">-&gt;</span>SetByteArrayRegion(<span class="built_in">bytes</span>, <span class="number">0</span>, strlen(pat), (jbyte*)pat);</span><br><span class="line">	jstring encoding = env<span class="subst">-&gt;</span>NewStringUTF(<span class="string">"utf-8"</span>);</span><br><span class="line">	<span class="keyword">return</span> (jstring)env<span class="subst">-&gt;</span>NewObject(strClass, ctorID, <span class="built_in">bytes</span>, encoding);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者直接使用NewStringUTF方法：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstring jstr = env-&gt;NewStringUTF<span class="list">(<span class="keyword">str</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="int_u4E0Ejint"><a href="#int_u4E0Ejint" class="headerlink" title="int与jint"></a>int与jint</h2><p>jint与int的互转都可以直接使用强转，如：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jint i = <span class="list">(<span class="keyword">jint</span>)</span> <span class="number">10</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u5B57_u7B26_u6570_u7EC4_u4E0EjbyteArray"><a href="#u5B57_u7B26_u6570_u7EC4_u4E0EjbyteArray" class="headerlink" title="字符数组与jbyteArray"></a>字符数组与jbyteArray</h2><h4 id="jbyteArray_u8F6C_u5B57_u7B26_u6570_u7EC4"><a href="#jbyteArray_u8F6C_u5B57_u7B26_u6570_u7EC4" class="headerlink" title="jbyteArray转字符数组"></a>jbyteArray转字符数组</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> byteSize = (<span class="keyword">int</span>) env-&gt;GetArrayLength(jbyteArrayData);  <span class="comment">//jbyteArrayData是jbyteArray类型的数据</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* data = <span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[byteSize + <span class="number">1</span>];</span><br><span class="line">env-&gt;GetByteArrayRegion(jbyteArrayData, <span class="number">0</span>, byteSize, <span class="keyword">reinterpret_cast</span>&lt;jbyte*&gt;(data));</span><br><span class="line">data[byteSize] = <span class="string">'\0'</span>;</span><br></pre></td></tr></table></figure>
<h4 id="u5B57_u7B26_u6570_u7EC4_u8F6CjbyteArray"><a href="#u5B57_u7B26_u6570_u7EC4_u8F6CjbyteArray" class="headerlink" title="字符数组转jbyteArray"></a>字符数组转jbyteArray</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jbyte *jb =  <span class="list">(<span class="keyword">jbyte*</span>)</span> data<span class="comment">;   //data是字符数组类型</span></span><br><span class="line">jbyteArray jarray = env-&gt;NewByteArray<span class="list">(<span class="keyword">byteSize</span>)</span><span class="comment">;   //byteSize是字符数组大小</span></span><br><span class="line">env-&gt;SetByteArrayRegion<span class="list">(<span class="keyword">jarray</span>, <span class="number">0</span>, byteSize, jb)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="jni" scheme="http://www.liuling123.com/tags/jni/"/>
    
      <category term="JNI&amp;amp;NDK" scheme="http://www.liuling123.com/categories/JNI-amp-NDK/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JNI崩溃问题定位]]></title>
    <link href="http://www.liuling123.com/2016/06/ndk-stack.html"/>
    <id>http://www.liuling123.com/2016/06/ndk-stack.html</id>
    <published>2016-06-20T13:37:00.000Z</published>
    <updated>2016-06-20T14:06:42.000Z</updated>
    <content type="html"><![CDATA[<p>一般native代码导致的崩溃问题，奔溃日志提示大概类似这样：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal signal <span class="number">11</span> (SIGSEGV), code <span class="number">1</span>, fault addr <span class="number">0x0</span> in tid <span class="number">13261</span></span><br></pre></td></tr></table></figure>
<p>只有这样而没有详细的调用栈信息，这样我们开发者无法定位到JNI中到底哪一行导致程序崩掉的。根本无法定位问题所在，就更不用说解决问题了。</p>
<p>好在NDK给开发者们提供了ndk-stack工具（在NDK根目录下），我们可以通过ndk-stack工具来查看so库中崩溃的堆栈信息。</p>
<h4 id="NDK_u7F16_u8BD1_u65F6_u5DF2DEBUG_u6A21_u5F0F_u7F16_u8BD1"><a href="#NDK_u7F16_u8BD1_u65F6_u5DF2DEBUG_u6A21_u5F0F_u7F16_u8BD1" class="headerlink" title="NDK编译时已DEBUG模式编译"></a>NDK编译时已DEBUG模式编译</h4><p>如果是使用命令行编译，则使用如下语句：</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ndk</span>-build clean <span class="literal">all</span> NDK_DEBUG=1</span><br></pre></td></tr></table></figure>
<p>clean all 的意思是编译之前先清理全部上次编译生成的内容。NDK_DEBUG=1 意思是生成调试版本的文件。加了这个参数后 调试的时候能定位到源码行数。</p>
<a id="more"></a>
<p>如果是使用gradle，则写法如下（注意这里已经覆盖了gradle默认的NDK编译,详细请前往<a href="http://liuling123.com/2016/05/android-studio-gradle-ndk-config.html" target="_blank" rel="external">《Android Studio覆盖了gradle默认的NDK编译》</a>）：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">task</span> ndkBuild(type: Exec) &#123;</span><br><span class="line">    <span class="title">commandLine</span> <span class="string">'ndk-build'</span>, <span class="string">'-C'</span>, file(<span class="string">'src/main/jni'</span>).absolutePath, <span class="string">'clean'</span>,<span class="string">'all'</span>, <span class="string">'NDK_DEBUG=1'</span></span><br><span class="line">&#125;</span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    <span class="title">compileTask</span> -&gt; compileTask.dependsOn ndkBuild</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后记得在AndroidManifest.xml设置debuggable为true ，在Application节点中。</p>
<h4 id="ndk_u7F16_u8BD1so_u5E93_u5E76_u8FD0_u884C_u7A0B_u5E8F"><a href="#ndk_u7F16_u8BD1so_u5E93_u5E76_u8FD0_u884C_u7A0B_u5E8F" class="headerlink" title="ndk编译so库并运行程序"></a>ndk编译so库并运行程序</h4><p>前提是要搭建好NDK开发环境并在项目中集成NDK，不会的可以参考<a href="http://liuling123.com/2016/05/ubuntu-android-studio-ndk.html" target="_blank" rel="external">Ubuntu下NDK编译环境搭建及在Android Studio中集成NDK </a> 。</p>
<p>为了演示，我这里先模拟一个错误：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_liuling_ndkjnidemo_JniUtils_getStringFromC</span></span><br><span class="line">        <span class="params">(JNIEnv *env, jclass obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line">    *p = <span class="number">1</span>;    <span class="comment">//这里会导致程序崩溃</span></span><br><span class="line">    <span class="keyword">return</span> (jstring)(*env)-&gt; NewStringUTF(env, <span class="string">"I am string from jni"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u4F7F_u7528ndk-stack_u5DE5_u5177_u5B9A_u4F4D_u5D29_u6E83_u4FE1_u606F"><a href="#u4F7F_u7528ndk-stack_u5DE5_u5177_u5B9A_u4F4D_u5D29_u6E83_u4FE1_u606F" class="headerlink" title="使用ndk-stack工具定位崩溃信息"></a>使用ndk-stack工具定位崩溃信息</h4><p>在命令行中执行如下命令：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat | 你的NDK所在的路径<span class="regexp">/ndk-stack -sym 你的项目所在的路径/</span>app<span class="regexp">/src/m</span>ain<span class="regexp">/obj/</span>local<span class="regexp">/armeabi</span></span><br></pre></td></tr></table></figure>
<p>这里要确定，ndk编译后生成了”你的项目所在的路径/app/src/main/obj/local/armeabi”目录，也就是这个目录要存在。</p>
<p>执行完这个命令之后，终端会阻塞在那，一旦程序崩溃，就会在终端打印出崩溃信息栈。如图所示：<br><img src="http://7xnqm4.com1.z0.glb.clouddn.com/ndkstack.png" alt=""></p>
<p>从崩溃信息可以看出导致崩溃的代码是在com_liuling_ndkjnidemo_JniUtils.c中的13行。</p>
<p>打开com_liuling_ndkjnidemo_JniUtils.c文件查看代码，确实是在13行出的问题。<br><img src="http://7xnqm4.com1.z0.glb.clouddn.com/ndk-stack-jnicode.png" alt=""></p>
<p>能够定位崩溃所在的位置，就对于我们排查问题来说有很大的帮助，其实修复bug大部分时间都是在找哪里出的问题，能够快速找出哪里出的问题，问题也就很快修复了。</p>
<p>​​</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一般native代码导致的崩溃问题，奔溃日志提示大概类似这样：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal signal <span class="number">11</span> (SIGSEGV), code <span class="number">1</span>, fault addr <span class="number">0x0</span> in tid <span class="number">13261</span></span><br></pre></td></tr></table></figure>
<p>只有这样而没有详细的调用栈信息，这样我们开发者无法定位到JNI中到底哪一行导致程序崩掉的。根本无法定位问题所在，就更不用说解决问题了。</p>
<p>好在NDK给开发者们提供了ndk-stack工具（在NDK根目录下），我们可以通过ndk-stack工具来查看so库中崩溃的堆栈信息。</p>
<h4 id="NDK_u7F16_u8BD1_u65F6_u5DF2DEBUG_u6A21_u5F0F_u7F16_u8BD1"><a href="#NDK_u7F16_u8BD1_u65F6_u5DF2DEBUG_u6A21_u5F0F_u7F16_u8BD1" class="headerlink" title="NDK编译时已DEBUG模式编译"></a>NDK编译时已DEBUG模式编译</h4><p>如果是使用命令行编译，则使用如下语句：</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ndk</span>-build clean <span class="literal">all</span> NDK_DEBUG=1</span><br></pre></td></tr></table></figure>
<p>clean all 的意思是编译之前先清理全部上次编译生成的内容。NDK_DEBUG=1 意思是生成调试版本的文件。加了这个参数后 调试的时候能定位到源码行数。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="jni" scheme="http://www.liuling123.com/tags/jni/"/>
    
      <category term="JNI&amp;amp;NDK" scheme="http://www.liuling123.com/categories/JNI-amp-NDK/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初次尝试Kotlin]]></title>
    <link href="http://www.liuling123.com/2016/06/android_studio_kotlin.html"/>
    <id>http://www.liuling123.com/2016/06/android_studio_kotlin.html</id>
    <published>2016-06-13T14:27:00.000Z</published>
    <updated>2016-06-13T14:29:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u4E3AAndroid_Studio_u5B89_u88C5kotlin_u63D2_u4EF6"><a href="#u4E3AAndroid_Studio_u5B89_u88C5kotlin_u63D2_u4EF6" class="headerlink" title="为Android Studio安装kotlin插件"></a>为Android Studio安装kotlin插件</h2><p>在Android Studio中打开Settings-&gt;Plugins-&gt;Browse Repositories，输入kotlin搜索</p>
<p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/plugin_kotlin.png" alt=""></p>
<a id="more"></a>
<h2 id="u521B_u5EFAAndroid_u9879_u76EE_u5E76_u914D_u7F6Ekotlin"><a href="#u521B_u5EFAAndroid_u9879_u76EE_u5E76_u914D_u7F6Ekotlin" class="headerlink" title="创建Android项目并配置kotlin"></a>创建Android项目并配置kotlin</h2><h3 id="u521B_u5EFAAndroid_u5DE5_u7A0B"><a href="#u521B_u5EFAAndroid_u5DE5_u7A0B" class="headerlink" title="创建Android工程"></a>创建Android工程</h3><p>在Android Studio新建一个Android 工程“KotlinDemo”，跟普通Android工程创建一样。</p>
<h3 id="u914D_u7F6E_u5DE5_u7A0B"><a href="#u914D_u7F6E_u5DE5_u7A0B" class="headerlink" title="配置工程"></a>配置工程</h3><p>在工程的build.gradle中添加kotlin版本以及依赖：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line"></span><br><span class="line">    ext.kotlin_version = <span class="string">'1.0.2'</span> <span class="comment">//kotlin版本</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.5.0'</span></span><br><span class="line">        <span class="comment">//kotlin依赖</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>kotlin_version为kotlin的版本，因为要保持一直，所以这里配置成一个全局变量，方便在其他地方使用。版本最好使用<a href="http://kotlinlang.org/docs/reference/using-gradle.html" target="_blank" rel="external">kotlin官方文档</a>中的最新版本。</p>
<p>然后在module中的build.gradle文件中使用kotlin插件以及kotlin依赖：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">apply plugin: <span class="string">'kotlin-android'</span> <span class="comment">//使用kotlin插件</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">22</span></span><br><span class="line">    buildToolsVersion <span class="string">"22.0.1"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.mymoney.kotlindemo"</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">22</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.2.1'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:22.2.1'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"</span> <span class="comment">//添加kotlin依赖</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5C06Java_u4EE3_u7801_u8F6C_u6362_u6210Kotlin"><a href="#u5C06Java_u4EE3_u7801_u8F6C_u6362_u6210Kotlin" class="headerlink" title="将Java代码转换成Kotlin"></a>将Java代码转换成Kotlin</h3><p>新建Android工程中默认MainActivity.java代码如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.mymoney.kotlindemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.<span class="type">Activity</span>;</span><br><span class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Activity</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打开该文件，使用快捷键Ctrl+Shift+Alt+K即可将该Java代码转换为Kotlin代码，也可以在Android Studio的菜单中使用Code-&gt;Convert Java File to Kotlin File进行转换。转换后的Kotlin代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.mymoney.kotlindemo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="typename">Activity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="typename">Bundle?</span>)</span> &#123;</span></span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完了之后点击Gradle的Sync按钮进行构建，就可以正常运行了。</p>
<p>​​</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4E3AAndroid_Studio_u5B89_u88C5kotlin_u63D2_u4EF6"><a href="#u4E3AAndroid_Studio_u5B89_u88C5kotlin_u63D2_u4EF6" class="headerlink" title="为Android Studio安装kotlin插件"></a>为Android Studio安装kotlin插件</h2><p>在Android Studio中打开Settings-&gt;Plugins-&gt;Browse Repositories，输入kotlin搜索</p>
<p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/plugin_kotlin.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Kotlin" scheme="http://www.liuling123.com/tags/Kotlin/"/>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="Kotlin" scheme="http://www.liuling123.com/categories/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[so库中JNI方法混淆]]></title>
    <link href="http://www.liuling123.com/2016/06/so_method_mix.html"/>
    <id>http://www.liuling123.com/2016/06/so_method_mix.html</id>
    <published>2016-06-02T14:51:00.000Z</published>
    <updated>2016-06-02T14:56:44.000Z</updated>
    <content type="html"><![CDATA[<p>​​默认情况下，使用JNI时与native对应的JNI函数名都是Java<em>包名(点替换为</em>)<em>类名</em>方法名，使用javah生成的头文件函数名就是这样的格式。这样的格式的so库被反汇编时很容易就找到对应的方法。</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT jstring JNICALL Java_com_liuling_ndkjnidemo_JniUtils_getStringFromC</span><br><span class="line">        (JNIEnv *env, jclass obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">(jstring)(*env)</span>-&gt;</span> NewStringUTF(env, <span class="string">"I am string from jni"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面是简单的一个JNI方法，我们将生成的so库使用IDA工具进行反汇编之后就能看到如下的内容：</p>
<p>在左边很容易就能找到Java_com_liuling_ndkjnidemo_JniUtils_getStringFromC这个方法：</p>
<p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/somix%2Fmethod.png" alt=""></p>
<p>双击该方法就能看到该方法反汇编之后的内容，这里返回的字符串”I am string from jni”就暴露出来了，如果是一些敏感信息比如一些key之类的东西，这样就存在着风险。</p>
<a id="more"></a>
<p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/somix%2Fmethod_detail.png" alt=""></p>
<p>经上网搜索，发现有一种方法可以让JNI中的方法名不适用javah生成的风格，方法名随便取，并且可以将方法隐藏起来，反汇编之后找不到对应的方法，类似于Android中的混淆，加大了破解的难度。</p>
<p>这种方法的特点是：</p>
<ul>
<li>源码改动少，只需要添加JNI_Onload函数</li>
<li>无需加解密so，就可以实现混淆so中的JNI函数</li>
<li>后续可以添加so加解密，使破解难度更大 </li>
</ul>
<p>下面来看一个例子：</p>
<h4 id="Java_u5C42_u4EE3_u7801"><a href="#Java_u5C42_u4EE3_u7801" class="headerlink" title="Java层代码"></a>Java层代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"NDKJNIDemo"</span>);<span class="comment">//与build.gradle里面设置的so名字，必须一致</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getStringFromC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="JNI_u5C42_u4EE3_u7801"><a href="#JNI_u5C42_u4EE3_u7801" class="headerlink" title="JNI层代码"></a>JNI层代码</h4><p>第一步：我们要写一个JNI_Onload，来自定义JNI函数的函数名，要加入头文件#include <assert.h></assert.h></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"com_liuling_ndkjnidemo_JniUtils.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> JNIREG_CLASS <span class="string">"com/liuling/ndkjnidemo/JniUtils"</span><span class="comment">//指定要注册的类</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line">* Table of methods associated with a single class.</span><br><span class="line">*/</span></span><br><span class="line"><span class="comment">//绑定，注意，V,Z签名的返回值不能有分号“;”</span></span><br><span class="line"><span class="comment">//这里就是把JAVA层的getStringFromC()函数绑定到Native层的getStringc()函数，就无需使用原生的Java_com_xx_xx_classname_methodname这种恶心的函数命名方式了</span></span><br><span class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">        &#123; <span class="string">"getStringFromC"</span>, <span class="string">"()Ljava/lang/String;"</span>, (<span class="keyword">void</span>*)getStringc&#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">* Register several native methods for one class.</span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">registerNativeMethods</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> <span class="keyword">char</span>* className,</span><br><span class="line">                                 JNINativeMethod* gMethods, <span class="keyword">int</span> numMethods)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    jclass clazz;</span><br><span class="line">    clazz = (*env)-&gt;FindClass(env, className);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((*env)-&gt;RegisterNatives(env, clazz, gMethods, numMethods) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JNI_TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">* Register native methods for all classes we know about.</span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">registerNatives</span><span class="params">(JNIEnv* env)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!registerNativeMethods(env, JNIREG_CLASS, gMethods,</span><br><span class="line">                               <span class="keyword">sizeof</span>(gMethods) / <span class="keyword">sizeof</span>(gMethods[<span class="number">0</span>])))</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JNI_TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">* Set some test stuff up.</span><br><span class="line">*</span><br><span class="line">* Returns the JNI version on success, -1 on failure.</span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    JNIEnv* env = <span class="literal">NULL</span>;</span><br><span class="line">    jint result = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((*vm)-&gt;GetEnv(vm, (<span class="keyword">void</span>**) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(env != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!registerNatives(env)) &#123;<span class="comment">//注册</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* success -- return valid version number */</span></span><br><span class="line"></span><br><span class="line">    result = JNI_VERSION_1_4;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二步：Java层函数所对应的函数的实现：</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">__attribute__((section (<span class="string">".mytext"</span>))) JNICALL jstring getStringc(JNIEnv *env, jclass obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">(jstring)(*env)</span>-&gt;</span> NewStringUTF(env, <span class="string">"I am string from jni22222"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的关键是，在函数前加上<strong>attribute</strong>((section (“.mytext”)))，这样的话，编译的时候就会把这个函数编译到自定义的名叫”.mytext“的section里面去了。</p>
<p>最后一步：隐藏符号表，在Android.mk文件里面添加一句LOCAL_CFLAGS := -fvisibility=hidden</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="constant">LOCAL_PATH</span> := <span class="variable">$(</span>call my-dir)</span><br><span class="line"></span><br><span class="line">local_c_includes := \</span><br><span class="line">   <span class="variable">$(</span><span class="constant">NDK_PROJECT_PATH</span>) \</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(</span><span class="constant">CLEAR_VARS</span>)</span><br><span class="line"></span><br><span class="line"><span class="constant">LOCAL_CFLAGS</span> := -fvisibility=hidden    <span class="comment">#隐藏符号表</span></span><br><span class="line"></span><br><span class="line"><span class="constant">LOCAL_MODULE</span>    := <span class="constant">NDKJNIDemo</span></span><br><span class="line"></span><br><span class="line"><span class="constant">LOCAL_SRC_FILES</span> := com_liuling_ndkjnidemo_JniUtils.c</span><br><span class="line"><span class="constant">P</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(</span><span class="constant">BUILD_SHARED_LIBRARY</span>)</span><br></pre></td></tr></table></figure>
<p>这样就OK了，程序跑起来的效果和之前没有任何区别。</p>
<p>下面我们用IDA来看一下混淆后的效果：</p>
<p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/somix%2Fmethod_progard.png" alt=""></p>
<p>在IDA里面看不到getStringc()函数，其次getStringc()函数的符号表是没有的，这个函数放在.mytext里面，而且整个逻辑是完全混淆的，数据和代码混在一起了（其实是IDA以为是ARM指令），这样就加大了so库破解的难度。</p>
<p>上面混淆方案的实现原理其实很简单，当在系统中调用System.loadLibrary函数时，该函数会找到对应的so库，然后首先试图找到”JNI_OnLoad”函数，如果该函数存在，则调用它。</p>
<p>JNI_OnLoad可以和JNIEnv的registerNatives函数结合起来，实现动态的函数替换。如果在so库中没有找到”JNI_OnLoad”函数，则会在调用的时候解析javah风格的函数。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>​​默认情况下，使用JNI时与native对应的JNI函数名都是Java<em>包名(点替换为</em>)<em>类名</em>方法名，使用javah生成的头文件函数名就是这样的格式。这样的格式的so库被反汇编时很容易就找到对应的方法。</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT jstring JNICALL Java_com_liuling_ndkjnidemo_JniUtils_getStringFromC</span><br><span class="line">        (JNIEnv *env, jclass obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">(jstring)(*env)</span>-&gt;</span> NewStringUTF(env, <span class="string">"I am string from jni"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面是简单的一个JNI方法，我们将生成的so库使用IDA工具进行反汇编之后就能看到如下的内容：</p>
<p>在左边很容易就能找到Java_com_liuling_ndkjnidemo_JniUtils_getStringFromC这个方法：</p>
<p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/somix%2Fmethod.png" alt=""></p>
<p>双击该方法就能看到该方法反汇编之后的内容，这里返回的字符串”I am string from jni”就暴露出来了，如果是一些敏感信息比如一些key之类的东西，这样就存在着风险。</p>]]>
    
    </summary>
    
      <category term="NDK" scheme="http://www.liuling123.com/tags/NDK/"/>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="jni" scheme="http://www.liuling123.com/tags/jni/"/>
    
      <category term="JNI&amp;amp;NDK" scheme="http://www.liuling123.com/categories/JNI-amp-NDK/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu下NDK编译环境搭建及在Android Studio中集成NDK]]></title>
    <link href="http://www.liuling123.com/2016/05/ubuntu-android-studio-ndk.html"/>
    <id>http://www.liuling123.com/2016/05/ubuntu-android-studio-ndk.html</id>
    <published>2016-05-31T13:24:00.000Z</published>
    <updated>2016-05-31T14:27:45.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Ubuntu_u4E0BNDK_u73AF_u5883_u7684_u642D_u5EFA"><a href="#Ubuntu_u4E0BNDK_u73AF_u5883_u7684_u642D_u5EFA" class="headerlink" title="Ubuntu下NDK环境的搭建"></a>Ubuntu下NDK环境的搭建</h1><h2 id="NDK_u4E0B_u8F7D"><a href="#NDK_u4E0B_u8F7D" class="headerlink" title="NDK下载"></a>NDK下载</h2><p>首先需要下载NDK编译工具，目前官方最新的NDK版本是r11c，为了保证稳定性，我下的是r11b。</p>
<p>能翻墙的可以从谷歌官网下载，地址为：<a href="https://developer.android.com/ndk/downloads/index.html" target="_blank" rel="external">https://developer.android.com/ndk/downloads/index.html</a></p>
<p>不能翻墙的也可以从下面网站下载，该网站提供了Android开发各种工具的下载：<a href="http://www.androiddevtools.cn/index.html" target="_blank" rel="external">http://www.androiddevtools.cn/index.html</a></p>
<a id="more"></a>
<p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/asndk%2Fanddevtools_ndk_download.png" alt=""></p>
<h2 id="u914D_u7F6E_u73AF_u5883_u53D8_u91CF"><a href="#u914D_u7F6E_u73AF_u5883_u53D8_u91CF" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>将下载下来的文件进行解压，我这里解压到~/android/android-ndk-r11b。</p>
<p>然后在~/.profile文件中加入如下内容，将NDK目录加入到PATH中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set ndk environment</span></span><br><span class="line"><span class="built_in">export</span> NDK_HOME=~/android/android-ndk-r11b</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$NDK_HOME</span></span><br></pre></td></tr></table></figure>
<p>最后执行“source ~/.profile”使之生效。</p>
<p>配置好环境变量之后，需要验证一下是否搭建成功，在命令行下输入ndk-build，有如下提示则表示搭建成功了。</p>
<p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/asndk%2Fndk-build-setup-ok.png" alt=""></p>
<h1 id="u5728Android_Studio_u4E2D_u96C6_u6210NDK"><a href="#u5728Android_Studio_u4E2D_u96C6_u6210NDK" class="headerlink" title="在Android Studio中集成NDK"></a>在Android Studio中集成NDK</h1><h2 id="u521B_u5EFAAndroid_u9879_u76EE"><a href="#u521B_u5EFAAndroid_u9879_u76EE" class="headerlink" title="创建Android项目"></a>创建Android项目</h2><p>在Android Studio中创建一个Android工程，我这里创建一个名为NDKJNIDemo的工程。</p>
<h2 id="u914D_u7F6Endk-dir"><a href="#u914D_u7F6Endk-dir" class="headerlink" title="配置ndk.dir"></a>配置ndk.dir</h2><p>在项目中的local.properties文件中添加如下代码来指定ndk的目录：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ndk.dir=~<span class="regexp">/android/android</span>-ndk-r11b</span><br></pre></td></tr></table></figure>
<h2 id="u914D_u7F6Egradle_u7684ndk_u6A21_u5757"><a href="#u914D_u7F6Egradle_u7684ndk_u6A21_u5757" class="headerlink" title="配置gradle的ndk模块"></a>配置gradle的ndk模块</h2><p>在module的build.gradle文件的android.defaultConfig添加如下代码：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title">ndk</span> &#123;</span><br><span class="line">    <span class="title">moduleName</span> <span class="string">"NDKJNIDemo"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里配置的moduleName就是编译生成so库的名字，比如这里生成的so库名字为“libNDKJNIDemo.so”。</p>
<p>ndk还可以配置更多选项，如下：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ndk &#123; </span><br><span class="line">    moduleName <span class="string">"NDKJNIDemo"</span></span><br><span class="line">    cFlags <span class="string">"-DANDROID_NDK -D_DEBUG DNULL=0"</span>    <span class="comment">// Define some macros</span></span><br><span class="line">    ldLibs <span class="string">"EGL"</span>, <span class="string">"GLESv3"</span>, <span class="string">"dl"</span>, <span class="string">"log"</span>        <span class="comment">// Link with these libraries!</span></span><br><span class="line">    stl <span class="string">"stlport_shared"</span>                       <span class="comment">// Use shared stlport library</span></span><br><span class="line">    abiFilters <span class="string">"armeabi"</span>, <span class="string">"armeabi-v7a"</span>, <span class="string">"x86"</span> <span class="comment">// Set the platform</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u914D_u7F6E_u7F16_u8BD1_u5E73_u53F0_uFF08_u53EF_u9009_uFF09"><a href="#u914D_u7F6E_u7F16_u8BD1_u5E73_u53F0_uFF08_u53EF_u9009_uFF09" class="headerlink" title="配置编译平台（可选）"></a>配置编译平台（可选）</h2><p>Android Studio默认会编译所有平台下的so库。</p>
<p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/asndk%2Fas-so-output.png" alt=""></p>
<p>如果你只想编译指定平台的so库，可以加入如下配置，在module的build.gradle文件的android中加入如下代码：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ndk</span> &#123;</span><br><span class="line">      <span class="title">moduleName</span> <span class="string">"NDKJNIDemo"</span></span><br><span class="line">      abiFilters <span class="string">"armeabi"</span>, <span class="string">"armeabi-v7a"</span>, <span class="string">"x86"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/asndk%2Fas-so-output-option.png" alt=""></p>
<h2 id="u521B_u5EFA_u5305_u542Bnative_u65B9_u6CD5_u7684_u7C7B"><a href="#u521B_u5EFA_u5305_u542Bnative_u65B9_u6CD5_u7684_u7C7B" class="headerlink" title="创建包含native方法的类"></a>创建包含native方法的类</h2><p>我这里创建了一个JniUtils类，并且创建了一个名为getStringFromC()的nativie方法，该方法作用就是简单的从JNI层返回一个字符串给Java层，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liuling.ndkjnidemo;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by liuling on 16-5-16.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"NDKJNIDemo"</span>);<span class="comment">//与build.gradle里面设置的so名字，必须一致</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getStringFromC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里得注意loadLibrary加载的so库的名字必须和上面第3步配置的moduleName保持一直，否则会报找不到库文件的异常。</p>
<h2 id="u521B_u5EFAC/C++_u6E90_u4EE3_u7801"><a href="#u521B_u5EFAC/C++_u6E90_u4EE3_u7801" class="headerlink" title="创建C/C++源代码"></a>创建C/C++源代码</h2><h3 id="u751F_u6210_u5934_u6587_u4EF6"><a href="#u751F_u6210_u5934_u6587_u4EF6" class="headerlink" title="生成头文件"></a>生成头文件</h3><p>进入module/build/intermediates/classes/debug目录下，在命令行下使用javah生成头文件，我这里是这样的：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd app/build/intermediates/classes/debug</span><br><span class="line">javah -jni com<span class="class">.liuling</span><span class="class">.ndkjnidemo</span><span class="class">.JniUtils</span></span><br></pre></td></tr></table></figure>
<p>完了之后会在module/build/intermediates/classes/debug目录下生成相应的头文件，我这里生成的是com_liuling_ndkjnidemo_JniUtils.h，内容如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class com_liuling_ndkjnidemo_JniUtils */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifndef</span> _Included_com_liuling_ndkjnidemo_JniUtils</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> _Included_com_liuling_ndkjnidemo_JniUtils</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Class:     com_liuling_ndkjnidemo_JniUtils</span><br><span class="line"> * Method:    getStringFormC</span><br><span class="line"> * Signature: ()Ljava/lang/String;</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_liuling_ndkjnidemo_JniUtils_getStringFromC</span></span><br><span class="line">  <span class="params">(JNIEnv *, jclass)</span></span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h3 id="u521B_u5EFAjni_u76EE_u5F55"><a href="#u521B_u5EFAjni_u76EE_u5F55" class="headerlink" title="创建jni目录"></a>创建jni目录</h3><p>在module/src/main/下面新建jni目录，ndk会默认编译该目录下的源文件。目录结构如下图：</p>
<p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/asndk%2Fjni-struts.png" alt=""></p>
<p>当然，你也可以自定义C/C++源代码目录，在module的build.gradle文件的android中添加如下代码：</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">sourceSets</span> &#123;</span><br><span class="line">    <span class="keyword">main</span> &#123;</span><br><span class="line">        jni.srcDirs <span class="string">'src/main/jnisrc'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u62F7_u8D1D_u5934_u6587_u4EF6_u5230C/C++_u6E90_u4EE3_u7801_u76EE_u5F55_u5E76_u521B_u5EFAC_u6E90_u6587_u4EF6"><a href="#u62F7_u8D1D_u5934_u6587_u4EF6_u5230C/C++_u6E90_u4EE3_u7801_u76EE_u5F55_u5E76_u521B_u5EFAC_u6E90_u6587_u4EF6" class="headerlink" title="拷贝头文件到C/C++源代码目录并创建C源文件"></a>拷贝头文件到C/C++源代码目录并创建C源文件</h3><p>将前面生成的头文件拷贝到C/C++源代码目录，并创建相应的C代码文件，我这里创建了com_liuling_ndkjnidemo_JniUtils.c，内容如下：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include "com_liuling_ndkjnidemo_JniUtils.h"</span></span><br><span class="line">/<span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Class:     com_liuling_ndkjnidemo_JniUtils</span><br><span class="line"> <span class="keyword">*</span> Method:    getStringFormC</span><br><span class="line"> <span class="keyword">*</span> Signature: ()Ljava/lang/String;</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_liuling_ndkjnidemo_JniUtils_getStringFromC</span><br><span class="line">        (JNIEnv <span class="keyword">*</span>env, jclass obj) &#123;</span><br><span class="line">    return (jstring)(<span class="keyword">*</span>env)-&gt; NewStringUTF(env, <span class="string">"I am string from jni-jnisrc"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java_com_liuling_ndkjnidemo_JniUtils_getStringFromC方法就是对应JniUtils里的native方法getStringFromC()。</p>
<h2 id="u8FD0_u884C_u6548_u679C"><a href="#u8FD0_u884C_u6548_u679C" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/asndk%2Fjni-sample.png" alt=""></p>
<h1 id="Gradle_u914D_u7F6E_u8986_u76D6_u9ED8_u8BA4NDK_u7F16_u8BD1"><a href="#Gradle_u914D_u7F6E_u8986_u76D6_u9ED8_u8BA4NDK_u7F16_u8BD1" class="headerlink" title="Gradle配置覆盖默认NDK编译"></a>Gradle配置覆盖默认NDK编译</h1><p>大家会发现几个问题：</p>
<ul>
<li><p>为什么运行程序之后在main下面没找到so库呢？</p>
</li>
<li><p>为什么编译时不需要Android.mk文件呢？</p>
</li>
</ul>
<p>默认情况下ndk将生成的so库放到了build下面去了，同时也会使用一个默认的Android.mk文件进行编译，如下图：</p>
<p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/asndk%2Fdefault-mk.png" alt=""></p>
<p>那我们能否覆盖默认的设置呢？答案时肯定的！</p>
<p>首先在项目gradle文件的android{}中添加如下代码：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sourceSets</span> &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        jni.srcDirs = []   <span class="comment">//屏蔽gradle的jni生成过程</span></span><br><span class="line">        jniLibs.srcDir <span class="string">'src/main/libs'</span>  <span class="comment">//指定引用so库的目录</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在gradle文件最底部添加一个ndk编译task：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">task</span> ndkBuild(type: Exec) &#123;</span><br><span class="line">    <span class="title">commandLine</span> <span class="string">'ndk-build'</span>, <span class="string">'-C'</span>, file(<span class="string">'src/main/jni'</span>).absolutePath</span><br><span class="line">&#125;</span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    <span class="title">compileTask</span> -&gt; compileTask.dependsOn ndkBuild</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：使用上述命令必须确定ndk的环境变量配置好了，也就是确定ndk的目录加到PATH中去了，否则该任务会执行失败。</p>
<p>最后自己在jni目录下面建立Android.mk和Application.mk文件，直接点击AS上的运行就会先执行NDK编译的过程。</p>
<p>Android.mk：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">LOCAL_PATH</span> := <span class="variable">$(call my-dir)</span></span><br><span class="line"><span class="constant">local_c_includes</span> := \</span><br><span class="line">	<span class="variable">$(NDK_PROJECT_PATH)</span> \</span><br><span class="line">	</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"><span class="comment"># so库名字</span></span><br><span class="line"><span class="constant">LOCAL_MODULE</span>    := NDKJNIDemo </span><br><span class="line"><span class="constant">LOCAL_SRC_FILES</span> := com_liuling_ndkjnidemo_JniUtils.c</span><br><span class="line"><span class="comment"># 添加log模块</span></span><br><span class="line"><span class="constant">LOCAL_LDLIBS</span>    := -lm -llog</span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>
<p>Application.mk：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">APP_ABI</span> := armeabi x86</span><br><span class="line"><span class="comment">#使NDK支持string</span></span><br><span class="line"><span class="constant">APP_STL</span> := stlport_shared</span><br><span class="line"><span class="constant">APP_STL</span> := stlport_static</span><br></pre></td></tr></table></figure>
<p>可以看到，默认情况下可以在gradle中的ndk中配置以上这些信息：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ndk</span> &#123;</span><br><span class="line">    <span class="title">moduleName</span> <span class="string">"NDKJNIDemo"</span></span><br><span class="line">    ldLibs <span class="string">"log"</span></span><br><span class="line">    stl <span class="string">"stlport_shared"</span></span><br><span class="line">    abiFilters <span class="string">"armeabi"</span>, <span class="string">"x86"</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Ubuntu_u4E0BNDK_u73AF_u5883_u7684_u642D_u5EFA"><a href="#Ubuntu_u4E0BNDK_u73AF_u5883_u7684_u642D_u5EFA" class="headerlink" title="Ubuntu下NDK环境的搭建"></a>Ubuntu下NDK环境的搭建</h1><h2 id="NDK_u4E0B_u8F7D"><a href="#NDK_u4E0B_u8F7D" class="headerlink" title="NDK下载"></a>NDK下载</h2><p>首先需要下载NDK编译工具，目前官方最新的NDK版本是r11c，为了保证稳定性，我下的是r11b。</p>
<p>能翻墙的可以从谷歌官网下载，地址为：<a href="https://developer.android.com/ndk/downloads/index.html">https://developer.android.com/ndk/downloads/index.html</a></p>
<p>不能翻墙的也可以从下面网站下载，该网站提供了Android开发各种工具的下载：<a href="http://www.androiddevtools.cn/index.html">http://www.androiddevtools.cn/index.html</a></p>]]>
    
    </summary>
    
      <category term="NDK" scheme="http://www.liuling123.com/tags/NDK/"/>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="jni" scheme="http://www.liuling123.com/tags/jni/"/>
    
      <category term="JNI&amp;amp;NDK" scheme="http://www.liuling123.com/categories/JNI-amp-NDK/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio在Gradle中配置NDK编译，覆盖默认NDK编译]]></title>
    <link href="http://www.liuling123.com/2016/05/android-studio-gradle-ndk-config.html"/>
    <id>http://www.liuling123.com/2016/05/android-studio-gradle-ndk-config.html</id>
    <published>2016-05-18T13:07:00.000Z</published>
    <updated>2016-05-18T13:19:33.000Z</updated>
    <content type="html"><![CDATA[<p>默认情况下，存在src/main/jni文件夹时，gradle生成脚本会执行ndk编译生成操作，但是，编译生成方式并不是像以前那样用ndk-build去处理Android.mk Application.mk等进行c/c++代码的编译链接，而是在临时文件路径中重新生成了一份新的mk文件，并以此作为ndk编译项目。</p>
<p>如果我们想自己在jni目录下面建立Android.mk和Application.mk来进行编译，比如在so库中加入log打印功能，则需要在Android.mk中将log库编译到so文件，此时要怎么做呢？</p>
<p>首先在项目gradle文件的android{}中添加如下代码：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sourceSets</span> &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        jni.srcDirs = []   <span class="comment">//屏蔽gradle的jni生成过程</span></span><br><span class="line">        jniLibs.srcDir <span class="string">'src/main/libs'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>然后在gradle文件最底部添加一个ndk编译任务：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">task</span> ndkBuild(type: Exec) &#123;</span><br><span class="line">    <span class="title">commandLine</span> <span class="string">'ndk-build'</span>, <span class="string">'-C'</span>, file(<span class="string">'src/main/jni'</span>).absolutePath</span><br><span class="line">&#125;</span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    <span class="title">compileTask</span> -&gt; compileTask.dependsOn ndkBuild</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：使用上述命令必须确定ndk的环境变量配置好了，也就是确定ndk的目录加到PATH中去了，否则该任务会执行失败。</p>
<p>在MAC中不能直接使用ndk-build，会找不到命令，即使已经在～/.bash_profile中将ndk目录加入到PATH中了也一样。需要使用绝对路径，如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commandLine <span class="string">'/User/xxx/xxx/ndk-build'</span>, <span class="string">'-C'</span>, <span class="function"><span class="title">file</span><span class="params">(<span class="string">'src/main/jni'</span>)</span></span>.absolutePath</span><br></pre></td></tr></table></figure></p>
<p>最后自己在jni目录下面建立Android.mk和Application.mk文件，直接点击AS上的运行就会先执行NDK编译的过程。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>默认情况下，存在src/main/jni文件夹时，gradle生成脚本会执行ndk编译生成操作，但是，编译生成方式并不是像以前那样用ndk-build去处理Android.mk Application.mk等进行c/c++代码的编译链接，而是在临时文件路径中重新生成了一份新的mk文件，并以此作为ndk编译项目。</p>
<p>如果我们想自己在jni目录下面建立Android.mk和Application.mk来进行编译，比如在so库中加入log打印功能，则需要在Android.mk中将log库编译到so文件，此时要怎么做呢？</p>
<p>首先在项目gradle文件的android{}中添加如下代码：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sourceSets</span> &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        jni.srcDirs = []   <span class="comment">//屏蔽gradle的jni生成过程</span></span><br><span class="line">        jniLibs.srcDir <span class="string">'src/main/libs'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="NDK" scheme="http://www.liuling123.com/tags/NDK/"/>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="jni" scheme="http://www.liuling123.com/tags/jni/"/>
    
      <category term="JNI&amp;amp;NDK" scheme="http://www.liuling123.com/categories/JNI-amp-NDK/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android自动化反编译脚本]]></title>
    <link href="http://www.liuling123.com/2016/05/auto-decompiler.html"/>
    <id>http://www.liuling123.com/2016/05/auto-decompiler.html</id>
    <published>2016-05-15T05:22:00.000Z</published>
    <updated>2016-05-15T05:23:09.000Z</updated>
    <content type="html"><![CDATA[<p>作为Android开发人员，在开发过程中经常会因为某个原因去反编译某个app。为了方便，这里特意整理了一个反编译的自动化脚本，只需一个命令就可以获取apk文件里面的资源文件，并使用jd－gui工具打开生成的jar文件。省去每次都要手动敲每个工具的命令，有时候忘记了某个命令还得上网搜索，很麻烦。</p>
<p>这里只整理了Linux和Mac两个平台的自动化脚本，Win下的百度能搜索的到。</p>
<h3 id="u6240_u9700_u8981_u7684_u5DE5_u5177"><a href="#u6240_u9700_u8981_u7684_u5DE5_u5177" class="headerlink" title="所需要的工具"></a>所需要的工具</h3><p>1）apktool，功能：反编译出apk所需要的资源文件和布局设置文件等，<br>下载地址：<a href="http://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="external">http://ibotpeaches.github.io/Apktool/install/</a></p>
<p>2）dex2jar，功能：反编译出jar文件，即apk的源程序文件的字节码，<br>下载地址：<a href="http://code.google.com/p/dex2jar/downloads/list" target="_blank" rel="external">http://code.google.com/p/dex2jar/downloads/list</a></p>
<p>3）jd-gui 功能：查看反编译出来的jar文件<br>下载地址：<a href="http://jd.benow.ca/" target="_blank" rel="external">http://jd.benow.ca/</a></p>
<p>这些工具我都整理好了，下面附了Linux和Mac平台的工具下载链接，并且包含了自动化脚本工具，可以直接下载使用。</p>
<a id="more"></a>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>自动化脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh  </span><br><span class="line"></span></span><br><span class="line"><span class="comment"># will be decompiled file</span></span><br><span class="line">file_name=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">export</span> NAME=<span class="variable">$&#123;file_name%.apk&#125;</span></span><br><span class="line"><span class="built_in">export</span> APK_TOOLS=<span class="variable">$PWD</span>/tools/apktool-<span class="number">2.1</span>.<span class="number">1</span></span><br><span class="line"><span class="built_in">export</span> DEX_JAR=<span class="variable">$PWD</span>/tools/dex2jar-<span class="number">0.0</span>.<span class="number">9.15</span></span><br><span class="line"><span class="built_in">export</span> JD_GUI=<span class="variable">$PWD</span>/tools/jd-gui-<span class="number">0.3</span>.<span class="number">5</span>.linux.i686</span><br><span class="line"></span><br><span class="line"><span class="comment">#init  </span></span><br><span class="line">rm -rf tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#apply apktool  </span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$APK_TOOLS</span></span><br><span class="line">rm -rf ../../<span class="variable">$NAME</span></span><br><span class="line">./apktool d <span class="operator">-f</span> ../../<span class="variable">$&#123;file_name&#125;</span></span><br><span class="line">mv <span class="variable">$NAME</span> ../../</span><br><span class="line"></span><br><span class="line"><span class="comment">#unzip  </span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$APK_TOOLS</span>/../..</span><br><span class="line">mkdir -p tmp</span><br><span class="line">cp <span class="variable">$&#123;file_name&#125;</span> tmp/<span class="variable">$NANME</span>.zip</span><br><span class="line"><span class="built_in">cd</span> tmp</span><br><span class="line">unzip <span class="variable">$NANME</span>.zip</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">cp ./tmp/<span class="variable">$NANME</span>/classes.dex <span class="variable">$NAME</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#use dex2jar to get classes_dex2jar.jar  </span></span><br><span class="line"><span class="variable">$DEX_JAR</span>/dex2jar.sh <span class="variable">$NAME</span>/classes.dex</span><br><span class="line">rm -rf tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#prepre open classes_dex2jar.jar</span></span><br><span class="line"><span class="variable">$JD_GUI</span>/jd-gui <span class="variable">$NAME</span>/classes_dex2jar.jar</span><br></pre></td></tr></table></figure></p>
<p>Linux下反编译工具下载链接：<a href="http://download.csdn.net/detail/a476777389/9520707" target="_blank" rel="external">http://download.csdn.net/detail/a476777389/9520707</a></p>
<h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p>自动化脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh  </span><br><span class="line"></span></span><br><span class="line"><span class="comment"># will be decompiled file</span></span><br><span class="line">file_name=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">export</span> NAME=<span class="variable">$&#123;file_name%.apk&#125;</span></span><br><span class="line"><span class="built_in">export</span> APK_TOOLS=<span class="variable">$PWD</span>/tools/apktool-<span class="number">2.1</span>.<span class="number">1</span></span><br><span class="line"><span class="built_in">export</span> DEX_JAR=<span class="variable">$PWD</span>/tools/dex2jar-<span class="number">0.0</span>.<span class="number">9.15</span></span><br><span class="line"><span class="built_in">export</span> JD_GUI=<span class="variable">$PWD</span>/tools/jd-gui-osx-<span class="number">1.4</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#init  </span></span><br><span class="line">rm -rf tmp</span><br><span class="line"><span class="comment">#apply apktool  </span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$APK_TOOLS</span></span><br><span class="line">rm -rf ../../<span class="variable">$NAME</span></span><br><span class="line">./apktool d <span class="operator">-f</span> ../../<span class="variable">$&#123;file_name&#125;</span></span><br><span class="line">mv <span class="variable">$NAME</span> ../../</span><br><span class="line"></span><br><span class="line"><span class="comment">#unzip  </span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$APK_TOOLS</span>/../..</span><br><span class="line">mkdir -p tmp</span><br><span class="line">cp <span class="variable">$&#123;file_name&#125;</span> tmp/<span class="variable">$NANME</span>.zip</span><br><span class="line"><span class="built_in">cd</span> tmp</span><br><span class="line">unzip <span class="variable">$NANME</span>.zip</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">cp ./tmp/<span class="variable">$NANME</span>/classes.dex <span class="variable">$NAME</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#use dex2jar to get classes_dex2jar.jar  </span></span><br><span class="line"><span class="variable">$DEX_JAR</span>/d2j-dex2jar.sh <span class="variable">$NAME</span>/classes.dex</span><br><span class="line">rm -rf tmp </span><br><span class="line">mv classes-dex2jar.jar <span class="variable">$NAME</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#prepre open classes_dex2jar.jar</span></span><br><span class="line">open <span class="operator">-a</span> <span class="variable">$JD_GUI</span>/JD-GUI.app <span class="variable">$NAME</span>/classes-dex2jar.jar</span><br></pre></td></tr></table></figure></p>
<p>Mac下反编译工具下载链接：<a href="http://download.csdn.net/detail/a476777389/9520676" target="_blank" rel="external">http://download.csdn.net/detail/a476777389/9520676</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>作为Android开发人员，在开发过程中经常会因为某个原因去反编译某个app。为了方便，这里特意整理了一个反编译的自动化脚本，只需一个命令就可以获取apk文件里面的资源文件，并使用jd－gui工具打开生成的jar文件。省去每次都要手动敲每个工具的命令，有时候忘记了某个命令还得上网搜索，很麻烦。</p>
<p>这里只整理了Linux和Mac两个平台的自动化脚本，Win下的百度能搜索的到。</p>
<h3 id="u6240_u9700_u8981_u7684_u5DE5_u5177"><a href="#u6240_u9700_u8981_u7684_u5DE5_u5177" class="headerlink" title="所需要的工具"></a>所需要的工具</h3><p>1）apktool，功能：反编译出apk所需要的资源文件和布局设置文件等，<br>下载地址：<a href="http://ibotpeaches.github.io/Apktool/install/">http://ibotpeaches.github.io/Apktool/install/</a></p>
<p>2）dex2jar，功能：反编译出jar文件，即apk的源程序文件的字节码，<br>下载地址：<a href="http://code.google.com/p/dex2jar/downloads/list">http://code.google.com/p/dex2jar/downloads/list</a></p>
<p>3）jd-gui 功能：查看反编译出来的jar文件<br>下载地址：<a href="http://jd.benow.ca/">http://jd.benow.ca/</a></p>
<p>这些工具我都整理好了，下面附了Linux和Mac平台的工具下载链接，并且包含了自动化脚本工具，可以直接下载使用。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="反编译" scheme="http://www.liuling123.com/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EventBus源码解析]]></title>
    <link href="http://www.liuling123.com/2016/01/EventBus-source.html"/>
    <id>http://www.liuling123.com/2016/01/EventBus-source.html</id>
    <published>2016-01-12T13:29:00.000Z</published>
    <updated>2016-01-12T13:38:36.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>前面一篇文章讲解了EventBus的使用，但是作为开发人员，不能只停留在仅仅会用的层面上，我们还需要弄清楚它的内部实现原理。所以本篇博文将分析EventBus的源码，看看究竟它是如何实现“发布/订阅”功能的。</p>
<p>相关文章<br><a href="http://liuling123.com/2016/01/EventBus-explain.html" target="_blank" rel="external">EventBus使用详解</a><br><a href="http://liuling123.com/2016/01/EventBus-source.html" target="_blank" rel="external">EventBus源码解析</a></p>
</blockquote>
<h3 id="u4E8B_u4EF6_u6CE8_u518C"><a href="#u4E8B_u4EF6_u6CE8_u518C" class="headerlink" title="事件注册"></a>事件注册</h3><p>根据前一讲<a href="http://liuling123.com/2016/01/EventBus-explain.html" target="_blank" rel="external">EventBus使用详解</a>我们已经知道EventBus使用首先是需要注册的，注册事件的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().<span class="keyword">register</span>(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>EventBus对外提供了一个register方法来进行事件注册，该方法接收一个Object类型的参数，下面看下register方法的源码:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">public</span> void register(Object <span class="keyword">subscriber) </span>&#123;</span><br><span class="line">    Class&lt;?&gt; <span class="keyword">subscriberClass </span>= <span class="keyword">subscriber.getClass();</span><br><span class="line"></span>    // 判断该类是否是匿名内部类</span><br><span class="line">    <span class="keyword">boolean </span>forceReflection = <span class="keyword">subscriberClass.isAnonymousClass();</span><br><span class="line"></span>    List&lt;<span class="keyword">SubscriberMethod&gt; </span><span class="keyword">subscriberMethods </span>=</span><br><span class="line">            <span class="keyword">subscriberMethodFinder.findSubscriberMethods(subscriberClass, </span>forceReflection)<span class="comment">;</span></span><br><span class="line">    for (<span class="keyword">SubscriberMethod </span><span class="keyword">subscriberMethod </span>: <span class="keyword">subscriberMethods) </span>&#123;</span><br><span class="line">        <span class="keyword">subscribe(subscriber, </span><span class="keyword">subscriberMethod);</span><br><span class="line"></span>    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法首先获取获取传进来参数的Class对象，然后判断该类是否是匿名内部类。然后根据这两个参数通过subscriberMethodFinder.findSubscriberMethods方法获取所有的事件处理方法。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">List</span>&lt;<span class="keyword">SubscriberMethod&gt; </span>findSubscriberMethods(Class&lt;?&gt; <span class="keyword">subscriberClass, </span><span class="keyword">boolean </span>forceReflection) &#123;</span><br><span class="line">    <span class="keyword">String </span>key = <span class="keyword">subscriberClass.getName();</span><br><span class="line"></span>    List&lt;<span class="keyword">SubscriberMethod&gt; </span><span class="keyword">subscriberMethods;</span><br><span class="line"></span>    synchronized (METHOD_CACHE) &#123;</span><br><span class="line">        <span class="keyword">subscriberMethods </span>= METHOD_CACHE.get(key)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="preprocessor">if</span> (<span class="keyword">subscriberMethods </span>!= null) &#123;</span><br><span class="line">        //缓存命中，直接返回</span><br><span class="line">        return <span class="keyword">subscriberMethods;</span><br><span class="line"></span>    &#125;</span><br><span class="line">    <span class="preprocessor">if</span> (INDEX != null &amp;&amp; !forceReflection) &#123;</span><br><span class="line">        // 如果INDEX不为空，并且<span class="keyword">subscriberClass为非匿名内部类，</span><br><span class="line"></span>        // 则通过findSubscriberMethodsWithIndex方法查找事件处理函数</span><br><span class="line">        <span class="keyword">subscriberMethods </span>= findSubscriberMethodsWithIndex(<span class="keyword">subscriberClass);</span><br><span class="line"></span>        <span class="preprocessor">if</span> (<span class="keyword">subscriberMethods.isEmpty()) </span>&#123;</span><br><span class="line">            //如果结果为空，则使用findSubscriberMethodsWithReflection方法再查找一次</span><br><span class="line">            <span class="keyword">subscriberMethods </span>= findSubscriberMethodsWithReflection(<span class="keyword">subscriberClass);</span><br><span class="line"></span>        &#125;</span><br><span class="line">    &#125; <span class="preprocessor">else</span> &#123;</span><br><span class="line">        //INDEX为空或者<span class="keyword">subscriberClass未匿名内部类，使用findSubscriberMethodsWithReflection方法查找</span><br><span class="line"></span>        <span class="keyword">subscriberMethods </span>= findSubscriberMethodsWithReflection(<span class="keyword">subscriberClass);</span><br><span class="line"></span>    &#125;</span><br><span class="line">    <span class="preprocessor">if</span> (<span class="keyword">subscriberMethods.isEmpty()) </span>&#123;</span><br><span class="line">        throw new EventBusException(<span class="string">"Subscriber "</span> + <span class="keyword">subscriberClass</span><br><span class="line"></span>                + <span class="string">" and its super classes have no public methods with the @Subscribe annotation"</span>)<span class="comment">;</span></span><br><span class="line">    &#125; <span class="preprocessor">else</span> &#123;</span><br><span class="line">        //存入缓存并返回</span><br><span class="line">        synchronized (METHOD_CACHE) &#123;</span><br><span class="line">            METHOD_CACHE.put(key, <span class="keyword">subscriberMethods);</span><br><span class="line"></span>        &#125;</span><br><span class="line">        return <span class="keyword">subscriberMethods;</span><br><span class="line"></span>    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过名字我们就知道这个方法是获取subscriberClass类中所有的事件处理方法（即使用了@Subscribe的方法）。该方法首先会从缓存METHOD_CACHE中去获取事件处理方法，如果缓存中不存在，则需要通过findSubscriberMethodsWithIndex或者findSubscriberMethodsWithReflection方法获取所有事件处理方法，获取到之后先存入缓存再返回。</p>
<p>这个方法里面有个INDEX对象，我们看看它是个什么鬼：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Optional generated index without entries from subscribers super classes */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SubscriberIndex INDEX;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    SubscriberIndex newIndex = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">Class</span>&lt;?&gt; clazz = <span class="keyword">Class</span>.forName(<span class="string">"de.greenrobot.event.GeneratedSubscriberIndex"</span>);</span><br><span class="line">        newIndex = (SubscriberIndex) clazz.newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        Log.d(EventBus.TAG, <span class="string">"No subscriber index available, reverting to dynamic look-up"</span>);</span><br><span class="line">        <span class="comment">// Fine</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.w(EventBus.TAG, <span class="string">"Could not init subscriber index, reverting to dynamic look-up"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    INDEX = newIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由上面代码可以看出EventBus会试图加载一个de.greenrobot.event.GeneratedSubscriberIndex类并创建对象赋值给INDEX，但是EventBus3.0 beta并没有为我们提供该类（可能后续版本会提供）。所以INDEX为null。</p>
<p>我们再返回findSubscriberMethods方法，我们知道INDEX已经为null了，所以必然会调用findSubscriberMethodsWithReflection方法查找所有事件处理函数：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">private <span class="type">List</span>&lt;<span class="type">SubscriberMethod</span>&gt; findSubscriberMethodsWithReflection(<span class="type">Class</span>&lt;?&gt; subscriberClass) &#123;</span><br><span class="line">    <span class="type">List</span>&lt;<span class="type">SubscriberMethod</span>&gt; subscriberMethods = new <span class="type">ArrayList</span>&lt;<span class="type">SubscriberMethod</span>&gt;();</span><br><span class="line">    <span class="type">Class</span>&lt;?&gt; clazz = subscriberClass;</span><br><span class="line">    <span class="type">HashSet</span>&lt;<span class="type">String</span>&gt; eventTypesFound = new <span class="type">HashSet</span>&lt;<span class="type">String</span>&gt;();</span><br><span class="line">    <span class="type">StringBuilder</span> methodKeyBuilder = new <span class="type">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span> (clazz != null) &#123;</span><br><span class="line">        <span class="type">String</span> name = clazz.getName();</span><br><span class="line">        // 如果查找的类是java、javax或者android包下面的类，则过滤掉</span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">"java."</span>) || name.startsWith(<span class="string">"javax."</span>) || name.startsWith(<span class="string">"android."</span>)) &#123;</span><br><span class="line">            // <span class="type">Skip</span> system classes, this just degrades performance</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // <span class="type">Starting</span> <span class="keyword">with</span> <span class="type">EventBus</span> <span class="number">2</span>.<span class="number">2</span> we enforced methods to be public (might change <span class="keyword">with</span> annotations again)</span><br><span class="line">        // 通过反射查找所有该类中所有方法</span><br><span class="line">        <span class="type">Method</span>[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Method</span> <span class="keyword">method</span> : methods) &#123;</span><br><span class="line">            <span class="type">int</span> modifiers = <span class="keyword">method</span>.getModifiers();</span><br><span class="line">            // 事件处理方法必须为public，这里过滤掉所有非public方法</span><br><span class="line">            <span class="keyword">if</span> ((modifiers &amp; <span class="type">Modifier</span>.<span class="type">PUBLIC</span>) != <span class="number">0</span> &amp;&amp; (modifiers &amp; <span class="type">MODIFIERS_IGNORE</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">Class</span>&lt;?&gt;[] parameterTypes = <span class="keyword">method</span>.getParameterTypes();</span><br><span class="line">                // 事件处理方法必须只有一个参数</span><br><span class="line">                <span class="keyword">if</span> (parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">Subscribe</span> subscribeAnnotation = <span class="keyword">method</span>.getAnnotation(<span class="type">Subscribe</span>.class);</span><br><span class="line">                    <span class="keyword">if</span> (subscribeAnnotation != null) &#123;</span><br><span class="line">                        <span class="type">String</span> methodName = <span class="keyword">method</span>.getName();</span><br><span class="line">                        <span class="type">Class</span>&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</span><br><span class="line">                        methodKeyBuilder.setLength(<span class="number">0</span>);</span><br><span class="line">                        methodKeyBuilder.append(methodName);</span><br><span class="line">                        methodKeyBuilder.append('&gt;').append(eventType.getName());</span><br><span class="line"></span><br><span class="line">                        <span class="type">String</span> methodKey = methodKeyBuilder.toString();</span><br><span class="line">                        <span class="keyword">if</span> (eventTypesFound.add(methodKey)) &#123;</span><br><span class="line">                            // <span class="type">Only</span> add <span class="keyword">if</span> <span class="keyword">not</span> already found <span class="keyword">in</span> a sub class</span><br><span class="line">                            // 只有在子类中没有找到，才会添加到subscriberMethods</span><br><span class="line">                            <span class="type">ThreadMode</span> threadMode = subscribeAnnotation.threadMode();</span><br><span class="line">                            subscriberMethods.add(new <span class="type">SubscriberMethod</span>(<span class="keyword">method</span>, eventType, threadMode,</span><br><span class="line">                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification) &#123;</span><br><span class="line">                    // 如果某个方法加了@<span class="type">Subscribe</span>注解，并且不是<span class="number">1</span>个参数，则抛出<span class="type">EventBusException</span>异常</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">method</span>.isAnnotationPresent(<span class="type">Subscribe</span>.class)) &#123;</span><br><span class="line">                        <span class="type">String</span> methodName = name + <span class="string">"."</span> + <span class="keyword">method</span>.getName();</span><br><span class="line">                        throw new <span class="type">EventBusException</span>(<span class="string">"@Subscribe method "</span> + methodName +</span><br><span class="line">                                <span class="string">"must have exactly 1 parameter but has "</span> + parameterTypes.length);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification) &#123;</span><br><span class="line">                // 如果某个方法加了@<span class="type">Subscribe</span>注解，并且不是public修饰，则抛出<span class="type">EventBusException</span>异常</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">method</span>.isAnnotationPresent(<span class="type">Subscribe</span>.class)) &#123;</span><br><span class="line">                    <span class="type">String</span> methodName = name + <span class="string">"."</span> + <span class="keyword">method</span>.getName();</span><br><span class="line">                    throw new <span class="type">EventBusException</span>(methodName +</span><br><span class="line">                            <span class="string">" is a illegal @Subscribe method: must be public, non-static, and non-abstract"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 会继续查找父类的方法</span><br><span class="line">        clazz = clazz.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> subscriberMethods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法主要作用就是找出subscriberClass类以及subscriberClass的父类中所有的事件处理方法（添加了@Subscribe注解，访问修饰符为public并且只有一个参数）。值得注意的是：如果子类与父类中同时存在了相同事件处理函数，则父类中的不会被添加到subscriberMethods。</p>
<p>好了，查找事件处理函数的过程已经完了，我们继续回到register方法中：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">for</span> (<span class="keyword">SubscriberMethod </span><span class="keyword">subscriberMethod </span>: <span class="keyword">subscriberMethods) </span>&#123;</span><br><span class="line">    <span class="keyword">subscribe(subscriber, </span><span class="keyword">subscriberMethod);</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>找到事件处理函数后，会遍历找到的所有事件处理函数并调用subscribe方法将所有事件处理函数注册到EventBus中。<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">private</span> void <span class="keyword">subscribe(Object </span><span class="keyword">subscriber, </span><span class="keyword">SubscriberMethod </span><span class="keyword">subscriberMethod) </span>&#123;</span><br><span class="line">    Class&lt;?&gt; eventType = <span class="keyword">subscriberMethod.eventType;</span><br><span class="line"></span>    // 获取订阅了某种类型数据的 <span class="keyword">Subscription </span>。 使用了 CopyOnWriteArrayList ，这个是线程安全的，</span><br><span class="line">    // CopyOnWriteArrayList 会在更新的时候，重新生成一份 copy，其他线程使用的是 </span><br><span class="line">    // copy，不存在什么线程安全性的问题。</span><br><span class="line">    CopyOnWriteArrayList&lt;<span class="keyword">Subscription&gt; </span><span class="keyword">subscriptions </span>= <span class="keyword">subscriptionsByEventType.get(eventType);</span><br><span class="line"></span>    <span class="keyword">Subscription </span>newSubscription = new <span class="keyword">Subscription(subscriber, </span><span class="keyword">subscriberMethod);</span><br><span class="line"></span>    <span class="preprocessor">if</span> (<span class="keyword">subscriptions </span>== null) &#123;</span><br><span class="line">        <span class="keyword">subscriptions </span>= new CopyOnWriteArrayList&lt;<span class="keyword">Subscription&gt;();</span><br><span class="line"></span>        <span class="keyword">subscriptionsByEventType.put(eventType, </span><span class="keyword">subscriptions);</span><br><span class="line"></span>    &#125; <span class="preprocessor">else</span> &#123;</span><br><span class="line">        //如果已经被注册过了，则抛出EventBusException异常</span><br><span class="line">        <span class="preprocessor">if</span> (<span class="keyword">subscriptions.contains(newSubscription)) </span>&#123;</span><br><span class="line">            throw new EventBusException(<span class="string">"Subscriber "</span> + <span class="keyword">subscriber.getClass() </span>+ <span class="string">" already registered to event "</span></span><br><span class="line">                    + eventType)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Starting with EventBus <span class="number">2</span>.<span class="number">2</span> we enforced methods to <span class="keyword">be </span>public (might change with annotations again)</span><br><span class="line">    // <span class="keyword">subscriberMethod.method.setAccessible(true);</span><br><span class="line"></span></span><br><span class="line">    // Got to synchronize to avoid shifted positions when <span class="keyword">adding/removing </span>concurrently</span><br><span class="line">    // 根据优先级将newSubscription查到合适位置</span><br><span class="line">    synchronized (<span class="keyword">subscriptions) </span>&#123;</span><br><span class="line">        int size = <span class="keyword">subscriptions.size();</span><br><span class="line"></span>        for (int i = <span class="number">0</span><span class="comment">; i &lt;= size; i++) &#123;</span></span><br><span class="line">            <span class="preprocessor">if</span> (i == size <span class="title">||</span> <span class="keyword">subscriberMethod.priority </span>&gt; <span class="keyword">subscriptions.get(i).subscriberMethod.priority) </span>&#123;</span><br><span class="line">                <span class="keyword">subscriptions.add(i, </span>newSubscription)<span class="comment">;</span></span><br><span class="line">                <span class="keyword">break;</span><br><span class="line"></span>            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //将处理事件类型添加到typesBySubscriber</span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; <span class="keyword">subscribedEvents </span>= typesBySubscriber.get(<span class="keyword">subscriber);</span><br><span class="line"></span>    <span class="preprocessor">if</span> (<span class="keyword">subscribedEvents </span>== null) &#123;</span><br><span class="line">        <span class="keyword">subscribedEvents </span>= new ArrayList&lt;Class&lt;?&gt;&gt;()<span class="comment">;</span></span><br><span class="line">        typesBySubscriber.put(<span class="keyword">subscriber, </span><span class="keyword">subscribedEvents);</span><br><span class="line"></span>    &#125;</span><br><span class="line">    <span class="keyword">subscribedEvents.add(eventType);</span><br><span class="line"></span></span><br><span class="line">    // 如果该事件处理方法为粘性事件，即设置了“sticky = true”，则需要调用checkPostStickyEventToSubscription</span><br><span class="line">    // 判断是否有粘性事件需要处理，如果需要处理则触发一次事件处理函数</span><br><span class="line">    <span class="preprocessor">if</span> (<span class="keyword">subscriberMethod.sticky) </span>&#123;</span><br><span class="line">        <span class="preprocessor">if</span> (eventInheritance) &#123;</span><br><span class="line">            // Existing sticky events of all <span class="keyword">subclasses </span>of eventType have to <span class="keyword">be </span>considered.</span><br><span class="line">            // Note: <span class="keyword">Iterating </span>over all events may <span class="keyword">be </span>inefficient with lots of sticky events,</span><br><span class="line">            // thus <span class="preprocessor">data</span> <span class="keyword">structure </span>should <span class="keyword">be </span>changed to allow a more efficient lookup</span><br><span class="line">            // (e.g. an <span class="keyword">additional </span><span class="preprocessor">map</span> storing <span class="keyword">sub </span>classes of super classes: Class -&gt; List&lt;Class&gt;).</span><br><span class="line">            Set&lt;<span class="preprocessor">Map</span>.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet()<span class="comment">;</span></span><br><span class="line">            for (<span class="preprocessor">Map</span>.Entry&lt;Class&lt;?&gt;, Object&gt; <span class="preprocessor">entry</span> : entries) &#123;</span><br><span class="line">                Class&lt;?&gt; candidateEventType = <span class="preprocessor">entry</span>.getKey()<span class="comment">;</span></span><br><span class="line">                <span class="preprocessor">if</span> (eventType.isAssignableFrom(candidateEventType)) &#123;</span><br><span class="line">                    Object stickyEvent = <span class="preprocessor">entry</span>.getValue()<span class="comment">;</span></span><br><span class="line">                    checkPostStickyEventToSubscription(newSubscription, stickyEvent)<span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="preprocessor">else</span> &#123;</span><br><span class="line">            Object stickyEvent = stickyEvents.get(eventType)<span class="comment">;</span></span><br><span class="line">            checkPostStickyEventToSubscription(newSubscription, stickyEvent)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果事件处理函数设置了“sticky = true”，则会调用checkPostStickyEventToSubscription处理粘性事件。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">checkPostStickyEventToSubscription</span><span class="params">(Subscription newSubscription, Object stickyEvent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stickyEvent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)</span></span><br><span class="line">        <span class="comment">// --&gt; Strange corner case, which we don't take care of here.</span></span><br><span class="line">        postToSubscription(newSubscription, stickyEvent, Looper.getMainLooper() == Looper.myLooper());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果存在粘性事件，则立即调用postToSubscription触发该事件的事件处理函数。postToSubscription函数后面讲post时会讲到。</p>
<p>至此，整个register过程就介绍完了。<br>总结一下，整个过程分为3步：  </p>
<ol>
<li>查找注册的类中所有的事件处理函数（添加了@Subscribe注解且访问修饰符为public的方法）  </li>
<li>将所有事件处理函数注册到EventBus  </li>
<li>如果有事件处理函数设置了“sticky = true”，则立即处理该事件  </li>
</ol>
<h3 id="post_u4E8B_u4EF6"><a href="#post_u4E8B_u4EF6" class="headerlink" title="post事件"></a>post事件</h3><p>register过程讲完后，我们知道了EventBus如何找到我们定义好的事件处理函数。有了这些事件处理函数，当post相应事件的时候，EventBus就会触发订阅该事件的处理函数。具体post过程是怎样的呢？我们看看代码：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span>(<span class="params">Object <span class="keyword">event</span></span>) </span>&#123;</span><br><span class="line">    PostingThreadState postingState = currentPostingThreadState.<span class="keyword">get</span>();</span><br><span class="line">    List&lt;Object&gt; eventQueue = postingState.eventQueue;</span><br><span class="line">    eventQueue.add(<span class="keyword">event</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!postingState.isPosting) &#123;</span><br><span class="line">        <span class="comment">// 标识post的线程是否是主线程</span></span><br><span class="line">        postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();</span><br><span class="line">        postingState.isPosting = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (postingState.canceled) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Internal error. Abort state was not reset"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 循环处理eventQueue中的每一个event对象</span></span><br><span class="line">            <span class="keyword">while</span> (!eventQueue.isEmpty()) &#123;</span><br><span class="line">                postSingleEvent(eventQueue.remove(<span class="number">0</span>), postingState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 处理完之后重置postingState的一些标识信息</span></span><br><span class="line">            postingState.isPosting = <span class="keyword">false</span>;</span><br><span class="line">            postingState.isMainThread = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>currentPostingThreadState是一个ThreadLocal类型，里面存储了PostingThreadState；<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">final</span> ThreadLocal&lt;PostingThreadState&gt; currentPostingThreadState = <span class="keyword">new</span> ThreadLocal&lt;PostingThreadState&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    protected PostingThreadState initialValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PostingThreadState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** For ThreadLocal, much faster to set (and get multiple values). *</span>/</span></span></span><br><span class="line"><span class="keyword">final</span> <span class="literal">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PostingThreadState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; eventQueue = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">Object</span>&gt;();</span><br><span class="line">    boolean isPosting;</span><br><span class="line">    boolean isMainThread;</span><br><span class="line">    Subscription subscription;</span><br><span class="line">    <span class="built_in">Object</span> event;</span><br><span class="line">    boolean canceled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>PostingThreadState包含了一个事件队列eventQueue和一些标志信息。eventQueue存放所有待post的事件对象。</p>
<p>我们再回到post方法，首先会将event对象添加到事件队列eventQueue中。然后判断是否有事件正在post，如果没有则会遍历eventQueue中每一个event对象，并且调用postSingleEvent方法post该事件。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> postSingleEvent(Object event, PostingThreadState postingState) <span class="keyword">throws</span> Error &#123;</span><br><span class="line">    <span class="keyword">Class</span>&lt;?&gt; eventClass = event.getClass();</span><br><span class="line">    <span class="keyword">boolean</span> subscriptionFound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (eventInheritance) &#123;</span><br><span class="line">        <span class="comment">// 如果允许事件继承，则会调用lookupAllEventTypes查找所有的父类和接口类</span></span><br><span class="line">        List&lt;<span class="keyword">Class</span>&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</span><br><span class="line">        <span class="keyword">int</span> countTypes = eventTypes.<span class="keyword">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; countTypes; h++) &#123;</span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; clazz = eventTypes.get(h);</span><br><span class="line">            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!subscriptionFound) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logNoSubscriberMessages) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"No subscribers registered for event "</span> + eventClass);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.<span class="keyword">class</span> &amp;&amp;</span><br><span class="line">                eventClass != SubscriberExceptionEvent.<span class="keyword">class</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果post的事件没有被注册，则post一个NoSubscriberEvent事件</span></span><br><span class="line">            post(<span class="keyword">new</span> NoSubscriberEvent(<span class="keyword">this</span>, event));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果允许事件继承，则会调用lookupAllEventTypes查找所有的父类和接口类。<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;<span class="class"><span class="keyword">Class</span>&lt;?&gt;&gt; <span class="title">lookupAllEventTypes</span>(<span class="title">Class</span>&lt;?&gt; <span class="title">eventClass</span>) &#123;</span></span><br><span class="line">    synchronized (eventTypesCache) &#123;</span><br><span class="line">        List&lt;<span class="class"><span class="keyword">Class</span>&lt;?&gt;&gt; <span class="title">eventTypes</span> = <span class="title">eventTypesCache</span>.<span class="title">get</span>(<span class="title">eventClass</span>);</span></span><br><span class="line">        <span class="keyword">if</span> (eventTypes == <span class="literal">null</span>) &#123;</span><br><span class="line">            eventTypes = <span class="keyword">new</span> ArrayList&lt;<span class="class"><span class="keyword">Class</span>&lt;?&gt;&gt;();</span></span><br><span class="line">            <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">clazz</span> = <span class="title">eventClass</span>;</span></span><br><span class="line">            <span class="keyword">while</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                eventTypes.add(clazz);</span><br><span class="line">                addInterfaces(eventTypes, clazz.getInterfaces());</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">            eventTypesCache.put(eventClass, eventTypes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> eventTypes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个方法很简单，就是查找eventClass类的所有父类和接口，并将其保存到eventTypesCache中，方便下次使用。<br>我们再回到postSingleEvent方法。不管允不允许事件继承，都会执行postSingleEventForEventType方法post事件。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> boolean <span class="title">postSingleEventForEventType</span>(<span class="params">Object <span class="keyword">event</span>, PostingThreadState postingState, Class&lt;?&gt; eventClass</span>) </span>&#123;</span><br><span class="line">    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</span><br><span class="line">    synchronized (<span class="keyword">this</span>) &#123;</span><br><span class="line">        subscriptions = subscriptionsByEventType.<span class="keyword">get</span>(eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (subscriptions != <span class="keyword">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</span><br><span class="line">            postingState.<span class="keyword">event</span> = <span class="keyword">event</span>;</span><br><span class="line">            postingState.subscription = subscription;</span><br><span class="line">            boolean aborted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                postToSubscription(subscription, <span class="keyword">event</span>, postingState.isMainThread);</span><br><span class="line">                aborted = postingState.canceled;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                postingState.<span class="keyword">event</span> = <span class="keyword">null</span>;</span><br><span class="line">                postingState.subscription = <span class="keyword">null</span>;</span><br><span class="line">                postingState.canceled = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (aborted) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在postSingleEventForEventType方法中，会已eventClass为key从subscriptionsByEventType对象中获取Subscription列表。在上面讲register的时候我们已经看到EventBus在register的时候会将Subscription列表存储在subscriptionsByEventType中。接下来会遍历subscriptions列表然后调用postToSubscription方法进行下一步处理。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span>(<span class="params">Subscription subscription, Object <span class="keyword">event</span>, boolean isMainThread</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> PostThread:</span><br><span class="line">            <span class="comment">// 如果该事件处理函数没有指定线程模型或者线程模型为PostThread</span></span><br><span class="line">            <span class="comment">// 则调用invokeSubscriber在post的线程中执行事件处理函数</span></span><br><span class="line">            invokeSubscriber(subscription, <span class="keyword">event</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MainThread:</span><br><span class="line">            <span class="comment">// 如果该事件处理函数指定的线程模型为MainThread</span></span><br><span class="line">            <span class="comment">// 并且当前post的线程为主线程，则调用invokeSubscriber在当前线程（主线程）中执行事件处理函数</span></span><br><span class="line">            <span class="comment">// 如果post的线程不是主线程，将使用mainThreadPoster.enqueue该事件处理函数添加到主线程的消息队列中</span></span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                invokeSubscriber(subscription, <span class="keyword">event</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mainThreadPoster.enqueue(subscription, <span class="keyword">event</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BackgroundThread:</span><br><span class="line">            <span class="comment">// 如果该事件处理函数指定的线程模型为BackgroundThread</span></span><br><span class="line">            <span class="comment">// 并且当前post的线程为主线程，则调用backgroundPoster.enqueue</span></span><br><span class="line">            <span class="comment">// 如果post的线程不是主线程，则调用invokeSubscriber在当前线程（非主线程）中执行事件处理函数</span></span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">                backgroundPoster.enqueue(subscription, <span class="keyword">event</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                invokeSubscriber(subscription, <span class="keyword">event</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Async:</span><br><span class="line">            <span class="comment">//添加到异步线程队列中</span></span><br><span class="line">            asyncPoster.enqueue(subscription, <span class="keyword">event</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>该方法主要是根据register注册的事件处理函数的线程模型在指定的线程中触发事件处理函数。在上一讲<a href="http://liuling123.com/2016/01/EventBus-explain.html" target="_blank" rel="external">EventBus使用详解</a>中已经讲过EventBus的线程模型相关概念了，不明白的可以回去看看。<br>mainThreadPoster、backgroundPoster和asyncPoster分别是HandlerPoster、BackgroundPoster和AsyncPoster的对象，其中HandlerPoster继承自Handle，BackgroundPoster和AsyncPoster继承自Runnable。<br>我们主要看看HandlerPoster。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainThreadPoster = <span class="keyword">new</span> HandlerPoster(<span class="keyword">this</span>, Looper.getMainLooper(), <span class="number">10</span>);</span><br></pre></td></tr></table></figure></p>
<p>在EventBus的构造函数中，我们看到mainThreadPoster初始化的时候，传入的是Looper.getMainLooper()。所以此Handle是运行在主线程中的。<br>mainThreadPoster.enqueue方法：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enqueue</span>(<span class="params">Subscription subscription, Object <span class="keyword">event</span></span>) </span>&#123;</span><br><span class="line">    PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, <span class="keyword">event</span>);</span><br><span class="line">    synchronized (<span class="keyword">this</span>) &#123;</span><br><span class="line">        queue.enqueue(pendingPost);</span><br><span class="line">        <span class="keyword">if</span> (!handlerActive) &#123;</span><br><span class="line">            handlerActive = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>enqueue方法最终会调用sendMessage方法，所以该Handle的handleMessage方法会被调用。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> rescheduled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> started = SystemClock.uptimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            PendingPost pendingPost = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="comment">// Check again, this time in synchronized</span></span><br><span class="line">                    pendingPost = queue.poll();</span><br><span class="line">                    <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        handlerActive = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            eventBus.invokeSubscriber(pendingPost);</span><br><span class="line">            <span class="keyword">long</span> timeInMethod = SystemClock.uptimeMillis() - started;</span><br><span class="line">            <span class="keyword">if</span> (timeInMethod &gt;= maxMillisInsideHandleMessage) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                rescheduled = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        handlerActive = rescheduled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在该方法中，最终还是会调用eventBus.invokeSubscriber调用事件处理函数。</p>
<p>BackgroundPoster和AsyncPoster继承自Runnable，并且会在enqueue方法中调用eventBus.getExecutorService().execute(this);具体run方法大家可以自己去看源码，最终都会调用eventBus.invokeSubscriber方法。我们看看eventBus.invokeSubscriber方法的源码：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">void</span> invokeSubscriber(PendingPost pendingPost) &#123;</span><br><span class="line">    Object event = pendingPost.event<span class="comment">;</span></span><br><span class="line">    <span class="keyword">Subscription </span><span class="keyword">subscription </span>= pendingPost.<span class="keyword">subscription;</span><br><span class="line"></span>    PendingPost.releasePendingPost(pendingPost)<span class="comment">;</span></span><br><span class="line">    <span class="preprocessor">if</span> (<span class="keyword">subscription.active) </span>&#123;</span><br><span class="line">        invokeSubscriber(<span class="keyword">subscription, </span>event)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>该方法会调用invokeSubscriber方法进一步处理：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">invokeSubscriber</span>(<span class="params">Subscription subscription, Object <span class="keyword">event</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 通过反射调用事件处理函数</span></span><br><span class="line">        subscription.subscriberMethod.method.invoke(subscription.subscriber, <span class="keyword">event</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        handleSubscriberException(subscription, <span class="keyword">event</span>, e.getCause());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>该方法最终会通过反射来调用事件处理函数。至此，整个post过程分析完了。<br>总结一下整个post过程，大致分为3步：  </p>
<ol>
<li>将事件对象添加到事件队列eventQueue中等待处理  </li>
<li>遍历eventQueue队列中的事件对象并调用postSingleEvent处理每个事件  </li>
<li>找出订阅过该事件的所有事件处理函数，并在相应的线程中执行该事件处理函数 </li>
</ol>
<h3 id="u53D6_u6D88_u4E8B_u4EF6_u6CE8_u518C"><a href="#u53D6_u6D88_u4E8B_u4EF6_u6CE8_u518C" class="headerlink" title="取消事件注册"></a>取消事件注册</h3><p>上面已经分析了EventBus的register和post过程，这两个过程是EventBus的核心。不需要订阅事件时需要取消事件注册：  </p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Unregisters the given subscriber from all event classes. */</span></span><br><span class="line"><span class="label">public</span> synchronized void unregister(Object <span class="keyword">subscriber) </span>&#123;</span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; <span class="keyword">subscribedTypes </span>= typesBySubscriber.get(<span class="keyword">subscriber);</span><br><span class="line"></span>    <span class="preprocessor">if</span> (<span class="keyword">subscribedTypes </span>!= null) &#123;</span><br><span class="line">        for (Class&lt;?&gt; eventType : <span class="keyword">subscribedTypes) </span>&#123;</span><br><span class="line">            unubscribeByEventType(<span class="keyword">subscriber, </span>eventType)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        typesBySubscriber.remove(<span class="keyword">subscriber);</span><br><span class="line"></span>    &#125; <span class="preprocessor">else</span> &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"Subscriber to unregister was not registered before: "</span> + <span class="keyword">subscriber.getClass());</span><br><span class="line"></span>    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>取消事件注册很简单，只是将register过程注册到EventBus的事件处理函数移除掉。</p>
<p>到这里，EventBus源码我们已经分析完了，如有不对的地方还望指点。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>前面一篇文章讲解了EventBus的使用，但是作为开发人员，不能只停留在仅仅会用的层面上，我们还需要弄清楚它的内部实现原理。所以本篇博文将分析EventBus的源码，看看究竟它是如何实现“发布/订阅”功能的。</p>
<p>相关文章<br><a href="http://liuling123.com/2016/01/EventBus-explain.html">EventBus使用详解</a><br><a href="http://liuling123.com/2016/01/EventBus-source.html">EventBus源码解析</a></p>
</blockquote>
<h3 id="u4E8B_u4EF6_u6CE8_u518C"><a href="#u4E8B_u4EF6_u6CE8_u518C" class="headerlink" title="事件注册"></a>事件注册</h3><p>根据前一讲<a href="http://liuling123.com/2016/01/EventBus-explain.html">EventBus使用详解</a>我们已经知道EventBus使用首先是需要注册的，注册事件的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().<span class="keyword">register</span>(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="EventBus" scheme="http://www.liuling123.com/tags/EventBus/"/>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EventBus使用详解]]></title>
    <link href="http://www.liuling123.com/2016/01/EventBus-explain.html"/>
    <id>http://www.liuling123.com/2016/01/EventBus-explain.html</id>
    <published>2016-01-09T04:42:00.000Z</published>
    <updated>2016-01-12T13:33:02.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>前言：EventBus出来已经有一段时间了，github上面也有很多开源项目中使用了EventBus。所以抽空学习顺便整理了一下。目前EventBus最新版本是3.0，所以本文是基于EventBus3.0的。</p>
<p>相关文章<br><a href="http://liuling123.com/2016/01/EventBus-explain.html" target="_blank" rel="external">EventBus使用详解</a><br><a href="http://liuling123.com/2016/01/EventBus-source.html" target="_blank" rel="external">EventBus源码解析</a></p>
</blockquote>
<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a>是针一款对Android的发布/订阅事件总线。它可以让我们很轻松的实现在Android各个组件之间传递消息，并且代码的可读性更好，耦合度更低。</p>
<a id="more"></a>
<h4 id="u5982_u4F55_u4F7F_u7528"><a href="#u5982_u4F55_u4F7F_u7528" class="headerlink" title="如何使用"></a>如何使用</h4><p>(1)首先需要定义一个消息类，该类可以不继承任何基类也不需要实现任何接口。如：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageEvent</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>(2)在需要订阅事件的地方注册事件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().<span class="keyword">register</span>(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p>
<p>(3)产生事件，即发送消息<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">EventBus</span><span class="class">.getDefault</span>()<span class="class">.post</span>(<span class="tag">messageEvent</span>);</span><br></pre></td></tr></table></figure></p>
<p>(4)处理消息<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Subscribe</span>(threadMode = ThreadMode.PostThread)</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">XXX</span><span class="params">(MessageEvent messageEvent)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在3.0之前，EventBus还没有使用注解方式。消息处理的方法也只能限定于onEvent、onEventMainThread、onEventBackgroundThread和onEventAsync，分别代表四种线程模型。而在3.0之后，消息处理的方法可以随便取名，但是需要添加一个注解@Subscribe，并且要指定线程模型（默认为PostThread），四种线程模型，下面会讲到。<br>注意，事件处理函数的访问权限必须为public，否则会报异常。</p>
<p>(5)取消消息订阅<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">EventBus</span><span class="class">.getDefault</span>()<span class="class">.unregister</span>(<span class="tag">this</span>);</span><br></pre></td></tr></table></figure></p>
<h4 id="u6709_u4F55_u4F18_u70B9"><a href="#u6709_u4F55_u4F18_u70B9" class="headerlink" title="有何优点"></a>有何优点</h4><p>采用消息发布/订阅的一个很大的优点就是代码的简洁性，并且能够有效地降低消息发布者和订阅者之间的耦合度。<br>举个例子，比如有两个界面，ActivityA和ActivityB，从ActivityA界面跳转到ActivityB界面后，ActivityB要给ActivityA发送一个消息，ActivityA收到消息后在界面上显示出来。我们最先想到的方法就是使用广播，使用广播实现此需求的代码如下：<br>首先需要在ActivityA中定义一个广播接收器：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MessageBroadcastReceiver</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">BroadcastReceiver</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    public void onReceive(<span class="type">Context</span> context, <span class="type">Intent</span> intent) &#123;</span><br><span class="line">        mMessageView.setText(<span class="string">"Message from SecondActivity:"</span> + intent.getStringExtra(<span class="string">"message"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>还需要在onCreate()方法中注册广播接收器：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    <span class="comment">//注册事件</span></span><br><span class="line">    EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//注册广播</span></span><br><span class="line">    IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(<span class="string">"message_broadcast"</span>);</span><br><span class="line">    mBroadcastReceiver = <span class="keyword">new</span> MessageBroadcastReceiver();</span><br><span class="line">    registerReceiver(mBroadcastReceiver, intentFilter);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在onDestory()方法中取消注册广播接收器：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//取消广播注册</span></span><br><span class="line">    unregisterReceiver(mBroadcastReceiver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后我们需要在ActivityB界面中发送广播消息：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.send_broadcast).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        String message = mMessageET.getText().toString();</span><br><span class="line">        <span class="keyword">if</span>(TextUtils.isEmpty(message)) &#123;</span><br><span class="line">            message = <span class="string">"defaule message"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.setAction(<span class="string">"message_broadcast"</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"message"</span>, message);</span><br><span class="line">        sendBroadcast(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>看着上面的实现代码，感觉也没什么不妥，挺好的！下面对比看下使用EventBus如何实现。<br>根据文章最前面所讲的EventBus使用步骤，首先我们需要定义一个消息事件类：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageEvent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageEvent</span>(<span class="params">String message</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span>(<span class="params">String message</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在ActivityA界面中我们首先需要注册订阅事件：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    <span class="comment">//注册事件</span></span><br><span class="line">    EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在onDestory()方法中取消订阅：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    <span class="comment">//取消事件注册</span></span><br><span class="line">    EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然还要定义一个消息处理的方法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">Subscribe(threadMode</span> = ThreadMode.MainThread)</span><br><span class="line">public void <span class="function">onShowMessageEvent</span>(MessageEvent messageEvent) </span>&#123;</span><br><span class="line">    <span class="tag">mMessageView</span><span class="class">.setText</span>("<span class="tag">Message</span> <span class="tag">from</span> <span class="tag">SecondActivity</span><span class="pseudo">:"</span> + <span class="tag">messageEvent</span><span class="class">.getMessage</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>至此，消息订阅者我们已经定义好了，我们还需要在ActivityB中发布消息：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.send).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        String message = mMessageET.getText().toString();</span><br><span class="line">        <span class="keyword">if</span>(TextUtils.isEmpty(message)) &#123;</span><br><span class="line">            message = <span class="string">"defaule message"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        EventBus.getDefault().post(<span class="keyword">new</span> MessageEvent(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>对比代码一看，有人会说了，这尼玛有什么区别嘛！说好的简洁呢？哥们，别着急嘛！我这里只是举了个简单的例子，仅仅从该例子来看，EventBus的优势没有体现出来。现在我将需求稍微改一下，ActivityA收到消息后，需要从网络服务器获取数据并将数据展示出来。如果使用广播，ActivityA中广播接收器代码应该这么写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//从服务器上获取数据</span></span><br><span class="line">                ......</span><br><span class="line">                runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="comment">//将获取的数据展示在界面上</span></span><br><span class="line">                        ......</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>看到这段代码，不知道你何感想，反正我是看着很不爽，嵌套层次太多，完全违反了Clean Code的原则。那使用EventBus来实现又是什么样呢？我们看一下。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Subscribe</span>(threadMode = ThreadMode.BackgroundThread)</span><br><span class="line">public void <span class="function">onGetDataEvent</span>(MessageEvent messageEvent) &#123;</span><br><span class="line">    <span class="comment">//从服务器上获取数据</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="tag">EventBus</span><span class="class">.getDefault</span>()<span class="class">.post</span>(new <span class="function">ShowMessageEvent</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Subscribe</span>(threadMode = ThreadMode.MainThread)</span><br><span class="line">public void <span class="function">onShowDataEvent</span>(ShowMessageEvent showMessageEvent) &#123;</span><br><span class="line">    <span class="comment">//将获取的数据展示在界面上</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对比一下以上两段代码就能很明显的感觉到EventBus的优势，代码简洁、层次清晰，大大提高了代码的可读性和可维护性。我这只是简单的加了一个小需求而已，随着业务越来越复杂，使用EventBus的优势愈加明显。</p>
<h3 id="u5E38_u7528API_u4ECB_u7ECD"><a href="#u5E38_u7528API_u4ECB_u7ECD" class="headerlink" title="常用API介绍"></a>常用API介绍</h3><h4 id="u7EBF_u7A0B_u6A21_u578B"><a href="#u7EBF_u7A0B_u6A21_u578B" class="headerlink" title="线程模型"></a>线程模型</h4><p>在EventBus的事件处理函数中需要指定线程模型，即指定事件处理函数运行所在的想线程。在上面我们已经接触到了EventBus的四种线程模型。那他们有什么区别呢？<br>在EventBus中的观察者通常有四种线程模型，分别是PostThread（默认）、MainThread、BackgroundThread与Async。</p>
<ul>
<li>PostThread：如果使用事件处理函数指定了线程模型为PostThread，那么该事件在哪个线程发布出来的，事件处理函数就会在这个线程中运行，也就是说发布事件和接收事件在同一个线程。在线程模型为PostThread的事件处理函数中尽量避免执行耗时操作，因为它会阻塞事件的传递，甚至有可能会引起ANR。</li>
<li>MainThread：如果使用事件处理函数指定了线程模型为MainThread，那么不论事件是在哪个线程中发布出来的，该事件处理函数都会在UI线程中执行。该方法可以用来更新UI，但是不能处理耗时操作。</li>
<li>BackgroundThread：如果使用事件处理函数指定了线程模型为BackgroundThread，那么如果事件是在UI线程中发布出来的，那么该事件处理函数就会在新的线程中运行，如果事件本来就是子线程中发布出来的，那么该事件处理函数直接在发布事件的线程中执行。在此事件处理函数中禁止进行UI更新操作。</li>
<li>Async：如果使用事件处理函数指定了线程模型为Async，那么无论事件在哪个线程发布，该事件处理函数都会在新建的子线程中执行。同样，此事件处理函数中禁止进行UI更新操作。</li>
</ul>
<p>为了验证以上四个方法，我写了个小例子。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">Subscribe(threadMode</span> = ThreadMode.PostThread)</span><br><span class="line">public void <span class="function">onMessageEventPostThread</span>(MessageEvent messageEvent) </span>&#123;</span><br><span class="line">    <span class="tag">Log</span><span class="class">.e</span>("<span class="tag">PostThread</span>", <span class="tag">Thread</span><span class="class">.currentThread</span>()<span class="class">.getName</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">Subscribe(threadMode</span> = ThreadMode.MainThread)</span><br><span class="line">public void <span class="function">onMessageEventMainThread</span>(MessageEvent messageEvent) </span>&#123;</span><br><span class="line">    <span class="tag">Log</span><span class="class">.e</span>("<span class="tag">MainThread</span>", <span class="tag">Thread</span><span class="class">.currentThread</span>()<span class="class">.getName</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">Subscribe(threadMode</span> = ThreadMode.BackgroundThread)</span><br><span class="line">public void <span class="function">onMessageEventBackgroundThread</span>(MessageEvent messageEvent) </span>&#123;</span><br><span class="line">    <span class="tag">Log</span><span class="class">.e</span>("<span class="tag">BackgroundThread</span>", <span class="tag">Thread</span><span class="class">.currentThread</span>()<span class="class">.getName</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="at_rule">@<span class="keyword">Subscribe(threadMode</span> = ThreadMode.Async)</span><br><span class="line">public void <span class="function">onMessageEventAsync</span>(MessageEvent messageEvent) </span>&#123;</span><br><span class="line">    <span class="tag">Log</span><span class="class">.e</span>("<span class="tag">Async</span>", <span class="tag">Thread</span><span class="class">.currentThread</span>()<span class="class">.getName</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>分别使用上面四个方法订阅同一事件，打印他们运行所在的线程。首先我们在UI线程中发布一条MessageEvent的消息，看下日志打印结果是什么。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.send).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            Log.e(<span class="string">"postEvent"</span>, Thread.currentThread().getName());</span><br><span class="line">            EventBus.getDefault().post(<span class="keyword">new</span> MessageEvent());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>打印结果如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2689</span>-<span class="number">2689</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/postEvent﹕ main</span><br><span class="line"><span class="number">2689</span>-<span class="number">2689</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/PostThread﹕ main</span><br><span class="line"><span class="number">2689</span>-<span class="number">3064</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/Async﹕ pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line"><span class="number">2689</span>-<span class="number">2689</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/MainThread﹕ main</span><br><span class="line"><span class="number">2689</span>-<span class="number">3065</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/BackgroundThread﹕ pool-<span class="number">1</span>-thread-<span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>从日志打印结果可以看出，如果在UI线程中发布事件，则线程模型为PostThread的事件处理函数也执行在UI线程，与发布事件的线程一致。线程模型为Async的事件处理函数执行在名字叫做pool-1-thread-1的新的线程中。而MainThread的事件处理函数执行在UI线程，BackgroundThread的时间处理函数执行在名字叫做pool-1-thread-2的新的线程中。</p>
<p>我们再看看在子线程中发布一条MessageEvent的消息时，会有什么样的结果。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.send).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Log.e(<span class="string">"postEvent"</span>, Thread.currentThread().getName());</span><br><span class="line">                    EventBus.getDefault().post(<span class="keyword">new</span> MessageEvent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>打印结果如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3468</span>-<span class="number">3945</span>/com.lling.eventbusdemo E/postEvent﹕ Thread-<span class="number">125</span></span><br><span class="line"><span class="number">3468</span>-<span class="number">3945</span>/com.lling.eventbusdemo E/PostThread﹕ Thread-<span class="number">125</span></span><br><span class="line"><span class="number">3468</span>-<span class="number">3945</span>/com.lling.eventbusdemo E/BackgroundThread﹕ Thread-<span class="number">125</span></span><br><span class="line"><span class="number">3468</span>-<span class="number">3946</span>/com.lling.eventbusdemo E/Async﹕ pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line"><span class="number">3468</span>-<span class="number">3468</span>/com.lling.eventbusdemo E/MainThread﹕ main</span><br></pre></td></tr></table></figure></p>
<p>从日志打印结果可以看出，如果在子线程中发布事件，则线程模型为PostThread的事件处理函数也执行在子线程，与发布事件的线程一致（都是Thread-125）。BackgroundThread事件模型也与发布事件在同一线程执行。Async则在一个名叫pool-1-thread-1的新线程中执行。MainThread还是在UI线程中执行。</p>
<p>上面一个例子充分验证了指定不同线程模型的事件处理方法执行所在的线程。</p>
<h4 id="u9ECF_u6027_u4E8B_u4EF6"><a href="#u9ECF_u6027_u4E8B_u4EF6" class="headerlink" title="黏性事件"></a>黏性事件</h4><p>除了上面讲的普通事件外，EventBus还支持发送黏性事件。何为黏性事件呢？简单讲，就是在发送事件之后再订阅该事件也能收到该事件，跟黏性广播类似。具体用法如下：</p>
<p>订阅黏性事件：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">EventBus</span><span class="class">.getDefault</span>()<span class="class">.register</span>(<span class="tag">StickyModeActivity</span><span class="class">.this</span>);</span><br></pre></td></tr></table></figure></p>
<p>黏性事件处理函数：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Subscribe</span>(sticky = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">XXX</span><span class="params">(MessageEvent messageEvent)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>发送黏性事件：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().postSticky(<span class="keyword">new</span> MessageEvent(<span class="string">"test"</span>));</span><br></pre></td></tr></table></figure></p>
<p>处理消息事件以及取消订阅和上面方式相同。</p>
<p>看个简单的黏性事件的例子，为了简单起见我这里就在一个Activity里演示了。</p>
<p>Activity代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StickyModeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_sticky_mode);</span><br><span class="line">        findViewById(R.id.post).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                EventBus.getDefault().postSticky(<span class="keyword">new</span> MessageEvent(<span class="string">"test"</span> + index++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        findViewById(R.id.regist).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                EventBus.getDefault().registerSticky(StickyModeActivity.<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.unregist).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                EventBus.getDefault().unregister(StickyModeActivity.<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Subscribe</span>(threadMode = ThreadMode.PostThread, sticky = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessageEventPostThread</span><span class="params">(MessageEvent messageEvent)</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">"PostThread"</span>, messageEvent.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Subscribe</span>(threadMode = ThreadMode.MainThread, sticky = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessageEventMainThread</span><span class="params">(MessageEvent messageEvent)</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">"MainThread"</span>, messageEvent.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Subscribe</span>(threadMode = ThreadMode.BackgroundThread, sticky = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessageEventBackgroundThread</span><span class="params">(MessageEvent messageEvent)</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">"BackgroundThread"</span>, messageEvent.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Subscribe</span>(threadMode = ThreadMode.Async, sticky = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessageEventAsync</span><span class="params">(MessageEvent messageEvent)</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">"Async"</span>, messageEvent.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>布局代码activity_sticky_mode.xml：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span> android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span> android:paddingLeft=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    android:paddingRight=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    android:paddingTop=<span class="string">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    android:paddingBottom=<span class="string">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    android:orientation=<span class="string">"vertical"</span></span><br><span class="line">    tools:context=<span class="string">"com.lling.eventbusdemo.StickyModeActivity"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:<span class="property">id</span>=<span class="string">"@+id/post"</span></span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="type">text</span>=<span class="string">"Post"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:<span class="property">id</span>=<span class="string">"@+id/regist"</span></span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="type">text</span>=<span class="string">"Regist"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:<span class="property">id</span>=<span class="string">"@+id/unregist"</span></span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="type">text</span>=<span class="string">"UnRegist"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>
<p>代码很简单，界面上三个按钮，一个用来发送黏性事件，一个用来订阅事件，还有一个用来取消订阅的。首先在未订阅的情况下点击发送按钮发送一个黏性事件，然后点击订阅，会看到日志打印结果如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15246</span>-<span class="number">15246</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/PostThread﹕ test0</span><br><span class="line"><span class="number">15246</span>-<span class="number">15391</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/Async﹕ test0</span><br><span class="line"><span class="number">15246</span>-<span class="number">15246</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/MainThread﹕ test0</span><br><span class="line"><span class="number">15246</span>-<span class="number">15393</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/BackgroundThread﹕ test0</span><br></pre></td></tr></table></figure></p>
<p>这就是粘性事件，能够收到订阅之前发送的消息。但是它只能收到最新的一次消息，比如说在未订阅之前已经发送了多条黏性消息了，然后再订阅只能收到最近的一条消息。这个我们可以验证一下，我们连续点击5次POST按钮发送5条黏性事件，然后再点击REGIST按钮订阅，打印结果如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6980</span>-<span class="number">6980</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/PostThread﹕ test4</span><br><span class="line"><span class="number">6980</span>-<span class="number">6980</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/MainThread﹕ test4</span><br><span class="line"><span class="number">6980</span>-<span class="number">7049</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/Async﹕ test4</span><br><span class="line"><span class="number">6980</span>-<span class="number">7048</span>/com<span class="class">.lling</span><span class="class">.eventbusdemo</span> E/BackgroundThread﹕ test4</span><br></pre></td></tr></table></figure></p>
<p>由打印结果可以看出，确实是只收到最近的一条黏性事件。</p>
<p>好了，EventBus的使用暂时分析到这里，例子代码<a href="https://github.com/liuling07/EventBusDemo" target="_blank" rel="external">从这里获取</a>。下一讲将讲解<a href="http://liuling123.com/2016/01/EventBus-source.html" target="_blank" rel="external">EventBus源码解析</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>前言：EventBus出来已经有一段时间了，github上面也有很多开源项目中使用了EventBus。所以抽空学习顺便整理了一下。目前EventBus最新版本是3.0，所以本文是基于EventBus3.0的。</p>
<p>相关文章<br><a href="http://liuling123.com/2016/01/EventBus-explain.html">EventBus使用详解</a><br><a href="http://liuling123.com/2016/01/EventBus-source.html">EventBus源码解析</a></p>
</blockquote>
<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p><a href="https://github.com/greenrobot/EventBus">EventBus</a>是针一款对Android的发布/订阅事件总线。它可以让我们很轻松的实现在Android各个组件之间传递消息，并且代码的可读性更好，耦合度更低。</p>]]>
    
    </summary>
    
      <category term="EventBus" scheme="http://www.liuling123.com/tags/EventBus/"/>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【译文】AppBarLayout的越界滚动行为]]></title>
    <link href="http://www.liuling123.com/2016/01/overscroll-appBarLayout-behavior.html"/>
    <id>http://www.liuling123.com/2016/01/overscroll-appBarLayout-behavior.html</id>
    <published>2016-01-03T14:03:00.000Z</published>
    <updated>2016-01-03T14:08:49.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/@nullthemall/overscroll-appbarlayout-behavior-e58f1ee2807#.gtmxsk7sw" target="_blank" rel="external">Overscroll AppBarLayout Behavior</a></li>
<li>原文作者 : <a href="https://medium.com/@nullthemall" target="_blank" rel="external">Nikola Despotoski</a></li>
<li>译文出自 : <a href="http://www.devtf.cn" target="_blank" rel="external">开发技术前线 www.devtf.cn。未经允许，不得转载!</a></li>
<li>译者 : <a href="https://github.com/liuling07" target="_blank" rel="external">liuling07</a> </li>
<li>校对者: <a href="https://github.com/desmond1121" target="_blank" rel="external">desmond1121</a></li>
<li>状态 :  完成 </li>
</ul>
</blockquote>
<p>很不幸，Youtube音乐应用在我们国家不可使用，我尝试着通过各种盗版网站来获取该应用，但我仍然无法看到在这个应用上发生了什么。感谢这位<a href="https://www.reddit.com/user/IanSan5653" target="_blank" rel="external">redditor</a>，在我的请求下，他在<a href="https://www.reddit.com/r/materialdesign" target="_blank" rel="external">/r/materialdesign</a>打开了一个<a href="https://www.reddit.com/r/MaterialDesign/comments/3slct5/youtube_music_has_tons_of_animations_and/" target="_blank" rel="external">thread</a>并且发表一段录制的视频，我才有机会看到这个行为。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*lEMS5RiBLGk3Q72FhXBwxA.gif" alt="Youtube视频app的真实截图，可能的行为"></p>
<a id="more"></a>
<p>根据我所看到的，我首先想到的就是专辑封面是放到一个AppBarLayout里面，并且在滚动区域拖到边界的时候尺寸会发生变化。让我们假定这个猜想是正确的并且用“Behavior”这个术语表示它。依鄙人之见，如果我的猜想是正确的，谷歌应该会在Material Design文档的<a href="https://www.google.com/design/spec/patterns/scrolling-techniques.html" target="_blank" rel="external">滚动</a>部分提供一个越界滚动的使用说明。</p>
<p>我们的目标就是保证AppBarLayout.Behavior的完整性，在此基础上再创建一个扩展的行为。因此：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OverscrollScalingViewAppBarLayoutBehavior</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AppBarLayout</span>.<span class="title">ScrollingViewBehavior</span></span></span><br></pre></td></tr></table></figure>
<p>因为这是默认的AppBarLayout.Behavior，所以建议只有在依赖视图是AppBarLayout的时候起作用。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> AppBarLayout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来，我们需要获取想要在拖到边界时要改变尺寸的视图的一个实例。最好的方法就是在onLayoutChild()方法中获取：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> onLayoutChild(CoordinatorLayout <span class="keyword">parent</span> <span class="attribute">...</span><span class="built_in">.</span>) &#123;</span><br><span class="line">    <span class="built_in">boolean</span> superLayout = super<span class="built_in">.</span>onLayoutChild(<span class="keyword">parent</span>, abl, layoutDirection);</span><br><span class="line">    <span class="keyword">if</span> (mTargetScalingView == <span class="built_in">null</span>) &#123;</span><br><span class="line">        mTargetScalingView = <span class="keyword">parent</span><span class="built_in">.</span>findViewByTag(<span class="built_in">TAG</span>);</span><br><span class="line">        <span class="keyword">if</span>(mTargetScalingView != <span class="built_in">null</span>)&#123;</span><br><span class="line">             mScaleImpl<span class="built_in">.</span>obtainInitialValues();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> superLayout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而且我们需要保证只有在垂直滚动的时候起作用：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout,... <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nestedScrollAxes == View.SCROLL_AXIS_VERTICAL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们先前没有在程序中显示设置，会设置ViewScaler为默认的Scaler。</p>
<p>在内容滚动的瞬间，真正重要的问题就有头绪了。CoordinatorLayout.Behavior提供了一个onNestedScroll()方法，当滚动进行的时候这个方法会被调用，并且当内容滚动到边界的时候也会调用。最后两个参数dyUnconsumed和dxUnconsumed提供了未被该行为的目标视图填满的像素值。</p>
<p>这个方法对我们实现尺寸改变来说太重要了。所以我列出了哪些情况需要改变尺寸，哪些情况不需要：</p>
<h4 id="u9700_u8981_u6539_u53D8_u5C3A_u5BF8"><a href="#u9700_u8981_u6539_u53D8_u5C3A_u5BF8" class="headerlink" title="需要改变尺寸"></a>需要改变尺寸</h4><ol>
<li>存在未填满的像素，如dyUnconsumed小于0  </li>
<li>AppBarLayout是展开的，getTopAndBottomOffset() &gt;= mScaleImpl.getInitialParentBottom()</li>
</ol>
<h4 id="u4E0D_u9700_u8981_u6539_u53D8_u5C3A_u5BF8"><a href="#u4E0D_u9700_u8981_u6539_u53D8_u5C3A_u5BF8" class="headerlink" title="不需要改变尺寸"></a>不需要改变尺寸</h4><ol>
<li>AppBarLayout中没有子视图可以改变尺寸</li>
<li>有填充的像素，如dyConsumed不等于0</li>
</ol>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(CoordinatorLayout ... <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mTargetScalingView == <span class="keyword">null</span> || dyConsumed != <span class="number">0</span>) &#123;</span><br><span class="line">        mScaleImpl.cancelAnimations();</span><br><span class="line">        <span class="keyword">super</span>.onNestedScroll(coordinatorLayout, child, <span class="keyword">target</span>, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dyUnconsumed &lt; <span class="number">0</span> &amp;&amp; getTopAndBottomOffset() &gt;= mScaleImpl.getInitialParentBottom()) &#123;</span><br><span class="line">        <span class="keyword">int</span> absDyUnconsumed = Math.abs(dyUnconsumed);</span><br><span class="line">        mTotalDyUnconsumed += absDyUnconsumed;</span><br><span class="line">        mTotalDyUnconsumed = Math.min(mTotalDyUnconsumed, mTotalTargetDyUnconsumed);</span><br><span class="line">        mScaleImpl.updateViewScale();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mTotalDyUnconsumed = <span class="number">0</span>;</span><br><span class="line">        mScaleImpl.setShouldRestore(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (dyConsumed != <span class="number">0</span>) &#123;</span><br><span class="line">            mScaleImpl.cancelAnimations();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.onNestedScroll(coordinatorLayout, .... dxUnconsumed, dyUnconsumed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当嵌套的overscroll停止的时候，我们需要将视图的边界和大小重置到它们的原始值。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onStopNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View <span class="keyword">target</span>)</span> </span>&#123;</span><br><span class="line">    mScaleImpl.retractScale();</span><br><span class="line">    <span class="keyword">super</span>.onStopNestedScroll(coordinatorLayout, child, <span class="keyword">target</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="ViewScaler"><a href="#ViewScaler" class="headerlink" title="ViewScaler"></a>ViewScaler</h1><p>这个类实现了AppBarLayout应该如何改变它的底部以及视图应该如何改变尺寸的逻辑。大多数行为都依赖累积的未填充的像素。我们可以为最大累积值设置一个约束值，这样可以很容的找到要如何改变AppBarLayout底部和改变视图的尺寸。ParentScaler是ViewScaler的父类，它能让AppBarLayout近乎平滑的改变尺寸。我就不在这里贴大量代码了，如果你有兴趣，<a href="https://gist.github.com/NikolaDespotoski/7d6a019e5aafe60ebade" target="_blank" rel="external">可以从这里获取代码</a>。</p>
<h4 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h4><p>大神们，这里有个MatrixScaler类，我没有时间去完成它。如果想要改变尺寸的视图是ImageView，并且设置了ScaleType为MATRIX，这个类将可以用使用矩阵的方式来改变图像的尺寸。  </p>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="https://youtu.be/2udXoC8AXSM" target="_blank" rel="external">Demo演示地址</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/@nullthemall/overscroll-appbarlayout-behavior-e58f1ee2807#.gtmxsk7sw">Overscroll AppBarLayout Behavior</a></li>
<li>原文作者 : <a href="https://medium.com/@nullthemall">Nikola Despotoski</a></li>
<li>译文出自 : <a href="http://www.devtf.cn">开发技术前线 www.devtf.cn。未经允许，不得转载!</a></li>
<li>译者 : <a href="https://github.com/liuling07">liuling07</a> </li>
<li>校对者: <a href="https://github.com/desmond1121">desmond1121</a></li>
<li>状态 :  完成 </li>
</ul>
</blockquote>
<p>很不幸，Youtube音乐应用在我们国家不可使用，我尝试着通过各种盗版网站来获取该应用，但我仍然无法看到在这个应用上发生了什么。感谢这位<a href="https://www.reddit.com/user/IanSan5653">redditor</a>，在我的请求下，他在<a href="https://www.reddit.com/r/materialdesign">/r/materialdesign</a>打开了一个<a href="https://www.reddit.com/r/MaterialDesign/comments/3slct5/youtube_music_has_tons_of_animations_and/">thread</a>并且发表一段录制的视频，我才有机会看到这个行为。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*lEMS5RiBLGk3Q72FhXBwxA.gif" alt="Youtube视频app的真实截图，可能的行为"></p>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="译文" scheme="http://www.liuling123.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Say bye to my 2015]]></title>
    <link href="http://www.liuling123.com/2015/12/Say-bye-to-my-2015.html"/>
    <id>http://www.liuling123.com/2015/12/Say-bye-to-my-2015.html</id>
    <published>2015-12-25T09:25:10.000Z</published>
    <updated>2016-01-03T06:52:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6280_u672F_u6210_u957F"><a href="#u6280_u672F_u6210_u957F" class="headerlink" title="技术成长"></a><strong>技术成长</strong></h2><p>14年毕业后开始接触Android，到目前为止从事Android开发差不多一年半的时间，15年算是自己技术成长最大的一年吧。<br>上半年自己大部分精力都耗在云老师项目上，自己既要开发同时兼任项目负责人（这里要感谢老大认可，愿意给新人机会）。前前后后经历了四五次迭代，最终在3个Android新人（确切来说是两个）的努力下完成并上线了。遗憾的是项目不受公司重视，并且部门领导担心影响实体产品的销售而不愿推广。最后随着部门的解散该项目也夭折了，这当时对我来说是很令人伤心的事了。虽然项目夭折了，但是自己从中收获了不少。不仅是技术水平的提升，还收获了项目管理的经验。 </p>
<p>部门解散前，有一个多月时间是比较闲的。利用这段时间自己研究了Android Framework层的源码，搭建了自己的<a href="http://www.liuling123.com/">个人技术博客</a>并且接触了开源社区github。贡献了图片选择库<a href="https://github.com/liuling07/PhotoPicker" target="_blank" rel="external">PhotoPicker</a>。<br>部门解散后，到新部门做cocos2dx游戏开发，学习了C++以及cocos2dx引擎。利用下班在家的时间学习了Material Design等知识，并且开发了基于Material Design和MVP模式的新闻客户端<a href="https://github.com/liuling07/SimpleNews" target="_blank" rel="external">SimpleNews</a>。</p>
<a id="more"></a>
<h2 id="u8BFB_u4E66"><a href="#u8BFB_u4E66" class="headerlink" title="读书"></a><strong>读书</strong></h2><p>今年看的书不多，看完的有《代码整洁之道》、《极客与团队》、《微管理》、《拆掉思维里的墙》  </p>
<p>未看完的有《从0到1》、《C++ Primer》、《cocos2dX高级开发教程》。</p>
<h2 id="u57F9_u8BAD"><a href="#u57F9_u8BAD" class="headerlink" title="培训"></a><strong>培训</strong></h2><p>今年公司组织两场培训，刘捷老师的《Clean Code》以及MSUP软件工作坊培训。两场培训下来收获都挺大的，尤其是刘捷老师的《Clean Code》课程，培训完之后立马现学现用，为小组制定Android编码规范并且实施代码review。</p>
<h2 id="u953B_u70BC"><a href="#u953B_u70BC" class="headerlink" title="锻炼"></a><strong>锻炼</strong></h2><p>最为程序员，长期坐在电脑前作业，如果没有锻炼的习惯，恐怕身体很难扛得住。自己不爱跑步，对健身房也没兴趣，只喜欢约上几个好友在球场挥洒汗水。</p>
<p>因为鼻骨被撞骨折，14年下半年一直没有碰球，15年春节过后伤好又开始坚持打球了。基本上每周三晚上都和同事在篮球公园包场打。后来部门解散，同事回总部的回总部，离职的离职，最后篮球活动也取消了。之后就每周日早上和同学在宝体打，一直坚持到现在。</p>
<h2 id="15_u5E74_u5927_u4E8B_u8BB0"><a href="#15_u5E74_u5927_u4E8B_u8BB0" class="headerlink" title="15年大事记"></a><strong>15年大事记</strong></h2><p>第一次去女朋友家里，并商讨婚嫁事宜，这算是我人生中一件大事了吧。  </p>
<p>下了血本买了台中配Mac pro。对于生产工具一定要买所能承受范围内最好的。  </p>
<p>搭建自己的<a href="http://www.liuling123.com/">个人技术博客</a>，并且开始接触开源社区，并在github和微博上关注了很多业界大牛。</p>
<h2 id="16_u5E74_u5C55_u671B"><a href="#16_u5E74_u5C55_u671B" class="headerlink" title="16年展望"></a><strong>16年展望</strong></h2><p>首先得找一份自己满意的Android研发工作，因为自己对游戏开发（儿童游戏，略感弱智）没有太大兴趣；  </p>
<p>努力提升自己的技术水平，向业界大牛靠拢；  </p>
<p>多向github贡献代码，经常更新自己的技术博客；  </p>
<p>看完Simple哥送的《Android软件安全与逆向分析》（感谢Simple哥 <a href="https://github.com/bboyfeiyu" target="_blank" rel="external">@bboyfeiyu</a> ）,看完徐医生的《Android群英传》； </p>
<p>和女朋友订婚；</p>
<p><a href="https://github.com/winter-fall/Bye2015Hi2016/issues/30" target="_blank" rel="external">https://github.com/winter-fall/Bye2015Hi2016/issues/30</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6280_u672F_u6210_u957F"><a href="#u6280_u672F_u6210_u957F" class="headerlink" title="技术成长"></a><strong>技术成长</strong></h2><p>14年毕业后开始接触Android，到目前为止从事Android开发差不多一年半的时间，15年算是自己技术成长最大的一年吧。<br>上半年自己大部分精力都耗在云老师项目上，自己既要开发同时兼任项目负责人（这里要感谢老大认可，愿意给新人机会）。前前后后经历了四五次迭代，最终在3个Android新人（确切来说是两个）的努力下完成并上线了。遗憾的是项目不受公司重视，并且部门领导担心影响实体产品的销售而不愿推广。最后随着部门的解散该项目也夭折了，这当时对我来说是很令人伤心的事了。虽然项目夭折了，但是自己从中收获了不少。不仅是技术水平的提升，还收获了项目管理的经验。 </p>
<p>部门解散前，有一个多月时间是比较闲的。利用这段时间自己研究了Android Framework层的源码，搭建了自己的<a href="http://www.liuling123.com/">个人技术博客</a>并且接触了开源社区github。贡献了图片选择库<a href="https://github.com/liuling07/PhotoPicker">PhotoPicker</a>。<br>部门解散后，到新部门做cocos2dx游戏开发，学习了C++以及cocos2dx引擎。利用下班在家的时间学习了Material Design等知识，并且开发了基于Material Design和MVP模式的新闻客户端<a href="https://github.com/liuling07/SimpleNews">SimpleNews</a>。</p>]]>
    
    </summary>
    
      <category term="人生感悟" scheme="http://www.liuling123.com/categories/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MVP模式在Android项目中的使用]]></title>
    <link href="http://www.liuling123.com/2015/12/mvp-pattern-android.html"/>
    <id>http://www.liuling123.com/2015/12/mvp-pattern-android.html</id>
    <published>2015-12-23T14:16:04.000Z</published>
    <updated>2016-01-03T07:35:27.000Z</updated>
    <content type="html"><![CDATA[<p> 以前在写项目的时候，没有过多考虑架构模式的问题，因为之前一直做J2EE开发，而J2EE都是采用MVC模式进行开发的，所以在搭建公司项目的时候，也是使用类似MVC的架构（严格来讲，之前的项目还算不上MVC模式，只是简单将网络请求与界面分离，然后通过Handle通知更新界面）。这种写法，在后面随着项目越来越大，Activty或者Fragment中代码也会越来越多，导致项目的维护变的越来越复杂。所以需要另外一种架构模式来解决这个问题，在网上浏览了一圈，发现适合Android开发的架构模式非MVP莫属了。</p>
<p>网上一搜，讲MVP模式的文章比比皆是。但是大多都是讲理论，稍微好点的会附带一个简单的登录的demo。一个简单的demo很难让初次接触MVP模式的人掌握它的使用。所以我决定写一个稍微复杂一点的新闻客户端SimpleNews（当然只是相对登录的demo）来展示MVP在具体项目中的使用。另外SimpleNews还使用了Material Design，也是学习Material Design的一个好Demo。<br><a id="more"></a><br>好了，切入正文吧。先讲一下MVP的概念。</p>
<h3 id="u4EC0_u4E48_u662FMVP"><a href="#u4EC0_u4E48_u662FMVP" class="headerlink" title="什么是MVP"></a>什么是MVP</h3><p>MVP是模型（Model）、视图（View）、主持人（Presenter）的缩写，分别代表项目中3个不同的模块。</p>
<ul>
<li><p>模型（Model）：负责处理数据的加载或者存储，比如从网络或本地数据库获取数据等；</p>
</li>
<li><p>视图（View）：负责界面数据的展示，与用户进行交互；</p>
</li>
<li><p>主持人（Presenter）：相当于协调者，是模型与视图之间的桥梁，将模型与视图分离开来。</p>
</li>
</ul>
<p>如下图所示，View与Model并不直接交互，而是使用Presenter作为View与Model之间的桥梁。其中Presenter中同时持有Viwe层以及Model层的Interface的引用，而View层持有Presenter层Interface的引用。当View层某个界面需要展示某些数据的时候，首先会调用Presenter层的某个接口，然后Presenter层会调用Model层请求数据，当Model层数据加载成功之后会调用Presenter层的回调方法通知Presenter层数据加载完毕，最后Presenter层再调用View层的接口将加载后的数据展示给用户。这就是MVP模式的整个核心过程。<br><img src="http://7xnqm4.com1.z0.glb.clouddn.com/Android中MVP的使用%C2%8F%C2%9B.png" alt="MVP模式"></p>
<p>这样分层的好处就是大大减少了Model与View层之间的耦合度。一方面可以使得View层和Model层单独开发与测试，互不依赖。另一方面Model层可以封装复用，可以极大的减少代码量。当然，MVP还有其他的一些优点，这里不再赘述。下面看下MVP模式在具体项目中的使用。</p>
<h3 id="MVP_u6A21_u5F0F_u5728_u9879_u76EE_u4E2D_u7684_u4F7F_u7528"><a href="#MVP_u6A21_u5F0F_u5728_u9879_u76EE_u4E2D_u7684_u4F7F_u7528" class="headerlink" title="MVP模式在项目中的使用"></a>MVP模式在项目中的使用</h3><h4 id="View_u5C42"><a href="#View_u5C42" class="headerlink" title="View层"></a>View层</h4><p>View层新闻展示模块的是组件是Fragment，里面有一个RecyclerView、SwipeRefreshLayout。布局代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">android.support.v4.widget.SwipeRefreshLayout</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/swipe_refresh_widget"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">android.support.v7.widget.RecyclerView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/recycle_view"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:scrollbars</span>=<span class="value">"vertical"</span></span><br><span class="line">        <span class="attribute">app:layout_behavior</span>=<span class="value">"@string/appbar_scrolling_view_behavior"</span></span><br><span class="line">        <span class="attribute">android:paddingTop</span>=<span class="value">"@dimen/card_margin"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">android.support.v7.widget.RecyclerView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新闻列表模块主要是展示从网络获取的新闻列表信息，View层的接口大概需要如下方法：</p>
<ol>
<li>加载数据的过程中需要提示“正在加载”的反馈信息给用户</li>
<li>加载成功后，将加载得到的数据填充到RecyclerView展示给用户</li>
<li>加载成功后，需要将“正在加载”反馈信息取消掉</li>
<li>若加载数据失败，如无网络连接，则需要给用户提示信息</li>
</ol>
<p>根据上面描述，我们将View层的接口定义如下，分别对应上面四个方法：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">NewsView</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showProgress</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addNews</span>(<span class="params">List&lt;NewsBean&gt; newsList</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hideProgress</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showLoadFailMsg</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在新闻列表Fragment中实现上述接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lauren.simplenews.news.widget;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.ActivityCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.ActivityOptionsCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.widget.SwipeRefreshLayout;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.DefaultItemAnimator;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.R;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.beans.NewsBean;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.commons.Urls;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.news.NewsAdapter;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.news.presenter.NewsPresenter;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.news.presenter.NewsPresenterImpl;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.news.view.NewsView;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.utils.LogUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Description : 新闻Fragment</span><br><span class="line"> * Author : lauren</span><br><span class="line"> * Email  : lauren.liuling<span class="doctag">@gmail</span>.com</span><br><span class="line"> * Blog   : http://www.liuling123.com</span><br><span class="line"> * Date   : 15/12/13</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsListFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">NewsView</span>, <span class="title">SwipeRefreshLayout</span>.<span class="title">OnRefreshListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"NewsListFragment"</span>;</span><br><span class="line">    <span class="keyword">private</span> SwipeRefreshLayout mSwipeRefreshWidget;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</span><br><span class="line">    <span class="keyword">private</span> LinearLayoutManager mLayoutManager;</span><br><span class="line">    <span class="keyword">private</span> NewsAdapter mAdapter;</span><br><span class="line">    <span class="keyword">private</span> List&lt;NewsBean&gt; mData;</span><br><span class="line">    <span class="keyword">private</span> NewsPresenter mNewsPresenter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mType = NewsFragment.NEWS_TYPE_TOP;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NewsListFragment <span class="title">newInstance</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        NewsListFragment fragment = <span class="keyword">new</span> NewsListFragment();</span><br><span class="line">        args.putInt(<span class="string">"type"</span>, type);</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        mNewsPresenter = <span class="keyword">new</span> NewsPresenterImpl(<span class="keyword">this</span>);</span><br><span class="line">        mType = getArguments().getInt(<span class="string">"type"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Nullable</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.fragment_newslist, <span class="keyword">null</span>);</span><br><span class="line">        mSwipeRefreshWidget = (SwipeRefreshLayout) view.findViewById(R.id.swipe_refresh_widget);</span><br><span class="line">        mSwipeRefreshWidget.setColorSchemeResources(R.color.primary,</span><br><span class="line">                R.color.primary_dark, R.color.primary_light,</span><br><span class="line">                R.color.accent);</span><br><span class="line">        mSwipeRefreshWidget.setOnRefreshListener(<span class="keyword">this</span>);</span><br><span class="line">        mRecyclerView = (RecyclerView)view.findViewById(R.id.recycle_view);</span><br><span class="line">        mRecyclerView.setHasFixedSize(<span class="keyword">true</span>);</span><br><span class="line">        mLayoutManager = <span class="keyword">new</span> LinearLayoutManager(getActivity());</span><br><span class="line">        mRecyclerView.setLayoutManager(mLayoutManager);</span><br><span class="line">        mRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</span><br><span class="line">        mAdapter = <span class="keyword">new</span> NewsAdapter(getActivity().getApplicationContext());</span><br><span class="line">        mAdapter.setOnItemClickListener(mOnItemClickListener);</span><br><span class="line">        mRecyclerView.setAdapter(mAdapter);</span><br><span class="line">        mRecyclerView.setOnScrollListener(mOnScrollListener);</span><br><span class="line">        onRefresh();</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView.OnScrollListener mOnScrollListener = <span class="keyword">new</span> RecyclerView.OnScrollListener() &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> lastVisibleItem;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);</span><br><span class="line">            lastVisibleItem = mLayoutManager.findLastVisibleItemPosition();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState);</span><br><span class="line">            <span class="keyword">if</span> (newState == RecyclerView.SCROLL_STATE_IDLE</span><br><span class="line">                    &amp;&amp; lastVisibleItem + <span class="number">1</span> == mAdapter.getItemCount()</span><br><span class="line">                    &amp;&amp; mAdapter.isShowFooter()) &#123;</span><br><span class="line">                <span class="comment">//加载更多</span></span><br><span class="line">                LogUtils.d(TAG, <span class="string">"loading more data"</span>);</span><br><span class="line">                mNewsPresenter.loadNews(mType, pageIndex + Urls.PAZE_SIZE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> NewsAdapter.OnItemClickListener mOnItemClickListener = <span class="keyword">new</span> NewsAdapter.OnItemClickListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            NewsBean news = mAdapter.getItem(position);</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(getActivity(), NewsDetailActivity.class);</span><br><span class="line">            intent.putExtra(<span class="string">"news"</span>, news);</span><br><span class="line">            View transitionView = view.findViewById(R.id.ivNews);</span><br><span class="line">            ActivityOptionsCompat options =</span><br><span class="line">                    ActivityOptionsCompat.makeSceneTransitionAnimation(getActivity(),</span><br><span class="line">                            transitionView, getString(R.string.transition_news_img));</span><br><span class="line">            ActivityCompat.startActivity(getActivity(), intent, options.toBundle());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mSwipeRefreshWidget.setRefreshing(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNews</span><span class="params">(List&lt;NewsBean&gt; newsList)</span> </span>&#123;</span><br><span class="line">        mAdapter.isShowFooter(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span>(mData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mData = <span class="keyword">new</span> ArrayList&lt;NewsBean&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        mData.addAll(newsList);</span><br><span class="line">        <span class="keyword">if</span>(pageIndex == <span class="number">0</span>) &#123;</span><br><span class="line">            mAdapter.setmDate(mData);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果没有更多数据了,则隐藏footer布局</span></span><br><span class="line">            <span class="keyword">if</span>(newsList == <span class="keyword">null</span> || newsList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                mAdapter.isShowFooter(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mAdapter.notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">        pageIndex += Urls.PAZE_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hideProgress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mSwipeRefreshWidget.setRefreshing(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoadFailMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pageIndex == <span class="number">0</span>) &#123;</span><br><span class="line">            mAdapter.isShowFooter(<span class="keyword">false</span>);</span><br><span class="line">            mAdapter.notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">        Snackbar.make(getActivity().findViewById(R.id.drawer_layout), getString(R.string.load_fail), Snackbar.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pageIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(mData != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mData.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        mNewsPresenter.loadNews(mType, pageIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Model_u5C42"><a href="#Model_u5C42" class="headerlink" title="Model层"></a>Model层</h4><p>新闻模块的model主要负责从服务器获取新闻列表信息，接口代码如下：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">NewsModel</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadNews</span>(<span class="params">String url, <span class="keyword">int</span> type, NewsModelImpl.OnLoadNewsListListener listener</span>)</span>;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lauren.simplenews.news.model;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.beans.NewsBean;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.beans.NewsDetailBean;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.commons.Urls;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.news.NewsJsonUtils;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.news.widget.NewsFragment;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.utils.OkHttpUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Description : 新闻业务处理类</span><br><span class="line"> * Author : lauren</span><br><span class="line"> * Email  : lauren.liuling<span class="doctag">@gmail</span>.com</span><br><span class="line"> * Blog   : http://www.liuling123.com</span><br><span class="line"> * Date   : 15/12/19</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsModelImpl</span> <span class="keyword">implements</span> <span class="title">NewsModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 加载新闻列表</span><br><span class="line">     * <span class="doctag">@param</span> url</span><br><span class="line">     * <span class="doctag">@param</span> listener</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadNews</span><span class="params">(String url, <span class="keyword">final</span> <span class="keyword">int</span> type, <span class="keyword">final</span> OnLoadNewsListListener listener)</span> </span>&#123;</span><br><span class="line">        OkHttpUtils.ResultCallback&lt;String&gt; loadNewsCallback = <span class="keyword">new</span> OkHttpUtils.ResultCallback&lt;String&gt;() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String response)</span> </span>&#123;</span><br><span class="line">                List&lt;NewsBean&gt; newsBeanList = NewsJsonUtils.readJsonNewsBeans(response, getID(type));</span><br><span class="line">                listener.onSuccess(newsBeanList);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                listener.onFailure(<span class="string">"load news list failure."</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        OkHttpUtils.get(url, loadNewsCallback);</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取ID</span><br><span class="line">     * <span class="doctag">@param</span> type</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getID</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        String id;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> NewsFragment.NEWS_TYPE_TOP:</span><br><span class="line">                id = Urls.TOP_ID;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NewsFragment.NEWS_TYPE_NBA:</span><br><span class="line">                id = Urls.NBA_ID;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NewsFragment.NEWS_TYPE_CARS:</span><br><span class="line">                id = Urls.CAR_ID;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NewsFragment.NEWS_TYPE_JOKES:</span><br><span class="line">                id = Urls.JOKE_ID;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                id = Urls.TOP_ID;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getDetailUrl</span><span class="params">(String docId)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(Urls.NEW_DETAIL);</span><br><span class="line">        sb.append(docId).append(Urls.END_DETAIL_URL);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnLoadNewsListListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;NewsBean&gt; list)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String msg, Exception e)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>网络请求使用开源项目OkHttp，OkHttpUtils是对其的封装，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lauren.simplenews.utils;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Looper;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.internal.$Gson$Types;</span><br><span class="line"><span class="keyword">import</span> com.squareup.okhttp.Callback;</span><br><span class="line"><span class="keyword">import</span> com.squareup.okhttp.FormEncodingBuilder;</span><br><span class="line"><span class="keyword">import</span> com.squareup.okhttp.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> com.squareup.okhttp.Request;</span><br><span class="line"><span class="keyword">import</span> com.squareup.okhttp.RequestBody;</span><br><span class="line"><span class="keyword">import</span> com.squareup.okhttp.Response;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.net.CookieManager;</span><br><span class="line"><span class="keyword">import</span> java.net.CookiePolicy;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Description : OkHttp网络连接封装工具类</span><br><span class="line"> * Author : lauren</span><br><span class="line"> * Email  : lauren.liuling<span class="doctag">@gmail</span>.com</span><br><span class="line"> * Blog   : http://www.liuling123.com</span><br><span class="line"> * Date   : 15/12/17</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"OkHttpUtils"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpUtils mInstance;</span><br><span class="line">    <span class="keyword">private</span> OkHttpClient mOkHttpClient;</span><br><span class="line">    <span class="keyword">private</span> Handler mDelivery;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">OkHttpUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mOkHttpClient = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        mOkHttpClient.setConnectTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        mOkHttpClient.setWriteTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        mOkHttpClient.setReadTimeout(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//cookie enabled</span></span><br><span class="line">        mOkHttpClient.setCookieHandler(<span class="keyword">new</span> CookieManager(<span class="keyword">null</span>, CookiePolicy.ACCEPT_ORIGINAL_SERVER));</span><br><span class="line">        mDelivery = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> OkHttpUtils <span class="title">getmInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInstance = <span class="keyword">new</span> OkHttpUtils();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getRequest</span><span class="params">(String url, <span class="keyword">final</span> ResultCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</span><br><span class="line">        deliveryResult(callback, request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postRequest</span><span class="params">(String url, <span class="keyword">final</span> ResultCallback callback, List&lt;Param&gt; params)</span> </span>&#123;</span><br><span class="line">        Request request = buildPostRequest(url, params);</span><br><span class="line">        deliveryResult(callback, request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deliveryResult</span><span class="params">(<span class="keyword">final</span> ResultCallback callback, Request request)</span> </span>&#123;</span><br><span class="line">        mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, <span class="keyword">final</span> IOException e)</span> </span>&#123;</span><br><span class="line">                sendFailCallback(callback, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String str = response.body().string();</span><br><span class="line">                    <span class="keyword">if</span> (callback.mType == String.class) &#123;</span><br><span class="line">                        sendSuccessCallBack(callback, str);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Object object = JsonUtils.deserialize(str, callback.mType);</span><br><span class="line">                        sendSuccessCallBack(callback, object);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">                    LogUtils.e(TAG, <span class="string">"convert json failure"</span>, e);</span><br><span class="line">                    sendFailCallback(callback, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendFailCallback</span><span class="params">(<span class="keyword">final</span> ResultCallback callback, <span class="keyword">final</span> Exception e)</span> </span>&#123;</span><br><span class="line">        mDelivery.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    callback.onFailure(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendSuccessCallBack</span><span class="params">(<span class="keyword">final</span> ResultCallback callback, <span class="keyword">final</span> Object obj)</span> </span>&#123;</span><br><span class="line">        mDelivery.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    callback.onSuccess(obj);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Request <span class="title">buildPostRequest</span><span class="params">(String url, List&lt;Param&gt; params)</span> </span>&#123;</span><br><span class="line">        FormEncodingBuilder builder = <span class="keyword">new</span> FormEncodingBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Param param : params) &#123;</span><br><span class="line">            builder.add(param.key, param.value);</span><br><span class="line">        &#125;</span><br><span class="line">        RequestBody requestBody = builder.build();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Request.Builder().url(url).post(requestBody).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**********************对外接口************************/</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * get请求</span><br><span class="line">     * <span class="doctag">@param</span> url  请求url</span><br><span class="line">     * <span class="doctag">@param</span> callback  请求回调</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String url, ResultCallback callback)</span> </span>&#123;</span><br><span class="line">        getmInstance().getRequest(url, callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * post请求</span><br><span class="line">     * <span class="doctag">@param</span> url       请求url</span><br><span class="line">     * <span class="doctag">@param</span> callback  请求回调</span><br><span class="line">     * <span class="doctag">@param</span> params    请求参数</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(String url, <span class="keyword">final</span> ResultCallback callback, List&lt;Param&gt; params)</span> </span>&#123;</span><br><span class="line">        getmInstance().postRequest(url, callback, params);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * http请求回调类,回调方法在UI线程中执行</span><br><span class="line">     * <span class="doctag">@param</span> &lt;T&gt;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultCallback</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        Type mType;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ResultCallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">            mType = getSuperclassTypeParameter(getClass());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> Type <span class="title">getSuperclassTypeParameter</span><span class="params">(Class&lt;?&gt; subclass)</span> </span>&#123;</span><br><span class="line">            Type superclass = subclass.getGenericSuperclass();</span><br><span class="line">            <span class="keyword">if</span> (superclass <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Missing type parameter."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ParameterizedType parameterized = (ParameterizedType) superclass;</span><br><span class="line">            <span class="keyword">return</span> $Gson$Types.canonicalize(parameterized.getActualTypeArguments()[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * 请求成功回调</span><br><span class="line">         * <span class="doctag">@param</span> response</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(T response)</span></span>;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * 请求失败回调</span><br><span class="line">         * <span class="doctag">@param</span> e</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * post请求参数类</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Param</span> </span>&#123;</span><br><span class="line">        String key;</span><br><span class="line">        String value;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Param</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Param</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将网络请求进行封装可以减少很多的代码量，并且后期如果我不想用okhttp了，想换成其它的库，修改起来也方便。</p>
<h4 id="Presenter_u5C42"><a href="#Presenter_u5C42" class="headerlink" title="Presenter层"></a>Presenter层</h4><p>View层需要调用Presenter层加载新闻信息，所以Presenter需要提供加载新闻信息的接口：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">NewsPresenter</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadNews</span>(<span class="params"><span class="keyword">int</span> type, <span class="keyword">int</span> page</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>NewsPresenterImpl的构造函数中需要传入View层的接口对象NewView，并且需要创建一个NewsModel对象。Presenter的具体实现：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lauren.simplenews.news.presenter;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.beans.NewsBean;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.commons.Urls;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.news.model.NewsModel;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.news.model.NewsModelImpl;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.news.view.NewsView;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.news.widget.NewsFragment;</span><br><span class="line"><span class="keyword">import</span> com.lauren.simplenews.utils.LogUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Description :</span><br><span class="line"> * Author : lauren</span><br><span class="line"> * Email  : lauren.liuling<span class="doctag">@gmail</span>.com</span><br><span class="line"> * Blog   : http://www.liuling123.com</span><br><span class="line"> * Date   : 15/12/18</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsPresenterImpl</span> <span class="keyword">implements</span> <span class="title">NewsPresenter</span>, <span class="title">NewsModelImpl</span>.<span class="title">OnLoadNewsListListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"NewsPresenterImpl"</span>;</span><br><span class="line">    <span class="keyword">private</span> NewsView mNewsView;</span><br><span class="line">    <span class="keyword">private</span> NewsModel mNewsModel;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewsPresenterImpl</span><span class="params">(NewsView newsView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mNewsView = newsView;</span><br><span class="line">        <span class="keyword">this</span>.mNewsModel = <span class="keyword">new</span> NewsModelImpl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">loadNews</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> type, <span class="keyword">final</span> <span class="keyword">int</span> pageIndex)</span> </span>&#123;</span><br><span class="line">        String url = getUrl(type, pageIndex);</span><br><span class="line">        LogUtils.d(TAG, url);</span><br><span class="line">        <span class="comment">//只有第一页的或者刷新的时候才显示刷新进度条</span></span><br><span class="line">        <span class="keyword">if</span>(pageIndex == <span class="number">0</span>) &#123;</span><br><span class="line">            mNewsView.showProgress();</span><br><span class="line">        &#125;</span><br><span class="line">        mNewsModel.loadNews(url, type, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 根据类别和页面索引创建url</span><br><span class="line">     * <span class="doctag">@param</span> type</span><br><span class="line">     * <span class="doctag">@param</span> pageIndex</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function">String <span class="title">getUrl</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">int</span> pageIndex)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> NewsFragment.NEWS_TYPE_TOP:</span><br><span class="line">                sb.append(Urls.TOP_URL).append(Urls.TOP_ID);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NewsFragment.NEWS_TYPE_NBA:</span><br><span class="line">                sb.append(Urls.COMMON_URL).append(Urls.NBA_ID);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NewsFragment.NEWS_TYPE_CARS:</span><br><span class="line">                sb.append(Urls.COMMON_URL).append(Urls.CAR_ID);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NewsFragment.NEWS_TYPE_JOKES:</span><br><span class="line">                sb.append(Urls.COMMON_URL).append(Urls.JOKE_ID);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                sb.append(Urls.TOP_URL).append(Urls.TOP_ID);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">"/"</span>).append(pageIndex).append(Urls.END_URL);</span><br><span class="line">        <span class="function"><span class="keyword">return</span> sb.<span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(List&lt;NewsBean&gt; list)</span> </span>&#123;</span><br><span class="line">        mNewsView.hideProgress();</span><br><span class="line">        mNewsView.addNews(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(String msg, Exception e)</span> </span>&#123;</span><br><span class="line">        mNewsView.hideProgress();</span><br><span class="line">        mNewsView.showLoadFailMsg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当用户切换到NewsListFragment界面之后，界面需要展示新闻列表信息给用户。首先NewsListFragment会调用NewsPresenter的loadNews方法，NewsPresenter 的loadNews方法中又会调用NewsModel中的loadNews方法。NewsModel中的loadNews方法中就是加载数据的核心，通过Okhttp请求服务器接口获取数据，无论数据获取成功与否，都会通过OnLoadNewsListener接口回调给NewsPresenter 。如果获取成功，NewsPresenter 会调用NewsView的addNews方法将获取的新闻列表信息展示到RecyclerView。如果获取失败，则调用NewsView的showLoadFialMsg方法向用户提示失败信息。</p>
<p>以上就是新闻列表请求的整个过程。</p>
<p>源码地址：<a href="https://github.com/liuling07/SimpleNews" target="_blank" rel="external">https://github.com/liuling07/SimpleNews</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p> 以前在写项目的时候，没有过多考虑架构模式的问题，因为之前一直做J2EE开发，而J2EE都是采用MVC模式进行开发的，所以在搭建公司项目的时候，也是使用类似MVC的架构（严格来讲，之前的项目还算不上MVC模式，只是简单将网络请求与界面分离，然后通过Handle通知更新界面）。这种写法，在后面随着项目越来越大，Activty或者Fragment中代码也会越来越多，导致项目的维护变的越来越复杂。所以需要另外一种架构模式来解决这个问题，在网上浏览了一圈，发现适合Android开发的架构模式非MVP莫属了。</p>
<p>网上一搜，讲MVP模式的文章比比皆是。但是大多都是讲理论，稍微好点的会附带一个简单的登录的demo。一个简单的demo很难让初次接触MVP模式的人掌握它的使用。所以我决定写一个稍微复杂一点的新闻客户端SimpleNews（当然只是相对登录的demo）来展示MVP在具体项目中的使用。另外SimpleNews还使用了Material Design，也是学习Material Design的一个好Demo。<br>]]>
    
    </summary>
    
      <category term="MVP" scheme="http://www.liuling123.com/tags/MVP/"/>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="设计模式" scheme="http://www.liuling123.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【译文】Android M中Intent的解析]]></title>
    <link href="http://www.liuling123.com/2015/12/intent-resolving-in-android-m.html"/>
    <id>http://www.liuling123.com/2015/12/intent-resolving-in-android-m.html</id>
    <published>2015-12-04T06:52:06.000Z</published>
    <updated>2016-01-03T07:29:56.000Z</updated>
    <content type="html"><![CDATA[<p>原文链接 : <a href="https://medium.com/google-developer-experts/intent-resolving-in-android-m-c17d39d27048#.n23z2g14e" target="_blank" rel="external">Intent Resolving in Android M</a><br>原文作者 : <a href="https://medium.com/@tasomaniac" target="_blank" rel="external">Said Tahsin Dane</a><br>译文出自 : <a href="http://www.devtf.cn" target="_blank" rel="external">开发技术前线 www.devtf.cn。未经允许，不得转载!</a><br>译者 : <a href="https://github.com/liuling07" target="_blank" rel="external">liuling07</a><br>校对者: <a href="https://github.com/desmond1121" target="_blank" rel="external">desmond1121</a><br>状态 : 完成</p>
<h2 id="u8BD1_u6587_u8FDE_u63A5_uFF1AAndroid_M_u4E2DIntent_u7684_u89E3_u6790"><a href="#u8BD1_u6587_u8FDE_u63A5_uFF1AAndroid_M_u4E2DIntent_u7684_u89E3_u6790" class="headerlink" title="译文连接：Android M中Intent的解析"></a>译文连接：<a href="https://github.com/bboyfeiyu/android-tech-frontier/tree/master/others/Android-M中Intent的解析" target="_blank" rel="external">Android M中Intent的解析</a></h2><p>注意了！在Android 6.0中，“隐式Intent”的解析不能像之前版本那样正常工作了。这很有可能导致你的app不能正常使用。</p>
<p>现在让我解释一下这个意料之中的问题以及为什么它不能正常使用： 最近，我正在开发一个小的开源项目，叫做“Open Link With”。希望不久后它能够在应用市场上架。</p>
<p>我的这个app能够让你在其他app之间随意切换。当你给我分享一个链接的时候，我基本上可以根据这个链接查询出所有可以处理这个链接的Activity。然后我会模拟一个系统对话框让你切换app。<br><a id="more"></a><br><img src="https://cdn-images-1.medium.com/max/1600/1*rW8I8aCpJ2q8fnfKH_51_g.gif" alt="从已经打开的youtube的web页面切换到youtube应用" title="从已经打开的youtube的web页面切换到youtube应用"></p>
<p>我一直都是使用下面的方法：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List<span class="tag">&lt;<span class="title">ResolveInfo</span>&gt;</span> infos = packageManager</span><br><span class="line">        .queryIntentActivities(intent, MATCH_DEFAULT_ONLY);</span><br></pre></td></tr></table></figure></p>
<p>这段代码几乎所有Android开发者都比较熟悉，并且我也相信大部分app都有用到这段代码。</p>
<p>我的手机里有两个浏览器。“一个URL是Google+ 的Intent”期望得到一个具有3个ResolveInfo对象的列表（Google+应用以及两个浏览器）。</p>
<p>好吧，并不是这样！</p>
<p>欢迎来到Android 6.0！</p>
<p>Android 6.0引进了应用关联。系统主要通过你的web页面来认证，并且自动使用你的app来打开这些URL，而不会向你做任何请求。或者你可以到系统设置，选择“应用程序”，然后点击一个应用，再点击“默认打开方式”，然后设置“用这个应用打开”，就可以每次都使用这个应用打开。</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*MVZbYKhwu-7qnyGAFWuNsw.png" alt="Android 6.0的应用默认设置页面" title="Android 6.0的应用默认设置页面"></p>
<p>在这种情况下，queryIntentActivities方法只会给开发者返回一个只有一个Activity的列表（此例子返回的是Google+）。</p>
<p>虽然这是在意料之中的，但是应该在文档中注明，因为它与公共API相矛盾了。</p>
<p>我研究了一下，发现了一个MATCH_ALL标志，文档表示，它将禁用所有的系统级过滤器。</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Querying flag: <span class="keyword">if</span> <span class="keyword">set</span> <span class="keyword">and</span> <span class="keyword">if</span> the platform <span class="keyword">is</span> doing any filtering <span class="keyword">of</span> the results, <span class="keyword">then</span></span><br><span class="line"> * the filtering will <span class="keyword">not</span> happen. This <span class="keyword">is</span> a synonym <span class="keyword">for</span> saying that all results should</span><br><span class="line"> * be returned.</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> final int MATCH_ALL = <span class="number">0x00020000</span>;</span><br></pre></td></tr></table></figure>
<p>这对我来说没什么用。我打开源码（至少我有源码）并开始研究这个方法。</p>
<p>它似乎优先考虑验证应用程序的域，不仅在它的内部系统，在公共API中也是如此。</p>
<p>如果有一个验证应用程序的域，它不会返回任何其他东西。MATCH_ALL标志会移除一些系统过滤器，但是仅仅是在没有验证程序的情况下。</p>
<p>对于这个问题，我找不到任何可变通的措施。它只是排除浏览器应用，即使他们的IntentFilters匹配。</p>
<p>之所以没有可变通的措施，是因为他是一个内部组件（我们无法访问），Android SDK通过IPC使用AIDL与它进行通信。</p>
<p>大部分开发者使用这个方法来判断是否至少有一个Activity来处理隐式的Intent。在大多数情况下，列表中第一项就是你想要的。</p>
<p>在花了几个小时搞明白到底发生了什么之后，我尝试寻找一个我认为每个人都应该知道的解决方案。</p>
<p>在Android 6.0中，改动的地方很多。实际上谷歌提供了一些改变清单，在清单中你能看到到底有哪些改变。我认为还有很多类似上面的一些没有在清单中列出的改变，而这些改动很有可能导致你的应用无法正常运行。</p>
<p>所以如果你使用PackageManager的方法，你一定得小心，并且认真检查。</p>
<p>感谢此文的校对者：<a href="https://twitter.com/yagmurdalman" target="_blank" rel="external">Yağmur Dalman</a>、<a href="https://medium.com/u/9706138c9bfb" target="_blank" rel="external">Sebastiano Poggi</a>、<a href="https://medium.com/u/73761c65c602" target="_blank" rel="external">Salim KAYABAŞI</a>、<a href="https://medium.com/u/24a0490cd588" target="_blank" rel="external">Hasan Keklik</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文链接 : <a href="https://medium.com/google-developer-experts/intent-resolving-in-android-m-c17d39d27048#.n23z2g14e">Intent Resolving in Android M</a><br>原文作者 : <a href="https://medium.com/@tasomaniac">Said Tahsin Dane</a><br>译文出自 : <a href="http://www.devtf.cn">开发技术前线 www.devtf.cn。未经允许，不得转载!</a><br>译者 : <a href="https://github.com/liuling07">liuling07</a><br>校对者: <a href="https://github.com/desmond1121">desmond1121</a><br>状态 : 完成</p>
<h2 id="u8BD1_u6587_u8FDE_u63A5_uFF1AAndroid_M_u4E2DIntent_u7684_u89E3_u6790"><a href="#u8BD1_u6587_u8FDE_u63A5_uFF1AAndroid_M_u4E2DIntent_u7684_u89E3_u6790" class="headerlink" title="译文连接：Android M中Intent的解析"></a>译文连接：<a href="https://github.com/bboyfeiyu/android-tech-frontier/tree/master/others/Android-M中Intent的解析">Android M中Intent的解析</a></h2><p>注意了！在Android 6.0中，“隐式Intent”的解析不能像之前版本那样正常工作了。这很有可能导致你的app不能正常使用。</p>
<p>现在让我解释一下这个意料之中的问题以及为什么它不能正常使用： 最近，我正在开发一个小的开源项目，叫做“Open Link With”。希望不久后它能够在应用市场上架。</p>
<p>我的这个app能够让你在其他app之间随意切换。当你给我分享一个链接的时候，我基本上可以根据这个链接查询出所有可以处理这个链接的Activity。然后我会模拟一个系统对话框让你切换app。<br>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="译文" scheme="http://www.liuling123.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【译文】高性能ListViews]]></title>
    <link href="http://www.liuling123.com/2015/12/performance-listviews.html"/>
    <id>http://www.liuling123.com/2015/12/performance-listviews.html</id>
    <published>2015-12-02T10:22:14.000Z</published>
    <updated>2016-01-03T07:37:23.000Z</updated>
    <content type="html"><![CDATA[<p>原文链接 : <a href="http://willowtreeapps.com/blog/performance-listviews/?utm_source=Android+Weekly&amp;utm_campaign=038d344835-Android_Weekly_178&amp;utm_medium=email&amp;utm_term=0_4eb677ad19-038d344835-337955857" target="_blank" rel="external">Performance ListViews</a><br>原文作者 : <a href="http://willowtreeapps.com/blog/" target="_blank" rel="external">Brandon</a><br>译文出自 : <a href="http://www.devtf.cn" target="_blank" rel="external">开发技术前线 www.devtf.cn。未经允许，不得转载!</a><br>译者 : <a href="https://github.com/liuling07" target="_blank" rel="external">liuling07</a><br>校对者: <a href="https://github.com/desmond1121" target="_blank" rel="external">desmond1121</a><br>状态 : 完成</p>
<h2 id="u8BD1_u6587_u8FDE_u63A5_uFF1A_u9AD8_u6027_u80FDListViews"><a href="#u8BD1_u6587_u8FDE_u63A5_uFF1A_u9AD8_u6027_u80FDListViews" class="headerlink" title="译文连接：高性能ListViews"></a>译文连接：<a href="https://github.com/bboyfeiyu/android-tech-frontier/blob/master/androidweekly/高性能ListViews/高性能ListViews.md" target="_blank" rel="external">高性能ListViews</a></h2><p>列表展示功能几乎在所有app中都会被用到，使用列表可以很方便的展示一些列表项，比如菜谱、联系人，或者任意类型的类别。所以Android有一个内置的方式来展示此类型的数据，也是在情理之中的。RecyclerView是一种最新的展示列表数据的方式，它非常高效，因为它重用视图而不是每一行出现在屏幕上都重新创建。在RecyclerView出现之前，我们可以使用ListView，即使到了现在，ListView也是广泛的被开发者所使用。虽然ListView也是可以回收视图的，但它也一直都是Android中最容易被错误使用的一个控件。我们知道在此之前这个话题已经被写过无数遍了，但是今天我还是要在博客中提出来，因为我们仍然发现很多app在错误的使用它们。</p>
<p>关于ListView中ArrayAdapter的用法，标准的新手写法是这样子的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public View getView(int position, View convertView, ViewGroup parent) &#123;</span><br><span class="line"> </span><br><span class="line">    LayoutInflater inflater = (LayoutInflater) context</span><br><span class="line">            .getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">    View rowView = inflater.inflate(R.layout.view_<span class="built_in">test</span>_row, parent, <span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line">    TextView <span class="built_in">test</span>Name = (TextView)rowView.findViewById(R.id.text_view_<span class="built_in">test</span>_name);</span><br><span class="line">    TextView <span class="built_in">test</span>Desc = (TextView)rowView.findViewById(R.id.text_view_<span class="built_in">test</span>_desc);</span><br><span class="line"> </span><br><span class="line">    //modify TextViews, <span class="keyword">in</span> some arbitrary way</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">return</span> rowView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>当所有列表项都能够一次性在一屏中显示的时候，这种写法并没有什么问题，但这样你就创建了一个基本视图，并完全避免了ArrayAdapter的麻烦了吗？当ListView需要显示一个很大的列表集，而且列表子项是一个非常复杂的视图的时候，上面的方式会消耗大量的性能。当用户滑动屏幕的时候，每个视图都会被inflate并且调用findViewById()方法。当findViewById()方法被调用的时候，会遍历整个视图层级，直到找到正确的Id。每个子视图都要执行上述过程！并且用户滑动的越快，卡顿现象愈加明显。为了解决这个问题，我们可以使用一个静态类来绑定还没被使用的convertView。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span>()</span>&#123;</span><br><span class="line"> </span><br><span class="line">        TextView testName;</span><br><span class="line">        TextView testDesc;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function">View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    View rowView = convertView;  <span class="comment">//reference to one of the previous Views in the list that we can reuse.</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line"> </span><br><span class="line">        LayoutInflater inflater = (LayoutInflater) context</span><br><span class="line">                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">        rowView = inflater.inflate(R.layout.view_test_row, parent, <span class="keyword">false</span>);</span><br><span class="line"> </span><br><span class="line">        ViewHolder viewHolder = <span class="keyword">new</span> ViewHolder();</span><br><span class="line">        viewHolder.testName = (TextView) rowView.findViewById(R.id.text_view_test_name);</span><br><span class="line">        viewHolder.testDesc = (TextView) rowView.findViewById(R.id.text_view_test_desc);</span><br><span class="line"> </span><br><span class="line">        rowView.setTag(viewHolder);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ViewHolder holder = (ViewHolder) rowView.getTag();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//in real code these strings should be in res</span></span><br><span class="line">    holder.testName.setText(<span class="string">"Test"</span>+position);</span><br><span class="line">    holder.testDesc.setText(<span class="string">"This is number "</span>+position);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> rowView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那convertView又是什么呢？它可以让ListView跳过一些显示一行内容所需要的设置。如果某一行的视图不在屏幕中显示，我们可以重复使用这个视图来显示一个新行。当ListView刚开始显示的时候，一切都是正常的。既然没有视图可以被用来复用，convertView为空。视图也像前面版本一样被inflate，但是TextViews会被找到且它的引用被保存在一个ViewHolder中。然后我们可以调用setTag()方法将ViewHolder存储在视图中。正如修订过后的getView()方法中后半段代码所示，我们可以在视图中存储后面我们需要用到的数据。</p>
<p>我们所做的更改可能看起来并没有太大的效果，但是随着布局越来越复杂并且数量也越来越多，效果将变得越来越明显。作为开发者，我最不想做的事就是开发一个用户体验很差的app。所以请记住，仅仅一个低水平的ListView都有可能让一个app死掉，我们一定得避免这种情况发生。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文链接 : <a href="http://willowtreeapps.com/blog/performance-listviews/?utm_source=Android+Weekly&amp;utm_campaign=038d344835-Android_Weekly_178&amp;utm_medium=email&amp;utm_term=0_4eb677ad19-038d344835-337955857">Performance ListViews</a><br>原文作者 : <a href="http://willowtreeapps.com/blog/">Brandon</a><br>译文出自 : <a href="http://www.devtf.cn">开发技术前线 www.devtf.cn。未经允许，不得转载!</a><br>译者 : <a href="https://github.com/liuling07">liuling07</a><br>校对者: <a href="https://github.com/desmond1121">desmond1121</a><br>状态 : 完成</p>
<h2 id="u8BD1_u6587_u8FDE_u63A5_uFF1A_u9AD8_u6027_u80FDListViews"><a href="#u8BD1_u6587_u8FDE_u63A5_uFF1A_u9AD8_u6027_u80FDListViews" class="headerlink" title="译文连接：高性能ListViews"></a>译文连接：<a href="https://github.com/bboyfeiyu/android-tech-frontier/blob/master/androidweekly/高性能ListViews/高性能ListViews.md">高性能ListViews</a></h2><p>列表展示功能几乎在所有app中都会被用到，使用列表可以很方便的展示一些列表项，比如菜谱、联系人，或者任意类型的类别。所以Android有一个内置的方式来展示此类型的数据，也是在情理之中的。RecyclerView是一种最新的展示列表数据的方式，它非常高效，因为它重用视图而不是每一行出现在屏幕上都重新创建。在RecyclerView出现之前，我们可以使用ListView，即使到了现在，ListView也是广泛的被开发者所使用。虽然ListView也是可以回收视图的，但它也一直都是Android中最容易被错误使用的一个控件。我们知道在此之前这个话题已经被写过无数遍了，但是今天我还是要在博客中提出来，因为我们仍然发现很多app在错误的使用它们。</p>
<p>关于ListView中ArrayAdapter的用法，标准的新手写法是这样子的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public View getView(int position, View convertView, ViewGroup parent) &#123;</span><br><span class="line"> </span><br><span class="line">    LayoutInflater inflater = (LayoutInflater) context</span><br><span class="line">            .getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">    View rowView = inflater.inflate(R.layout.view_<span class="built_in">test</span>_row, parent, <span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line">    TextView <span class="built_in">test</span>Name = (TextView)rowView.findViewById(R.id.text_view_<span class="built_in">test</span>_name);</span><br><span class="line">    TextView <span class="built_in">test</span>Desc = (TextView)rowView.findViewById(R.id.text_view_<span class="built_in">test</span>_desc);</span><br><span class="line"> </span><br><span class="line">    //modify TextViews, <span class="keyword">in</span> some arbitrary way</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">return</span> rowView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="译文" scheme="http://www.liuling123.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android带多选功能的PhotoPicker]]></title>
    <link href="http://www.liuling123.com/2015/11/android-multi-photo-picker.html"/>
    <id>http://www.liuling123.com/2015/11/android-multi-photo-picker.html</id>
    <published>2015-11-21T07:46:03.000Z</published>
    <updated>2016-01-03T07:01:45.000Z</updated>
    <content type="html"><![CDATA[<p>最近利用闲碎的一些时间开发了一个Android库<a href="https://github.com/liuling07/PhotoPicker" target="_blank" rel="external">PhotoPicker</a>，前面一篇文章也介绍了，<a href="http://www.liuling123.com/2015/11/android-photo-picker.html">Android高仿微信图片选择功能的PhotoPicker</a>，之前没有加入选择多张图片的功能，现在加上之后一个完整的PhotoPicker库终于算是完工了。</p>
<h2 id="u52A8_u6001_u6548_u679C_u56FE"><a href="#u52A8_u6001_u6548_u679C_u56FE" class="headerlink" title="动态效果图"></a><strong>动态效果图</strong></h2><p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/photo-picker-sample.gif?watermark/1/image/aHR0cDovLzd4bnFtNC5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS93YXRlcm1hcmsucG5n/dissolve/50/gravity/SouthEast" alt="Android带多选功能的PhotoPicker示例图片" title="Android带多选功能的PhotoPicker示例图片"></p>
<a id="more"></a>
<h2 id="u4F7F_u7528_u65B9_u6CD5"><a href="#u4F7F_u7528_u65B9_u6CD5" class="headerlink" title="使用方法"></a><strong>使用方法</strong></h2><p>引入PhotoPicker库，在需要使用图片选择功能的地方添加如下代码：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="type">intent</span> = new <span class="type">Intent</span>(MainActivity.this, PhotoPickerActivity.<span class="keyword">class</span>);</span><br><span class="line"><span class="type">intent</span>.putExtra(PhotoPickerActivity.EXTRA_SHOW_CAMERA, showCamera);</span><br><span class="line"><span class="type">intent</span>.putExtra(PhotoPickerActivity.EXTRA_SELECT_MODE, selectedMode);</span><br><span class="line"><span class="type">intent</span>.putExtra(PhotoPickerActivity.EXTRA_MAX_MUN, maxNum);</span><br><span class="line">startActivityForResult(<span class="type">intent</span>, PICK_PHOTO);</span><br></pre></td></tr></table></figure></p>
<p>并且重写activity的onActivityResult方法，处理返回结果。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Override</span></span><br><span class="line">protected <span class="type">void</span> onActivityResult(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, <span class="type">Intent</span> data) &#123;</span><br><span class="line">    super.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    <span class="keyword">if</span>(requestCode == <span class="type">PICK_PHOTO</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(resultCode == <span class="type">RESULT_OK</span>)&#123;</span><br><span class="line">             <span class="type">ArrayList</span>&lt;<span class="type">String</span>&gt; <span class="literal">result</span> = data.getStringArrayListExtra(<span class="type">PhotoPickerActivity</span>.<span class="type">KEY_RESULT</span>);</span><br><span class="line">            //<span class="keyword">do</span> what you want to to.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>源码地址：<a href="https://github.com/liuling07/PhotoPicker" target="_blank" rel="external">https://github.com/liuling07/PhotoPicker</a>，欢迎fork和star。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近利用闲碎的一些时间开发了一个Android库<a href="https://github.com/liuling07/PhotoPicker">PhotoPicker</a>，前面一篇文章也介绍了，<a href="http://www.liuling123.com/2015/11/android-photo-picker.html">Android高仿微信图片选择功能的PhotoPicker</a>，之前没有加入选择多张图片的功能，现在加上之后一个完整的PhotoPicker库终于算是完工了。</p>
<h2 id="u52A8_u6001_u6548_u679C_u56FE"><a href="#u52A8_u6001_u6548_u679C_u56FE" class="headerlink" title="动态效果图"></a><strong>动态效果图</strong></h2><p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/photo-picker-sample.gif?watermark/1/image/aHR0cDovLzd4bnFtNC5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS93YXRlcm1hcmsucG5n/dissolve/50/gravity/SouthEast" alt="Android带多选功能的PhotoPicker示例图片" title="Android带多选功能的PhotoPicker示例图片"></p>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="图片选择" scheme="http://www.liuling123.com/tags/%E5%9B%BE%E7%89%87%E9%80%89%E6%8B%A9/"/>
    
      <category term="开源" scheme="http://www.liuling123.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android高仿微信图片选择功能的PhotoPicker]]></title>
    <link href="http://www.liuling123.com/2015/11/android-photo-picker.html"/>
    <id>http://www.liuling123.com/2015/11/android-photo-picker.html</id>
    <published>2015-11-15T12:25:01.000Z</published>
    <updated>2016-01-03T07:02:06.000Z</updated>
    <content type="html"><![CDATA[<p>类似于微信修改头像的功能基本上每个app都会有，以前公司开发的项目就有修改头像的功能，但是用的Android系统自带的图片选择器。用Android系统的图片选择器有个好处就是稳定，不会有什么问题。但也有它的缺点，比如不可定制，我们想要修改一下符合自己app的风格无法做到。</p>
<p>既然大部分app都要用到图片选择器，为啥我不自己写一个呢？难不成每次都用系统自带的？那显得太没水平。所以，我就有了一个自己编写一个图片选择器的想法，以后只要有项目需要这个功能，直接拿来用就行了，这多爽！</p>
<p>其实github上也有很多大牛写的图片选择开源库，虽然大家一直都推崇不要重复造轮子这个观念，但是我却不这么认为，同样是轮子，也有不同价格、不同品牌的呢，难不成有了一个制造商生产了轮子，其他厂商就没必要做了吗？所以说，重复造轮子也是有意义的，至少你知道轮子是怎么造的。</p>
<a id="more"></a>
<p>好了，闲话不多说，先看看效果图：</p>
<p>1、图片选择效果<br><img src="http://7xnqm4.com1.z0.glb.clouddn.com/photo-picker-sample01.png?watermark/1/image/aHR0cDovLzd4bnFtNC5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS93YXRlcm1hcmsucG5n/dissolve/50/gravity/SouthEast" alt="Android高仿微信图片选择功能的PhotoPicker示例图片1" title="Android高仿微信图片选择功能的PhotoPicker示例图片1"></p>
<p>2、弹出文件夹选择效果：<br><img src="http://7xnqm4.com1.z0.glb.clouddn.com/photo-picker-sample02.png?watermark/1/image/aHR0cDovLzd4bnFtNC5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS93YXRlcm1hcmsucG5n/dissolve/50/gravity/SouthEast" alt="Android高仿微信图片选择功能的PhotoPicker示例图片2" title="Android高仿微信图片选择功能的PhotoPicker示例图片2"></p>
<p>这里博主还是只模范微信的头像选择功能，也就是单张图片的选取。而微信发送图片消息的多张图片选择，暂时还没有做。主要是博主现在要学习C++，要快速熟悉cocos2dx的开发，没有时间去弄。后面有时间会把多图选择功能加上。</p>
<p>博主测试3部手机，vivo x3s 826张图片、联想A800 1231张、中兴V955 762张均为出现OOM，且图片加载很流畅。由于测试覆盖率不够，程序难免还会存在一些bug，如果有还望各位不吝指正，谢谢！</p>
<p>这里代码我就不贴了，需要的直接去博主github上fork源码，欢迎fork和star。</p>
<p>源码地址：<a href="https://github.com/liuling07/PhotoPicker" target="_blank" rel="external">https://github.com/liuling07/PhotoPicker</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>类似于微信修改头像的功能基本上每个app都会有，以前公司开发的项目就有修改头像的功能，但是用的Android系统自带的图片选择器。用Android系统的图片选择器有个好处就是稳定，不会有什么问题。但也有它的缺点，比如不可定制，我们想要修改一下符合自己app的风格无法做到。</p>
<p>既然大部分app都要用到图片选择器，为啥我不自己写一个呢？难不成每次都用系统自带的？那显得太没水平。所以，我就有了一个自己编写一个图片选择器的想法，以后只要有项目需要这个功能，直接拿来用就行了，这多爽！</p>
<p>其实github上也有很多大牛写的图片选择开源库，虽然大家一直都推崇不要重复造轮子这个观念，但是我却不这么认为，同样是轮子，也有不同价格、不同品牌的呢，难不成有了一个制造商生产了轮子，其他厂商就没必要做了吗？所以说，重复造轮子也是有意义的，至少你知道轮子是怎么造的。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="图片选择" scheme="http://www.liuling123.com/tags/%E5%9B%BE%E7%89%87%E9%80%89%E6%8B%A9/"/>
    
      <category term="开源" scheme="http://www.liuling123.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[科学上网工具Lantern，轻松访问Google、Facebook等被墙网站]]></title>
    <link href="http://www.liuling123.com/2015/11/lantern.html"/>
    <id>http://www.liuling123.com/2015/11/lantern.html</id>
    <published>2015-11-11T14:13:18.000Z</published>
    <updated>2016-01-03T03:00:03.000Z</updated>
    <content type="html"><![CDATA[<p>给大家推荐一个科学上网的工具，轻松就可以访问google、facebook等被墙的网站：<a href="https://github.com/liuling07/Lantern" target="_blank" rel="external">下载Lantern</a></p>
<p>下载lantern.exe.fbd文件，将.fbd后缀去掉，双击运行即可。可能360会阻止运行，要点击允许。</p>
<p>如下图：<br><a href="http://www.liuling123.com/wp-content/uploads/2015/11/QQ图片20151111215158.png"><img src="http://www.liuling123.com/wp-content/uploads/2015/11/QQ图片20151111215158-300x129.png" alt="科学上网工具"></a></p>
<p>该工具只能用于PC端浏览器浏览被墙网站，一般查资料够用了。如果需要玩游戏或者其他用途，建议还是买VPN。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>给大家推荐一个科学上网的工具，轻松就可以访问google、facebook等被墙的网站：<a href="https://github.com/liuling07/Lantern" target="_blank" rel="external">下载Lantern</a></]]>
    </summary>
    
      <category term="科学上网" scheme="http://www.liuling123.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="其他技术" scheme="http://www.liuling123.com/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL导入数据报Got a packet bigger than‘max_allowed_packet’bytes错误的解决方法]]></title>
    <link href="http://www.liuling123.com/2015/11/max-allowed-packet.html"/>
    <id>http://www.liuling123.com/2015/11/max-allowed-packet.html</id>
    <published>2015-11-11T13:00:54.000Z</published>
    <updated>2016-01-03T03:00:03.000Z</updated>
    <content type="html"><![CDATA[<p>   今天将博客的数据库进行了迁移，在执行sql脚本的时候报了Got a packet bigger than‘max_allowed_packet’bytes的错误，上网搜了一下，发现是由于max_allowed_packet的值设置过小的原因，知道原因就好办了，只需要将max_allowed_packet值设置大一点就OK了。<br>   通过终端进入mysql控制台，输入如下命令可以查看max_allowed_packet值的大小。<br>   show VARIABLES like ‘%max_allowed_packet%’;<br>显示的结果为：</p>
<p>+——————–+———+<br>| Variable_name      | Value   |<br>+——————–+———+<br>| max_allowed_packet | 1048576 |<br>+——————–+———+</p>
<p>以上说明目前的配置是：1M<br>执行一下命令可以将max_allowed_packet的值设置大一点：<br>set global max_allowed_packet = 2<em>1024</em>1024*10<br>退出mysql命令行，然后重新登录。<br>show VARIABLES like ‘%max_allowed_packet%’;</p>
<p>设置完之后，再重新导入数据，OK，一切正常。</p>
<p>注意，使用这种方法，重启服务器之后又恢复默认值了。这里博主只是导数据的时候临时将其值设置大一点，导完之后尽量让其恢复原值，因为max_allowed_packet设置过大可能会导致服务器太忙来不及接收，网络差的时候也可能会出现丢包的现象。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>   今天将博客的数据库进行了迁移，在执行sql脚本的时候报了Got a packet bigger than‘max_allowed_packet’bytes的错误，上网搜了一下，发现是由于max_allowed_packet的值设置过小的原因，知道原因就好办了，只需要将]]>
    </summary>
    
      <category term="mysql" scheme="http://www.liuling123.com/tags/mysql/"/>
    
      <category term="其他技术" scheme="http://www.liuling123.com/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++学习随笔]]></title>
    <link href="http://www.liuling123.com/2015/11/cpp-study.html"/>
    <id>http://www.liuling123.com/2015/11/cpp-study.html</id>
    <published>2015-11-10T11:28:33.000Z</published>
    <updated>2016-01-03T07:07:40.000Z</updated>
    <content type="html"><![CDATA[<p>最近由于公司部门调整，博主被安排去做游戏开发了，使用的是cocos2d游戏引擎，开发语言为C++。所以硬着头皮边熟悉cocos2d边学C++。对于写了多年Java的来说，看C++代码很坑爹有木有。<br>但是作为Android工程师，C/C++还是有必要学的，因为Android系统源码大部分都是C写的。之前看过一段时间的Android源码，看到C++部分也是比较吃力，现在借此机会学学C++也是挺不错的。<br>下面简单记录在学习C++过程中遇到的一些不懂的东西（持续更新）。</p>
<p><strong>std::nothrow</strong></p>
<p>在内存不足时，new (std::nothrow)并不抛出异常，而是将指针置NULL。<br>如：auto layer = new (std::nothrow) FirstLayer();</p>
<p><strong>auto</strong><br>auto是C++11的新特性，自动类型推断，用于从初始化表达式中推断出变量的数据类型，有点类似于js中的弱类型var。<br><a id="more"></a><br><strong>#pragma once</strong><br>只要在头文件的最开始加入这条杂注，就能够保证头文件只被编译一次。但是是依赖编译器的，可以使用宏定义#ifndef</p>
<p><strong>#ifndef，#define，#endif</strong><br>C/C++语言中的宏定义，通过宏定义避免文件多次编译</p>
<p><strong>#if与if的区别</strong></p>
<p>#endif//与#if对应<br>作为一个编译“开关”，比如：   </p>
<p>#if(条件满足)<br>  执行代码1   </p>
<p>#else<br>  执行代码2   </p>
<p>#endif<br>假如编译时，确实满足条件，则生成的程序文件(.exe文件)中不会有执行代码2的。如果用普通if语句，生成的程序文件就会有执行代码2，这个区别看看生成文件大小就可以知道。如果你的条件在程序编译前就已经确定了，那就用#if；如果条件需要在程序运行过程中才能判断，则用if。</p>
<p><strong>static_cast</strong><br>用法：static_cast &lt; type-id &gt; ( expression )<br>该运算符把expression转换为type-id类型，但没有运行时类型检查来保证转换的安全性。有点类似于Java中的强制转换。</p>
<p><strong>string与int拼接</strong><br>1、stringstream拼接string与int</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &lt;&lt; <span class="string">"old:"</span>&lt;&lt; GameOverScene::goldNum &lt;&lt; <span class="string">",distance:"</span> &lt;&lt; GameOverScene::distance;</span><br><span class="line">LabelTTF* goldAndDistanceLabel = LabelTTF::create(ss.str(), <span class="string">"Arial"</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>
<p>2、sprintf函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> countBuf[<span class="number">16</span>] = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(countBuf, <span class="string">"distance:%d"</span>, mDistance);</span><br></pre></td></tr></table></figure>
<p>3、std::to_string函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"run0"</span> + <span class="built_in">std</span>::to_string(i) + <span class="string">".png"</span>;</span><br></pre></td></tr></table></figure>
<p>安卓没有to_string这个函数，eclipse中编译出错，为了跨平台，尽量使用stringstream或者sprintf</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近由于公司部门调整，博主被安排去做游戏开发了，使用的是cocos2d游戏引擎，开发语言为C++。所以硬着头皮边熟悉cocos2d边学C++。对于写了多年Java的来说，看C++代码很坑爹有木有。<br>但是作为Android工程师，C/C++还是有必要学的，因为Android系统源码大部分都是C写的。之前看过一段时间的Android源码，看到C++部分也是比较吃力，现在借此机会学学C++也是挺不错的。<br>下面简单记录在学习C++过程中遇到的一些不懂的东西（持续更新）。</p>
<p><strong>std::nothrow</strong></p>
<p>在内存不足时，new (std::nothrow)并不抛出异常，而是将指针置NULL。<br>如：auto layer = new (std::nothrow) FirstLayer();</p>
<p><strong>auto</strong><br>auto是C++11的新特性，自动类型推断，用于从初始化表达式中推断出变量的数据类型，有点类似于js中的弱类型var。<br>]]>
    
    </summary>
    
      <category term="c++" scheme="http://www.liuling123.com/tags/c/"/>
    
      <category term="其他技术" scheme="http://www.liuling123.com/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
