<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[残剑博客]]></title>
  <subtitle><![CDATA[技术成长之路]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.liuling123.com/"/>
  <updated>2016-01-12T13:38:36.000Z</updated>
  <id>http://www.liuling123.com/</id>
  
  <author>
    <name><![CDATA[Lauren]]></name>
    <email><![CDATA[lauren.liuling@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[EventBus源码解析]]></title>
    <link href="http://www.liuling123.com/2016/01/EventBus-source.html"/>
    <id>http://www.liuling123.com/2016/01/EventBus-source.html</id>
    <published>2016-01-12T13:29:00.000Z</published>
    <updated>2016-01-12T13:38:36.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>前面一篇文章讲解了EventBus的使用，但是作为开发人员，不能只停留在仅仅会用的层面上，我们还需要弄清楚它的内部实现原理。所以本篇博文将分析EventBus的源码，看看究竟它是如何实现“发布/订阅”功能的。</p>
<p>相关文章<br><a href="http://liuling123.com/2016/01/EventBus-explain.html" target="_blank" rel="external">EventBus使用详解</a><br><a href="http://liuling123.com/2016/01/EventBus-source.html" target="_blank" rel="external">EventBus源码解析</a></p>
</blockquote>
<h3 id="u4E8B_u4EF6_u6CE8_u518C"><a href="#u4E8B_u4EF6_u6CE8_u518C" class="headerlink" title="事件注册"></a>事件注册</h3><p>根据前一讲<a href="http://liuling123.com/2016/01/EventBus-explain.html" target="_blank" rel="external">EventBus使用详解</a>我们已经知道EventBus使用首先是需要注册的，注册事件的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().register(this);</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>EventBus对外提供了一个register方法来进行事件注册，该方法接收一个Object类型的参数，下面看下register方法的源码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void register(Object subscriber) &#123;&#10;    Class&#60;?&#62; subscriberClass = subscriber.getClass();&#10;    // &#21028;&#26029;&#35813;&#31867;&#26159;&#21542;&#26159;&#21311;&#21517;&#20869;&#37096;&#31867;&#10;    boolean forceReflection = subscriberClass.isAnonymousClass();&#10;    List&#60;SubscriberMethod&#62; subscriberMethods =&#10;            subscriberMethodFinder.findSubscriberMethods(subscriberClass, forceReflection);&#10;    for (SubscriberMethod subscriberMethod : subscriberMethods) &#123;&#10;        subscribe(subscriber, subscriberMethod);&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>该方法首先获取获取传进来参数的Class对象，然后判断该类是否是匿名内部类。然后根据这两个参数通过subscriberMethodFinder.findSubscriberMethods方法获取所有的事件处理方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&#60;SubscriberMethod&#62; findSubscriberMethods(Class&#60;?&#62; subscriberClass, boolean forceReflection) &#123;&#10;    String key = subscriberClass.getName();&#10;    List&#60;SubscriberMethod&#62; subscriberMethods;&#10;    synchronized (METHOD_CACHE) &#123;&#10;        subscriberMethods = METHOD_CACHE.get(key);&#10;    &#125;&#10;    if (subscriberMethods != null) &#123;&#10;        //&#32531;&#23384;&#21629;&#20013;&#65292;&#30452;&#25509;&#36820;&#22238;&#10;        return subscriberMethods;&#10;    &#125;&#10;    if (INDEX != null &#38;&#38; !forceReflection) &#123;&#10;        // &#22914;&#26524;INDEX&#19981;&#20026;&#31354;&#65292;&#24182;&#19988;subscriberClass&#20026;&#38750;&#21311;&#21517;&#20869;&#37096;&#31867;&#65292;&#10;        // &#21017;&#36890;&#36807;findSubscriberMethodsWithIndex&#26041;&#27861;&#26597;&#25214;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#10;        subscriberMethods = findSubscriberMethodsWithIndex(subscriberClass);&#10;        if (subscriberMethods.isEmpty()) &#123;&#10;            //&#22914;&#26524;&#32467;&#26524;&#20026;&#31354;&#65292;&#21017;&#20351;&#29992;findSubscriberMethodsWithReflection&#26041;&#27861;&#20877;&#26597;&#25214;&#19968;&#27425;&#10;            subscriberMethods = findSubscriberMethodsWithReflection(subscriberClass);&#10;        &#125;&#10;    &#125; else &#123;&#10;        //INDEX&#20026;&#31354;&#25110;&#32773;subscriberClass&#26410;&#21311;&#21517;&#20869;&#37096;&#31867;&#65292;&#20351;&#29992;findSubscriberMethodsWithReflection&#26041;&#27861;&#26597;&#25214;&#10;        subscriberMethods = findSubscriberMethodsWithReflection(subscriberClass);&#10;    &#125;&#10;    if (subscriberMethods.isEmpty()) &#123;&#10;        throw new EventBusException(&#34;Subscriber &#34; + subscriberClass&#10;                + &#34; and its super classes have no public methods with the @Subscribe annotation&#34;);&#10;    &#125; else &#123;&#10;        //&#23384;&#20837;&#32531;&#23384;&#24182;&#36820;&#22238;&#10;        synchronized (METHOD_CACHE) &#123;&#10;            METHOD_CACHE.put(key, subscriberMethods);&#10;        &#125;&#10;        return subscriberMethods;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>通过名字我们就知道这个方法是获取subscriberClass类中所有的事件处理方法（即使用了@Subscribe的方法）。该方法首先会从缓存METHOD_CACHE中去获取事件处理方法，如果缓存中不存在，则需要通过findSubscriberMethodsWithIndex或者findSubscriberMethodsWithReflection方法获取所有事件处理方法，获取到之后先存入缓存再返回。</p>
<p>这个方法里面有个INDEX对象，我们看看它是个什么鬼：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/** Optional generated index without entries from subscribers super classes */&#10;private static final SubscriberIndex INDEX;&#10;&#10;static &#123;&#10;    SubscriberIndex newIndex = null;&#10;    try &#123;&#10;        Class&#60;?&#62; clazz = Class.forName(&#34;de.greenrobot.event.GeneratedSubscriberIndex&#34;);&#10;        newIndex = (SubscriberIndex) clazz.newInstance();&#10;    &#125; catch (ClassNotFoundException e) &#123;&#10;        Log.d(EventBus.TAG, &#34;No subscriber index available, reverting to dynamic look-up&#34;);&#10;        // Fine&#10;    &#125; catch (Exception e) &#123;&#10;        Log.w(EventBus.TAG, &#34;Could not init subscriber index, reverting to dynamic look-up&#34;, e);&#10;    &#125;&#10;    INDEX = newIndex;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>由上面代码可以看出EventBus会试图加载一个de.greenrobot.event.GeneratedSubscriberIndex类并创建对象赋值给INDEX，但是EventBus3.0 beta并没有为我们提供该类（可能后续版本会提供）。所以INDEX为null。</p>
<p>我们再返回findSubscriberMethods方法，我们知道INDEX已经为null了，所以必然会调用findSubscriberMethodsWithReflection方法查找所有事件处理函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private List&#60;SubscriberMethod&#62; findSubscriberMethodsWithReflection(Class&#60;?&#62; subscriberClass) &#123;&#10;    List&#60;SubscriberMethod&#62; subscriberMethods = new ArrayList&#60;SubscriberMethod&#62;();&#10;    Class&#60;?&#62; clazz = subscriberClass;&#10;    HashSet&#60;String&#62; eventTypesFound = new HashSet&#60;String&#62;();&#10;    StringBuilder methodKeyBuilder = new StringBuilder();&#10;    while (clazz != null) &#123;&#10;        String name = clazz.getName();&#10;        // &#22914;&#26524;&#26597;&#25214;&#30340;&#31867;&#26159;java&#12289;javax&#25110;&#32773;android&#21253;&#19979;&#38754;&#30340;&#31867;&#65292;&#21017;&#36807;&#28388;&#25481;&#10;        if (name.startsWith(&#34;java.&#34;) || name.startsWith(&#34;javax.&#34;) || name.startsWith(&#34;android.&#34;)) &#123;&#10;            // Skip system classes, this just degrades performance&#10;            break;&#10;        &#125;&#10;&#10;        // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again)&#10;        // &#36890;&#36807;&#21453;&#23556;&#26597;&#25214;&#25152;&#26377;&#35813;&#31867;&#20013;&#25152;&#26377;&#26041;&#27861;&#10;        Method[] methods = clazz.getDeclaredMethods();&#10;        for (Method method : methods) &#123;&#10;            int modifiers = method.getModifiers();&#10;            // &#20107;&#20214;&#22788;&#29702;&#26041;&#27861;&#24517;&#39035;&#20026;public&#65292;&#36825;&#37324;&#36807;&#28388;&#25481;&#25152;&#26377;&#38750;public&#26041;&#27861;&#10;            if ((modifiers &#38; Modifier.PUBLIC) != 0 &#38;&#38; (modifiers &#38; MODIFIERS_IGNORE) == 0) &#123;&#10;                Class&#60;?&#62;[] parameterTypes = method.getParameterTypes();&#10;                // &#20107;&#20214;&#22788;&#29702;&#26041;&#27861;&#24517;&#39035;&#21482;&#26377;&#19968;&#20010;&#21442;&#25968;&#10;                if (parameterTypes.length == 1) &#123;&#10;                    Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);&#10;                    if (subscribeAnnotation != null) &#123;&#10;                        String methodName = method.getName();&#10;                        Class&#60;?&#62; eventType = parameterTypes[0];&#10;                        methodKeyBuilder.setLength(0);&#10;                        methodKeyBuilder.append(methodName);&#10;                        methodKeyBuilder.append(&#39;&#62;&#39;).append(eventType.getName());&#10;&#10;                        String methodKey = methodKeyBuilder.toString();&#10;                        if (eventTypesFound.add(methodKey)) &#123;&#10;                            // Only add if not already found in a sub class&#10;                            // &#21482;&#26377;&#22312;&#23376;&#31867;&#20013;&#27809;&#26377;&#25214;&#21040;&#65292;&#25165;&#20250;&#28155;&#21152;&#21040;subscriberMethods&#10;                            ThreadMode threadMode = subscribeAnnotation.threadMode();&#10;                            subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,&#10;                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky()));&#10;                        &#125;&#10;                    &#125;&#10;                &#125; else if (strictMethodVerification) &#123;&#10;                    // &#22914;&#26524;&#26576;&#20010;&#26041;&#27861;&#21152;&#20102;@Subscribe&#27880;&#35299;&#65292;&#24182;&#19988;&#19981;&#26159;1&#20010;&#21442;&#25968;&#65292;&#21017;&#25243;&#20986;EventBusException&#24322;&#24120;&#10;                    if (method.isAnnotationPresent(Subscribe.class)) &#123;&#10;                        String methodName = name + &#34;.&#34; + method.getName();&#10;                        throw new EventBusException(&#34;@Subscribe method &#34; + methodName +&#10;                                &#34;must have exactly 1 parameter but has &#34; + parameterTypes.length);&#10;                    &#125;&#10;                &#125;&#10;            &#125; else if (strictMethodVerification) &#123;&#10;                // &#22914;&#26524;&#26576;&#20010;&#26041;&#27861;&#21152;&#20102;@Subscribe&#27880;&#35299;&#65292;&#24182;&#19988;&#19981;&#26159;public&#20462;&#39280;&#65292;&#21017;&#25243;&#20986;EventBusException&#24322;&#24120;&#10;                if (method.isAnnotationPresent(Subscribe.class)) &#123;&#10;                    String methodName = name + &#34;.&#34; + method.getName();&#10;                    throw new EventBusException(methodName +&#10;                            &#34; is a illegal @Subscribe method: must be public, non-static, and non-abstract&#34;);&#10;                &#125;&#10;&#10;            &#125;&#10;        &#125;&#10;        // &#20250;&#32487;&#32493;&#26597;&#25214;&#29238;&#31867;&#30340;&#26041;&#27861;&#10;        clazz = clazz.getSuperclass();&#10;    &#125;&#10;    return subscriberMethods;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>该方法主要作用就是找出subscriberClass类以及subscriberClass的父类中所有的事件处理方法（添加了@Subscribe注解，访问修饰符为public并且只有一个参数）。值得注意的是：如果子类与父类中同时存在了相同事件处理函数，则父类中的不会被添加到subscriberMethods。</p>
<p>好了，查找事件处理函数的过程已经完了，我们继续回到register方法中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (SubscriberMethod subscriberMethod : subscriberMethods) &#123;&#10;    subscribe(subscriber, subscriberMethod);&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>找到事件处理函数后，会遍历找到的所有事件处理函数并调用subscribe方法将所有事件处理函数注册到EventBus中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) &#123;&#10;    Class&#60;?&#62; eventType = subscriberMethod.eventType;&#10;    // &#33719;&#21462;&#35746;&#38405;&#20102;&#26576;&#31181;&#31867;&#22411;&#25968;&#25454;&#30340; Subscription &#12290; &#20351;&#29992;&#20102; CopyOnWriteArrayList &#65292;&#36825;&#20010;&#26159;&#32447;&#31243;&#23433;&#20840;&#30340;&#65292;&#10;    // CopyOnWriteArrayList &#20250;&#22312;&#26356;&#26032;&#30340;&#26102;&#20505;&#65292;&#37325;&#26032;&#29983;&#25104;&#19968;&#20221; copy&#65292;&#20854;&#20182;&#32447;&#31243;&#20351;&#29992;&#30340;&#26159; &#10;    // copy&#65292;&#19981;&#23384;&#22312;&#20160;&#20040;&#32447;&#31243;&#23433;&#20840;&#24615;&#30340;&#38382;&#39064;&#12290;&#10;    CopyOnWriteArrayList&#60;Subscription&#62; subscriptions = subscriptionsByEventType.get(eventType);&#10;    Subscription newSubscription = new Subscription(subscriber, subscriberMethod);&#10;    if (subscriptions == null) &#123;&#10;        subscriptions = new CopyOnWriteArrayList&#60;Subscription&#62;();&#10;        subscriptionsByEventType.put(eventType, subscriptions);&#10;    &#125; else &#123;&#10;        //&#22914;&#26524;&#24050;&#32463;&#34987;&#27880;&#20876;&#36807;&#20102;&#65292;&#21017;&#25243;&#20986;EventBusException&#24322;&#24120;&#10;        if (subscriptions.contains(newSubscription)) &#123;&#10;            throw new EventBusException(&#34;Subscriber &#34; + subscriber.getClass() + &#34; already registered to event &#34;&#10;                    + eventType);&#10;        &#125;&#10;    &#125;&#10;&#10;    // Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again)&#10;    // subscriberMethod.method.setAccessible(true);&#10;&#10;    // Got to synchronize to avoid shifted positions when adding/removing concurrently&#10;    // &#26681;&#25454;&#20248;&#20808;&#32423;&#23558;newSubscription&#26597;&#21040;&#21512;&#36866;&#20301;&#32622;&#10;    synchronized (subscriptions) &#123;&#10;        int size = subscriptions.size();&#10;        for (int i = 0; i &#60;= size; i++) &#123;&#10;            if (i == size || subscriberMethod.priority &#62; subscriptions.get(i).subscriberMethod.priority) &#123;&#10;                subscriptions.add(i, newSubscription);&#10;                break;&#10;            &#125;&#10;        &#125;&#10;    &#125;&#10;&#10;    //&#23558;&#22788;&#29702;&#20107;&#20214;&#31867;&#22411;&#28155;&#21152;&#21040;typesBySubscriber&#10;    List&#60;Class&#60;?&#62;&#62; subscribedEvents = typesBySubscriber.get(subscriber);&#10;    if (subscribedEvents == null) &#123;&#10;        subscribedEvents = new ArrayList&#60;Class&#60;?&#62;&#62;();&#10;        typesBySubscriber.put(subscriber, subscribedEvents);&#10;    &#125;&#10;    subscribedEvents.add(eventType);&#10;&#10;    // &#22914;&#26524;&#35813;&#20107;&#20214;&#22788;&#29702;&#26041;&#27861;&#20026;&#31896;&#24615;&#20107;&#20214;&#65292;&#21363;&#35774;&#32622;&#20102;&#8220;sticky = true&#8221;&#65292;&#21017;&#38656;&#35201;&#35843;&#29992;checkPostStickyEventToSubscription&#10;    // &#21028;&#26029;&#26159;&#21542;&#26377;&#31896;&#24615;&#20107;&#20214;&#38656;&#35201;&#22788;&#29702;&#65292;&#22914;&#26524;&#38656;&#35201;&#22788;&#29702;&#21017;&#35302;&#21457;&#19968;&#27425;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#10;    if (subscriberMethod.sticky) &#123;&#10;        if (eventInheritance) &#123;&#10;            // Existing sticky events of all subclasses of eventType have to be considered.&#10;            // Note: Iterating over all events may be inefficient with lots of sticky events,&#10;            // thus data structure should be changed to allow a more efficient lookup&#10;            // (e.g. an additional map storing sub classes of super classes: Class -&#62; List&#60;Class&#62;).&#10;            Set&#60;Map.Entry&#60;Class&#60;?&#62;, Object&#62;&#62; entries = stickyEvents.entrySet();&#10;            for (Map.Entry&#60;Class&#60;?&#62;, Object&#62; entry : entries) &#123;&#10;                Class&#60;?&#62; candidateEventType = entry.getKey();&#10;                if (eventType.isAssignableFrom(candidateEventType)) &#123;&#10;                    Object stickyEvent = entry.getValue();&#10;                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);&#10;                &#125;&#10;            &#125;&#10;        &#125; else &#123;&#10;            Object stickyEvent = stickyEvents.get(eventType);&#10;            checkPostStickyEventToSubscription(newSubscription, stickyEvent);&#10;        &#125;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果事件处理函数设置了“sticky = true”，则会调用checkPostStickyEventToSubscription处理粘性事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private void checkPostStickyEventToSubscription(Subscription newSubscription, Object stickyEvent) &#123;&#10;    if (stickyEvent != null) &#123;&#10;        // If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)&#10;        // --&#62; Strange corner case, which we don&#39;t take care of here.&#10;        postToSubscription(newSubscription, stickyEvent, Looper.getMainLooper() == Looper.myLooper());&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果存在粘性事件，则立即调用postToSubscription触发该事件的事件处理函数。postToSubscription函数后面讲post时会讲到。</p>
<p>至此，整个register过程就介绍完了。<br>总结一下，整个过程分为3步：  </p>
<ol>
<li>查找注册的类中所有的事件处理函数（添加了@Subscribe注解且访问修饰符为public的方法）  </li>
<li>将所有事件处理函数注册到EventBus  </li>
<li>如果有事件处理函数设置了“sticky = true”，则立即处理该事件  </li>
</ol>
<h3 id="post_u4E8B_u4EF6"><a href="#post_u4E8B_u4EF6" class="headerlink" title="post事件"></a>post事件</h3><p>register过程讲完后，我们知道了EventBus如何找到我们定义好的事件处理函数。有了这些事件处理函数，当post相应事件的时候，EventBus就会触发订阅该事件的处理函数。具体post过程是怎样的呢？我们看看代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void post(Object event) &#123;&#10;    PostingThreadState postingState = currentPostingThreadState.get();&#10;    List&#60;Object&#62; eventQueue = postingState.eventQueue;&#10;    eventQueue.add(event);&#10;&#10;    if (!postingState.isPosting) &#123;&#10;        // &#26631;&#35782;post&#30340;&#32447;&#31243;&#26159;&#21542;&#26159;&#20027;&#32447;&#31243;&#10;        postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();&#10;        postingState.isPosting = true;&#10;        if (postingState.canceled) &#123;&#10;            throw new EventBusException(&#34;Internal error. Abort state was not reset&#34;);&#10;        &#125;&#10;        try &#123;&#10;            // &#24490;&#29615;&#22788;&#29702;eventQueue&#20013;&#30340;&#27599;&#19968;&#20010;event&#23545;&#35937;&#10;            while (!eventQueue.isEmpty()) &#123;&#10;                postSingleEvent(eventQueue.remove(0), postingState);&#10;            &#125;&#10;        &#125; finally &#123;&#10;            // &#22788;&#29702;&#23436;&#20043;&#21518;&#37325;&#32622;postingState&#30340;&#19968;&#20123;&#26631;&#35782;&#20449;&#24687;&#10;            postingState.isPosting = false;&#10;            postingState.isMainThread = false;&#10;        &#125;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>currentPostingThreadState是一个ThreadLocal类型，里面存储了PostingThreadState；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private final ThreadLocal&#60;PostingThreadState&#62; currentPostingThreadState = new ThreadLocal&#60;PostingThreadState&#62;() &#123;&#10;    @Override&#10;    protected PostingThreadState initialValue() &#123;&#10;        return new PostingThreadState();&#10;    &#125;&#10;&#125;;&#10;&#10;/** For ThreadLocal, much faster to set (and get multiple values). */&#10;final static class PostingThreadState &#123;&#10;    final List&#60;Object&#62; eventQueue = new ArrayList&#60;Object&#62;();&#10;    boolean isPosting;&#10;    boolean isMainThread;&#10;    Subscription subscription;&#10;    Object event;&#10;    boolean canceled;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>PostingThreadState包含了一个事件队列eventQueue和一些标志信息。eventQueue存放所有待post的事件对象。</p>
<p>我们再回到post方法，首先会将event对象添加到事件队列eventQueue中。然后判断是否有事件正在post，如果没有则会遍历eventQueue中每一个event对象，并且调用postSingleEvent方法post该事件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private void postSingleEvent(Object event, PostingThreadState postingState) throws Error &#123;&#10;    Class&#60;?&#62; eventClass = event.getClass();&#10;    boolean subscriptionFound = false;&#10;    if (eventInheritance) &#123;&#10;        // &#22914;&#26524;&#20801;&#35768;&#20107;&#20214;&#32487;&#25215;&#65292;&#21017;&#20250;&#35843;&#29992;lookupAllEventTypes&#26597;&#25214;&#25152;&#26377;&#30340;&#29238;&#31867;&#21644;&#25509;&#21475;&#31867;&#10;        List&#60;Class&#60;?&#62;&#62; eventTypes = lookupAllEventTypes(eventClass);&#10;        int countTypes = eventTypes.size();&#10;        for (int h = 0; h &#60; countTypes; h++) &#123;&#10;            Class&#60;?&#62; clazz = eventTypes.get(h);&#10;            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);&#10;        &#125;&#10;    &#125; else &#123;&#10;        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);&#10;    &#125;&#10;    if (!subscriptionFound) &#123;&#10;        if (logNoSubscriberMessages) &#123;&#10;            Log.d(TAG, &#34;No subscribers registered for event &#34; + eventClass);&#10;        &#125;&#10;        if (sendNoSubscriberEvent &#38;&#38; eventClass != NoSubscriberEvent.class &#38;&#38;&#10;                eventClass != SubscriberExceptionEvent.class) &#123;&#10;            // &#22914;&#26524;post&#30340;&#20107;&#20214;&#27809;&#26377;&#34987;&#27880;&#20876;&#65292;&#21017;post&#19968;&#20010;NoSubscriberEvent&#20107;&#20214;&#10;            post(new NoSubscriberEvent(this, event));&#10;        &#125;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>如果允许事件继承，则会调用lookupAllEventTypes查找所有的父类和接口类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private List&#60;Class&#60;?&#62;&#62; lookupAllEventTypes(Class&#60;?&#62; eventClass) &#123;&#10;    synchronized (eventTypesCache) &#123;&#10;        List&#60;Class&#60;?&#62;&#62; eventTypes = eventTypesCache.get(eventClass);&#10;        if (eventTypes == null) &#123;&#10;            eventTypes = new ArrayList&#60;Class&#60;?&#62;&#62;();&#10;            Class&#60;?&#62; clazz = eventClass;&#10;            while (clazz != null) &#123;&#10;                eventTypes.add(clazz);&#10;                addInterfaces(eventTypes, clazz.getInterfaces());&#10;                clazz = clazz.getSuperclass();&#10;            &#125;&#10;            eventTypesCache.put(eventClass, eventTypes);&#10;        &#125;&#10;        return eventTypes;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个方法很简单，就是查找eventClass类的所有父类和接口，并将其保存到eventTypesCache中，方便下次使用。<br>我们再回到postSingleEvent方法。不管允不允许事件继承，都会执行postSingleEventForEventType方法post事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class&#60;?&#62; eventClass) &#123;&#10;    CopyOnWriteArrayList&#60;Subscription&#62; subscriptions;&#10;    synchronized (this) &#123;&#10;        subscriptions = subscriptionsByEventType.get(eventClass);&#10;    &#125;&#10;    if (subscriptions != null &#38;&#38; !subscriptions.isEmpty()) &#123;&#10;        for (Subscription subscription : subscriptions) &#123;&#10;            postingState.event = event;&#10;            postingState.subscription = subscription;&#10;            boolean aborted = false;&#10;            try &#123;&#10;                postToSubscription(subscription, event, postingState.isMainThread);&#10;                aborted = postingState.canceled;&#10;            &#125; finally &#123;&#10;                postingState.event = null;&#10;                postingState.subscription = null;&#10;                postingState.canceled = false;&#10;            &#125;&#10;            if (aborted) &#123;&#10;                break;&#10;            &#125;&#10;        &#125;&#10;        return true;&#10;    &#125;&#10;    return false;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>在postSingleEventForEventType方法中，会已eventClass为key从subscriptionsByEventType对象中获取Subscription列表。在上面讲register的时候我们已经看到EventBus在register的时候会将Subscription列表存储在subscriptionsByEventType中。接下来会遍历subscriptions列表然后调用postToSubscription方法进行下一步处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) &#123;&#10;    switch (subscription.subscriberMethod.threadMode) &#123;&#10;        case PostThread:&#10;            // &#22914;&#26524;&#35813;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#27809;&#26377;&#25351;&#23450;&#32447;&#31243;&#27169;&#22411;&#25110;&#32773;&#32447;&#31243;&#27169;&#22411;&#20026;PostThread&#10;            // &#21017;&#35843;&#29992;invokeSubscriber&#22312;post&#30340;&#32447;&#31243;&#20013;&#25191;&#34892;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#10;            invokeSubscriber(subscription, event);&#10;            break;&#10;        case MainThread:&#10;            // &#22914;&#26524;&#35813;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#25351;&#23450;&#30340;&#32447;&#31243;&#27169;&#22411;&#20026;MainThread&#10;            // &#24182;&#19988;&#24403;&#21069;post&#30340;&#32447;&#31243;&#20026;&#20027;&#32447;&#31243;&#65292;&#21017;&#35843;&#29992;invokeSubscriber&#22312;&#24403;&#21069;&#32447;&#31243;&#65288;&#20027;&#32447;&#31243;&#65289;&#20013;&#25191;&#34892;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#10;            // &#22914;&#26524;post&#30340;&#32447;&#31243;&#19981;&#26159;&#20027;&#32447;&#31243;&#65292;&#23558;&#20351;&#29992;mainThreadPoster.enqueue&#35813;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#28155;&#21152;&#21040;&#20027;&#32447;&#31243;&#30340;&#28040;&#24687;&#38431;&#21015;&#20013;&#10;            if (isMainThread) &#123;&#10;                invokeSubscriber(subscription, event);&#10;            &#125; else &#123;&#10;                mainThreadPoster.enqueue(subscription, event);&#10;            &#125;&#10;            break;&#10;        case BackgroundThread:&#10;            // &#22914;&#26524;&#35813;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#25351;&#23450;&#30340;&#32447;&#31243;&#27169;&#22411;&#20026;BackgroundThread&#10;            // &#24182;&#19988;&#24403;&#21069;post&#30340;&#32447;&#31243;&#20026;&#20027;&#32447;&#31243;&#65292;&#21017;&#35843;&#29992;backgroundPoster.enqueue&#10;            // &#22914;&#26524;post&#30340;&#32447;&#31243;&#19981;&#26159;&#20027;&#32447;&#31243;&#65292;&#21017;&#35843;&#29992;invokeSubscriber&#22312;&#24403;&#21069;&#32447;&#31243;&#65288;&#38750;&#20027;&#32447;&#31243;&#65289;&#20013;&#25191;&#34892;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#10;            if (isMainThread) &#123;&#10;                backgroundPoster.enqueue(subscription, event);&#10;            &#125; else &#123;&#10;                invokeSubscriber(subscription, event);&#10;            &#125;&#10;            break;&#10;        case Async:&#10;            //&#28155;&#21152;&#21040;&#24322;&#27493;&#32447;&#31243;&#38431;&#21015;&#20013;&#10;            asyncPoster.enqueue(subscription, event);&#10;            break;&#10;        default:&#10;            throw new IllegalStateException(&#34;Unknown thread mode: &#34; + subscription.subscriberMethod.threadMode);&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>该方法主要是根据register注册的事件处理函数的线程模型在指定的线程中触发事件处理函数。在上一讲<a href="http://liuling123.com/2016/01/EventBus-explain.html" target="_blank" rel="external">EventBus使用详解</a>中已经讲过EventBus的线程模型相关概念了，不明白的可以回去看看。<br>mainThreadPoster、backgroundPoster和asyncPoster分别是HandlerPoster、BackgroundPoster和AsyncPoster的对象，其中HandlerPoster继承自Handle，BackgroundPoster和AsyncPoster继承自Runnable。<br>我们主要看看HandlerPoster。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10);</span><br></pre></td></tr></table></figure></p>
<p>在EventBus的构造函数中，我们看到mainThreadPoster初始化的时候，传入的是Looper.getMainLooper()。所以此Handle是运行在主线程中的。<br>mainThreadPoster.enqueue方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void enqueue(Subscription subscription, Object event) &#123;&#10;    PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);&#10;    synchronized (this) &#123;&#10;        queue.enqueue(pendingPost);&#10;        if (!handlerActive) &#123;&#10;            handlerActive = true;&#10;            if (!sendMessage(obtainMessage())) &#123;&#10;                throw new EventBusException(&#34;Could not send handler message&#34;);&#10;            &#125;&#10;        &#125;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>enqueue方法最终会调用sendMessage方法，所以该Handle的handleMessage方法会被调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;public void handleMessage(Message msg) &#123;&#10;    boolean rescheduled = false;&#10;    try &#123;&#10;        long started = SystemClock.uptimeMillis();&#10;        while (true) &#123;&#10;            PendingPost pendingPost = queue.poll();&#10;            if (pendingPost == null) &#123;&#10;                synchronized (this) &#123;&#10;                    // Check again, this time in synchronized&#10;                    pendingPost = queue.poll();&#10;                    if (pendingPost == null) &#123;&#10;                        handlerActive = false;&#10;                        return;&#10;                    &#125;&#10;                &#125;&#10;            &#125;&#10;            eventBus.invokeSubscriber(pendingPost);&#10;            long timeInMethod = SystemClock.uptimeMillis() - started;&#10;            if (timeInMethod &#62;= maxMillisInsideHandleMessage) &#123;&#10;                if (!sendMessage(obtainMessage())) &#123;&#10;                    throw new EventBusException(&#34;Could not send handler message&#34;);&#10;                &#125;&#10;                rescheduled = true;&#10;                return;&#10;            &#125;&#10;        &#125;&#10;    &#125; finally &#123;&#10;        handlerActive = rescheduled;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>在该方法中，最终还是会调用eventBus.invokeSubscriber调用事件处理函数。</p>
<p>BackgroundPoster和AsyncPoster继承自Runnable，并且会在enqueue方法中调用eventBus.getExecutorService().execute(this);具体run方法大家可以自己去看源码，最终都会调用eventBus.invokeSubscriber方法。我们看看eventBus.invokeSubscriber方法的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void invokeSubscriber(PendingPost pendingPost) &#123;&#10;    Object event = pendingPost.event;&#10;    Subscription subscription = pendingPost.subscription;&#10;    PendingPost.releasePendingPost(pendingPost);&#10;    if (subscription.active) &#123;&#10;        invokeSubscriber(subscription, event);&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>该方法会调用invokeSubscriber方法进一步处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void invokeSubscriber(Subscription subscription, Object event) &#123;&#10;    try &#123;&#10;        // &#36890;&#36807;&#21453;&#23556;&#35843;&#29992;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#10;        subscription.subscriberMethod.method.invoke(subscription.subscriber, event);&#10;    &#125; catch (InvocationTargetException e) &#123;&#10;        handleSubscriberException(subscription, event, e.getCause());&#10;    &#125; catch (IllegalAccessException e) &#123;&#10;        throw new IllegalStateException(&#34;Unexpected exception&#34;, e);&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>该方法最终会通过反射来调用事件处理函数。至此，整个post过程分析完了。<br>总结一下整个post过程，大致分为3步：  </p>
<ol>
<li>将事件对象添加到事件队列eventQueue中等待处理  </li>
<li>遍历eventQueue队列中的事件对象并调用postSingleEvent处理每个事件  </li>
<li>找出订阅过该事件的所有事件处理函数，并在相应的线程中执行该事件处理函数 </li>
</ol>
<h3 id="u53D6_u6D88_u4E8B_u4EF6_u6CE8_u518C"><a href="#u53D6_u6D88_u4E8B_u4EF6_u6CE8_u518C" class="headerlink" title="取消事件注册"></a>取消事件注册</h3><p>上面已经分析了EventBus的register和post过程，这两个过程是EventBus的核心。不需要订阅事件时需要取消事件注册：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/** Unregisters the given subscriber from all event classes. */&#10;public synchronized void unregister(Object subscriber) &#123;&#10;    List&#60;Class&#60;?&#62;&#62; subscribedTypes = typesBySubscriber.get(subscriber);&#10;    if (subscribedTypes != null) &#123;&#10;        for (Class&#60;?&#62; eventType : subscribedTypes) &#123;&#10;            unubscribeByEventType(subscriber, eventType);&#10;        &#125;&#10;        typesBySubscriber.remove(subscriber);&#10;    &#125; else &#123;&#10;        Log.w(TAG, &#34;Subscriber to unregister was not registered before: &#34; + subscriber.getClass());&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>取消事件注册很简单，只是将register过程注册到EventBus的事件处理函数移除掉。</p>
<p>到这里，EventBus源码我们已经分析完了，如有不对的地方还望指点。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>前面一篇文章讲解了EventBus的使用，但是作为开发人员，不能只停留在仅仅会用的层面上，我们还需要弄清楚它的内部实现原理。所以本篇博文将分析EventBus的源码，看看究竟它是如何实现“发布/订阅”功能的。</p>
<p>相关文章<br><a href="http://liuling123.com/2016/01/EventBus-explain.html">EventBus使用详解</a><br><a href="http://liuling123.com/2016/01/EventBus-source.html">EventBus源码解析</a></p>
</blockquote>
<h3 id="u4E8B_u4EF6_u6CE8_u518C"><a href="#u4E8B_u4EF6_u6CE8_u518C" class="headerlink" title="事件注册"></a>事件注册</h3><p>根据前一讲<a href="http://liuling123.com/2016/01/EventBus-explain.html">EventBus使用详解</a>我们已经知道EventBus使用首先是需要注册的，注册事件的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().register(this);</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="EventBus" scheme="http://www.liuling123.com/tags/EventBus/"/>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EventBus使用详解]]></title>
    <link href="http://www.liuling123.com/2016/01/EventBus-explain.html"/>
    <id>http://www.liuling123.com/2016/01/EventBus-explain.html</id>
    <published>2016-01-09T04:42:00.000Z</published>
    <updated>2016-01-12T13:33:02.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>前言：EventBus出来已经有一段时间了，github上面也有很多开源项目中使用了EventBus。所以抽空学习顺便整理了一下。目前EventBus最新版本是3.0，所以本文是基于EventBus3.0的。</p>
<p>相关文章<br><a href="http://liuling123.com/2016/01/EventBus-explain.html" target="_blank" rel="external">EventBus使用详解</a><br><a href="http://liuling123.com/2016/01/EventBus-source.html" target="_blank" rel="external">EventBus源码解析</a></p>
</blockquote>
<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a>是针一款对Android的发布/订阅事件总线。它可以让我们很轻松的实现在Android各个组件之间传递消息，并且代码的可读性更好，耦合度更低。</p>
<a id="more"></a>
<h4 id="u5982_u4F55_u4F7F_u7528"><a href="#u5982_u4F55_u4F7F_u7528" class="headerlink" title="如何使用"></a>如何使用</h4><p>(1)首先需要定义一个消息类，该类可以不继承任何基类也不需要实现任何接口。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class MessageEvent &#123;&#10;    ......&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>(2)在需要订阅事件的地方注册事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().register(this);</span><br></pre></td></tr></table></figure></p>
<p>(3)产生事件，即发送消息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().post(messageEvent);</span><br></pre></td></tr></table></figure></p>
<p>(4)处理消息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe(threadMode = ThreadMode.PostThread)&#10;public void XXX(MessageEvent messageEvent) &#123;&#10;    ...&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>在3.0之前，EventBus还没有使用注解方式。消息处理的方法也只能限定于onEvent、onEventMainThread、onEventBackgroundThread和onEventAsync，分别代表四种线程模型。而在3.0之后，消息处理的方法可以随便取名，但是需要添加一个注解@Subscribe，并且要指定线程模型（默认为PostThread），四种线程模型，下面会讲到。<br>注意，事件处理函数的访问权限必须为public，否则会报异常。</p>
<p>(5)取消消息订阅<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().unregister(this);</span><br></pre></td></tr></table></figure></p>
<h4 id="u6709_u4F55_u4F18_u70B9"><a href="#u6709_u4F55_u4F18_u70B9" class="headerlink" title="有何优点"></a>有何优点</h4><p>采用消息发布/订阅的一个很大的优点就是代码的简洁性，并且能够有效地降低消息发布者和订阅者之间的耦合度。<br>举个例子，比如有两个界面，ActivityA和ActivityB，从ActivityA界面跳转到ActivityB界面后，ActivityB要给ActivityA发送一个消息，ActivityA收到消息后在界面上显示出来。我们最先想到的方法就是使用广播，使用广播实现此需求的代码如下：<br>首先需要在ActivityA中定义一个广播接收器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class MessageBroadcastReceiver extends BroadcastReceiver &#123;&#10;&#10;    @Override&#10;    public void onReceive(Context context, Intent intent) &#123;&#10;        mMessageView.setText(&#34;Message from SecondActivity:&#34; + intent.getStringExtra(&#34;message&#34;));&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>还需要在onCreate()方法中注册广播接收器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;protected void onCreate(Bundle savedInstanceState) &#123;&#10;    super.onCreate(savedInstanceState);&#10;    setContentView(R.layout.activity_main);&#10;    //&#27880;&#20876;&#20107;&#20214;&#10;    EventBus.getDefault().register(this);&#10;    //&#27880;&#20876;&#24191;&#25773;&#10;    IntentFilter intentFilter = new IntentFilter(&#34;message_broadcast&#34;);&#10;    mBroadcastReceiver = new MessageBroadcastReceiver();&#10;    registerReceiver(mBroadcastReceiver, intentFilter);&#10;    ......&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在onDestory()方法中取消注册广播接收器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;protected void onDestroy() &#123;&#10;    super.onDestroy();&#10;    ......&#10;    //&#21462;&#28040;&#24191;&#25773;&#27880;&#20876;&#10;    unregisterReceiver(mBroadcastReceiver);&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后我们需要在ActivityB界面中发送广播消息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.send_broadcast).setOnClickListener(new View.OnClickListener() &#123;&#10;    @Override&#10;    public void onClick(View v) &#123;&#10;        String message = mMessageET.getText().toString();&#10;        if(TextUtils.isEmpty(message)) &#123;&#10;            message = &#34;defaule message&#34;;&#10;        &#125;&#10;        Intent intent = new Intent();&#10;        intent.setAction(&#34;message_broadcast&#34;);&#10;        intent.putExtra(&#34;message&#34;, message);&#10;        sendBroadcast(intent);&#10;    &#125;&#10;&#125;);</span><br></pre></td></tr></table></figure></p>
<p>看着上面的实现代码，感觉也没什么不妥，挺好的！下面对比看下使用EventBus如何实现。<br>根据文章最前面所讲的EventBus使用步骤，首先我们需要定义一个消息事件类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class MessageEvent &#123;&#10;&#10;    private String message;&#10;&#10;    public MessageEvent(String message) &#123;&#10;        this.message = message;&#10;    &#125;&#10;&#10;    public String getMessage() &#123;&#10;        return message;&#10;    &#125;&#10;&#10;    public void setMessage(String message) &#123;&#10;        this.message = message;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>在ActivityA界面中我们首先需要注册订阅事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;protected void onCreate(Bundle savedInstanceState) &#123;&#10;    super.onCreate(savedInstanceState);&#10;    setContentView(R.layout.activity_main);&#10;    //&#27880;&#20876;&#20107;&#20214;&#10;    EventBus.getDefault().register(this);&#10;    ......&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在onDestory()方法中取消订阅：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;protected void onDestroy() &#123;&#10;    super.onDestroy();&#10;    //&#21462;&#28040;&#20107;&#20214;&#27880;&#20876;&#10;    EventBus.getDefault().unregister(this);&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然还要定义一个消息处理的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe(threadMode = ThreadMode.MainThread)&#10;public void onShowMessageEvent(MessageEvent messageEvent) &#123;&#10;    mMessageView.setText(&#34;Message from SecondActivity:&#34; + messageEvent.getMessage());&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>至此，消息订阅者我们已经定义好了，我们还需要在ActivityB中发布消息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.send).setOnClickListener(new View.OnClickListener() &#123;&#10;    @Override&#10;    public void onClick(View v) &#123;&#10;        String message = mMessageET.getText().toString();&#10;        if(TextUtils.isEmpty(message)) &#123;&#10;            message = &#34;defaule message&#34;;&#10;        &#125;&#10;        EventBus.getDefault().post(new MessageEvent(message));&#10;    &#125;&#10;&#125;);</span><br></pre></td></tr></table></figure></p>
<p>对比代码一看，有人会说了，这尼玛有什么区别嘛！说好的简洁呢？哥们，别着急嘛！我这里只是举了个简单的例子，仅仅从该例子来看，EventBus的优势没有体现出来。现在我将需求稍微改一下，ActivityA收到消息后，需要从网络服务器获取数据并将数据展示出来。如果使用广播，ActivityA中广播接收器代码应该这么写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class MessageBroadcastReceiver extends BroadcastReceiver &#123;&#10;&#10;    @Override&#10;    public void onReceive(Context context, Intent intent) &#123;&#10;        new Thread(new Runnable() &#123;&#10;            @Override&#10;            public void run() &#123;&#10;                //&#20174;&#26381;&#21153;&#22120;&#19978;&#33719;&#21462;&#25968;&#25454;&#10;                ......&#10;                runOnUiThread(new Runnable() &#123;&#10;                    @Override&#10;                    public void run() &#123;&#10;                        //&#23558;&#33719;&#21462;&#30340;&#25968;&#25454;&#23637;&#31034;&#22312;&#30028;&#38754;&#19978;&#10;                        ......&#10;                    &#125;&#10;                &#125;);&#10;            &#125;&#10;        &#125;).start();&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>看到这段代码，不知道你何感想，反正我是看着很不爽，嵌套层次太多，完全违反了Clean Code的原则。那使用EventBus来实现又是什么样呢？我们看一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe(threadMode = ThreadMode.BackgroundThread)&#10;public void onGetDataEvent(MessageEvent messageEvent) &#123;&#10;    //&#20174;&#26381;&#21153;&#22120;&#19978;&#33719;&#21462;&#25968;&#25454;&#10;    ......&#10;    EventBus.getDefault().post(new ShowMessageEvent());&#10;&#125;&#10;&#10;@Subscribe(threadMode = ThreadMode.MainThread)&#10;public void onShowDataEvent(ShowMessageEvent showMessageEvent) &#123;&#10;    //&#23558;&#33719;&#21462;&#30340;&#25968;&#25454;&#23637;&#31034;&#22312;&#30028;&#38754;&#19978;&#10;    ......&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>对比一下以上两段代码就能很明显的感觉到EventBus的优势，代码简洁、层次清晰，大大提高了代码的可读性和可维护性。我这只是简单的加了一个小需求而已，随着业务越来越复杂，使用EventBus的优势愈加明显。</p>
<h3 id="u5E38_u7528API_u4ECB_u7ECD"><a href="#u5E38_u7528API_u4ECB_u7ECD" class="headerlink" title="常用API介绍"></a>常用API介绍</h3><h4 id="u7EBF_u7A0B_u6A21_u578B"><a href="#u7EBF_u7A0B_u6A21_u578B" class="headerlink" title="线程模型"></a>线程模型</h4><p>在EventBus的事件处理函数中需要指定线程模型，即指定事件处理函数运行所在的想线程。在上面我们已经接触到了EventBus的四种线程模型。那他们有什么区别呢？<br>在EventBus中的观察者通常有四种线程模型，分别是PostThread（默认）、MainThread、BackgroundThread与Async。</p>
<ul>
<li>PostThread：如果使用事件处理函数指定了线程模型为PostThread，那么该事件在哪个线程发布出来的，事件处理函数就会在这个线程中运行，也就是说发布事件和接收事件在同一个线程。在线程模型为PostThread的事件处理函数中尽量避免执行耗时操作，因为它会阻塞事件的传递，甚至有可能会引起ANR。</li>
<li>MainThread：如果使用事件处理函数指定了线程模型为MainThread，那么不论事件是在哪个线程中发布出来的，该事件处理函数都会在UI线程中执行。该方法可以用来更新UI，但是不能处理耗时操作。</li>
<li>BackgroundThread：如果使用事件处理函数指定了线程模型为BackgroundThread，那么如果事件是在UI线程中发布出来的，那么该事件处理函数就会在新的线程中运行，如果事件本来就是子线程中发布出来的，那么该事件处理函数直接在发布事件的线程中执行。在此事件处理函数中禁止进行UI更新操作。</li>
<li>Async：如果使用事件处理函数指定了线程模型为Async，那么无论事件在哪个线程发布，该事件处理函数都会在新建的子线程中执行。同样，此事件处理函数中禁止进行UI更新操作。</li>
</ul>
<p>为了验证以上四个方法，我写了个小例子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe(threadMode = ThreadMode.PostThread)&#10;public void onMessageEventPostThread(MessageEvent messageEvent) &#123;&#10;    Log.e(&#34;PostThread&#34;, Thread.currentThread().getName());&#10;&#125;&#10;&#10;@Subscribe(threadMode = ThreadMode.MainThread)&#10;public void onMessageEventMainThread(MessageEvent messageEvent) &#123;&#10;    Log.e(&#34;MainThread&#34;, Thread.currentThread().getName());&#10;&#125;&#10;&#10;@Subscribe(threadMode = ThreadMode.BackgroundThread)&#10;public void onMessageEventBackgroundThread(MessageEvent messageEvent) &#123;&#10;    Log.e(&#34;BackgroundThread&#34;, Thread.currentThread().getName());&#10;&#125;&#10;&#10;@Subscribe(threadMode = ThreadMode.Async)&#10;public void onMessageEventAsync(MessageEvent messageEvent) &#123;&#10;    Log.e(&#34;Async&#34;, Thread.currentThread().getName());&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>分别使用上面四个方法订阅同一事件，打印他们运行所在的线程。首先我们在UI线程中发布一条MessageEvent的消息，看下日志打印结果是什么。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.send).setOnClickListener(new View.OnClickListener() &#123;&#10;        @Override&#10;        public void onClick(View v) &#123;&#10;            Log.e(&#34;postEvent&#34;, Thread.currentThread().getName());&#10;            EventBus.getDefault().post(new MessageEvent());&#10;        &#125;&#10;    &#125;);</span><br></pre></td></tr></table></figure></p>
<p>打印结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2689-2689/com.lling.eventbusdemo E/postEvent&#65109; main&#10;2689-2689/com.lling.eventbusdemo E/PostThread&#65109; main&#10;2689-3064/com.lling.eventbusdemo E/Async&#65109; pool-1-thread-1&#10;2689-2689/com.lling.eventbusdemo E/MainThread&#65109; main&#10;2689-3065/com.lling.eventbusdemo E/BackgroundThread&#65109; pool-1-thread-2</span><br></pre></td></tr></table></figure></p>
<p>从日志打印结果可以看出，如果在UI线程中发布事件，则线程模型为PostThread的事件处理函数也执行在UI线程，与发布事件的线程一致。线程模型为Async的事件处理函数执行在名字叫做pool-1-thread-1的新的线程中。而MainThread的事件处理函数执行在UI线程，BackgroundThread的时间处理函数执行在名字叫做pool-1-thread-2的新的线程中。</p>
<p>我们再看看在子线程中发布一条MessageEvent的消息时，会有什么样的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.send).setOnClickListener(new View.OnClickListener() &#123;&#10;        @Override&#10;        public void onClick(View v) &#123;&#10;            new Thread(new Runnable() &#123;&#10;                @Override&#10;                public void run() &#123;&#10;                    Log.e(&#34;postEvent&#34;, Thread.currentThread().getName());&#10;                    EventBus.getDefault().post(new MessageEvent());&#10;                &#125;&#10;            &#125;).start();&#10;        &#125;&#10;    &#125;);</span><br></pre></td></tr></table></figure>
<p>打印结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3468-3945/com.lling.eventbusdemo E/postEvent&#65109; Thread-125&#10;3468-3945/com.lling.eventbusdemo E/PostThread&#65109; Thread-125&#10;3468-3945/com.lling.eventbusdemo E/BackgroundThread&#65109; Thread-125&#10;3468-3946/com.lling.eventbusdemo E/Async&#65109; pool-1-thread-1&#10;3468-3468/com.lling.eventbusdemo E/MainThread&#65109; main</span><br></pre></td></tr></table></figure></p>
<p>从日志打印结果可以看出，如果在子线程中发布事件，则线程模型为PostThread的事件处理函数也执行在子线程，与发布事件的线程一致（都是Thread-125）。BackgroundThread事件模型也与发布事件在同一线程执行。Async则在一个名叫pool-1-thread-1的新线程中执行。MainThread还是在UI线程中执行。</p>
<p>上面一个例子充分验证了指定不同线程模型的事件处理方法执行所在的线程。</p>
<h4 id="u9ECF_u6027_u4E8B_u4EF6"><a href="#u9ECF_u6027_u4E8B_u4EF6" class="headerlink" title="黏性事件"></a>黏性事件</h4><p>除了上面讲的普通事件外，EventBus还支持发送黏性事件。何为黏性事件呢？简单讲，就是在发送事件之后再订阅该事件也能收到该事件，跟黏性广播类似。具体用法如下：</p>
<p>订阅黏性事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().register(StickyModeActivity.this);</span><br></pre></td></tr></table></figure></p>
<p>黏性事件处理函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe(sticky = true)&#10;public void XXX(MessageEvent messageEvent) &#123;&#10;    ......&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>发送黏性事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().postSticky(new MessageEvent(&#34;test&#34;));</span><br></pre></td></tr></table></figure></p>
<p>处理消息事件以及取消订阅和上面方式相同。</p>
<p>看个简单的黏性事件的例子，为了简单起见我这里就在一个Activity里演示了。</p>
<p>Activity代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class StickyModeActivity extends AppCompatActivity &#123;&#10;&#10;    int index = 0;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) &#123;&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_sticky_mode);&#10;        findViewById(R.id.post).setOnClickListener(new View.OnClickListener() &#123;&#10;            @Override&#10;            public void onClick(View v) &#123;&#10;                EventBus.getDefault().postSticky(new MessageEvent(&#34;test&#34; + index++));&#10;            &#125;&#10;        &#125;);&#10;        findViewById(R.id.regist).setOnClickListener(new View.OnClickListener() &#123;&#10;            @Override&#10;            public void onClick(View v) &#123;&#10;                EventBus.getDefault().registerSticky(StickyModeActivity.this);&#10;            &#125;&#10;        &#125;);&#10;&#10;        findViewById(R.id.unregist).setOnClickListener(new View.OnClickListener() &#123;&#10;            @Override&#10;            public void onClick(View v) &#123;&#10;                EventBus.getDefault().unregister(StickyModeActivity.this);&#10;            &#125;&#10;        &#125;);&#10;&#10;    &#125;&#10;&#10;    @Subscribe(threadMode = ThreadMode.PostThread, sticky = true)&#10;    public void onMessageEventPostThread(MessageEvent messageEvent) &#123;&#10;        Log.e(&#34;PostThread&#34;, messageEvent.getMessage());&#10;    &#125;&#10;&#10;    @Subscribe(threadMode = ThreadMode.MainThread, sticky = true)&#10;    public void onMessageEventMainThread(MessageEvent messageEvent) &#123;&#10;        Log.e(&#34;MainThread&#34;, messageEvent.getMessage());&#10;    &#125;&#10;&#10;    @Subscribe(threadMode = ThreadMode.BackgroundThread, sticky = true)&#10;    public void onMessageEventBackgroundThread(MessageEvent messageEvent) &#123;&#10;        Log.e(&#34;BackgroundThread&#34;, messageEvent.getMessage());&#10;    &#125;&#10;&#10;    @Subscribe(threadMode = ThreadMode.Async, sticky = true)&#10;    public void onMessageEventAsync(MessageEvent messageEvent) &#123;&#10;        Log.e(&#34;Async&#34;, messageEvent.getMessage());&#10;    &#125;&#10;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>布局代码activity_sticky_mode.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;LinearLayout xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#10;    xmlns:tools=&#34;http://schemas.android.com/tools&#34; android:layout_width=&#34;match_parent&#34;&#10;    android:layout_height=&#34;match_parent&#34; android:paddingLeft=&#34;@dimen/activity_horizontal_margin&#34;&#10;    android:paddingRight=&#34;@dimen/activity_horizontal_margin&#34;&#10;    android:paddingTop=&#34;@dimen/activity_vertical_margin&#34;&#10;    android:paddingBottom=&#34;@dimen/activity_vertical_margin&#34;&#10;    android:orientation=&#34;vertical&#34;&#10;    tools:context=&#34;com.lling.eventbusdemo.StickyModeActivity&#34;&#62;&#10;&#10;    &#60;Button&#10;        android:id=&#34;@+id/post&#34;&#10;        android:layout_width=&#34;wrap_content&#34;&#10;        android:layout_height=&#34;wrap_content&#34;&#10;        android:text=&#34;Post&#34;/&#62;&#10;&#10;    &#60;Button&#10;        android:id=&#34;@+id/regist&#34;&#10;        android:layout_width=&#34;wrap_content&#34;&#10;        android:layout_height=&#34;wrap_content&#34;&#10;        android:text=&#34;Regist&#34;/&#62;&#10;&#10;    &#60;Button&#10;        android:id=&#34;@+id/unregist&#34;&#10;        android:layout_width=&#34;wrap_content&#34;&#10;        android:layout_height=&#34;wrap_content&#34;&#10;        android:text=&#34;UnRegist&#34;/&#62;&#10;&#10;&#60;/LinearLayout&#62;</span><br></pre></td></tr></table></figure></p>
<p>代码很简单，界面上三个按钮，一个用来发送黏性事件，一个用来订阅事件，还有一个用来取消订阅的。首先在未订阅的情况下点击发送按钮发送一个黏性事件，然后点击订阅，会看到日志打印结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15246-15246/com.lling.eventbusdemo E/PostThread&#65109; test0&#10;15246-15391/com.lling.eventbusdemo E/Async&#65109; test0&#10;15246-15246/com.lling.eventbusdemo E/MainThread&#65109; test0&#10;15246-15393/com.lling.eventbusdemo E/BackgroundThread&#65109; test0</span><br></pre></td></tr></table></figure></p>
<p>这就是粘性事件，能够收到订阅之前发送的消息。但是它只能收到最新的一次消息，比如说在未订阅之前已经发送了多条黏性消息了，然后再订阅只能收到最近的一条消息。这个我们可以验证一下，我们连续点击5次POST按钮发送5条黏性事件，然后再点击REGIST按钮订阅，打印结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6980-6980/com.lling.eventbusdemo E/PostThread&#65109; test4&#10;6980-6980/com.lling.eventbusdemo E/MainThread&#65109; test4&#10;6980-7049/com.lling.eventbusdemo E/Async&#65109; test4&#10;6980-7048/com.lling.eventbusdemo E/BackgroundThread&#65109; test4</span><br></pre></td></tr></table></figure></p>
<p>由打印结果可以看出，确实是只收到最近的一条黏性事件。</p>
<p>好了，EventBus的使用暂时分析到这里，例子代码<a href="https://github.com/liuling07/EventBusDemo" target="_blank" rel="external">从这里获取</a>。下一讲将讲解<a href="http://liuling123.com/2016/01/EventBus-source.html" target="_blank" rel="external">EventBus源码解析</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>前言：EventBus出来已经有一段时间了，github上面也有很多开源项目中使用了EventBus。所以抽空学习顺便整理了一下。目前EventBus最新版本是3.0，所以本文是基于EventBus3.0的。</p>
<p>相关文章<br><a href="http://liuling123.com/2016/01/EventBus-explain.html">EventBus使用详解</a><br><a href="http://liuling123.com/2016/01/EventBus-source.html">EventBus源码解析</a></p>
</blockquote>
<h3 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h3><p><a href="https://github.com/greenrobot/EventBus">EventBus</a>是针一款对Android的发布/订阅事件总线。它可以让我们很轻松的实现在Android各个组件之间传递消息，并且代码的可读性更好，耦合度更低。</p>]]>
    
    </summary>
    
      <category term="EventBus" scheme="http://www.liuling123.com/tags/EventBus/"/>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【译文】AppBarLayout的越界滚动行为]]></title>
    <link href="http://www.liuling123.com/2016/01/overscroll-appBarLayout-behavior.html"/>
    <id>http://www.liuling123.com/2016/01/overscroll-appBarLayout-behavior.html</id>
    <published>2016-01-03T14:03:00.000Z</published>
    <updated>2016-01-03T14:08:49.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/@nullthemall/overscroll-appbarlayout-behavior-e58f1ee2807#.gtmxsk7sw" target="_blank" rel="external">Overscroll AppBarLayout Behavior</a></li>
<li>原文作者 : <a href="https://medium.com/@nullthemall" target="_blank" rel="external">Nikola Despotoski</a></li>
<li>译文出自 : <a href="http://www.devtf.cn" target="_blank" rel="external">开发技术前线 www.devtf.cn。未经允许，不得转载!</a></li>
<li>译者 : <a href="https://github.com/liuling07" target="_blank" rel="external">liuling07</a> </li>
<li>校对者: <a href="https://github.com/desmond1121" target="_blank" rel="external">desmond1121</a></li>
<li>状态 :  完成 </li>
</ul>
</blockquote>
<p>很不幸，Youtube音乐应用在我们国家不可使用，我尝试着通过各种盗版网站来获取该应用，但我仍然无法看到在这个应用上发生了什么。感谢这位<a href="https://www.reddit.com/user/IanSan5653" target="_blank" rel="external">redditor</a>，在我的请求下，他在<a href="https://www.reddit.com/r/materialdesign" target="_blank" rel="external">/r/materialdesign</a>打开了一个<a href="https://www.reddit.com/r/MaterialDesign/comments/3slct5/youtube_music_has_tons_of_animations_and/" target="_blank" rel="external">thread</a>并且发表一段录制的视频，我才有机会看到这个行为。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*lEMS5RiBLGk3Q72FhXBwxA.gif" alt="Youtube视频app的真实截图，可能的行为"></p>
<a id="more"></a>
<p>根据我所看到的，我首先想到的就是专辑封面是放到一个AppBarLayout里面，并且在滚动区域拖到边界的时候尺寸会发生变化。让我们假定这个猜想是正确的并且用“Behavior”这个术语表示它。依鄙人之见，如果我的猜想是正确的，谷歌应该会在Material Design文档的<a href="https://www.google.com/design/spec/patterns/scrolling-techniques.html" target="_blank" rel="external">滚动</a>部分提供一个越界滚动的使用说明。</p>
<p>我们的目标就是保证AppBarLayout.Behavior的完整性，在此基础上再创建一个扩展的行为。因此：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class OverscrollScalingViewAppBarLayoutBehavior extends AppBarLayout.ScrollingViewBehavior</span><br></pre></td></tr></table></figure>
<p>因为这是默认的AppBarLayout.Behavior，所以建议只有在依赖视图是AppBarLayout的时候起作用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;public boolean layoutDependsOn(CoordinatorLayout parent, View child, View dependency) &#123;&#10; return dependency instanceof AppBarLayout;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>接下来，我们需要获取想要在拖到边界时要改变尺寸的视图的一个实例。最好的方法就是在onLayoutChild()方法中获取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;public boolean onLayoutChild(CoordinatorLayout parent ....) &#123;&#10;    boolean superLayout = super.onLayoutChild(parent, abl, layoutDirection);&#10;    if (mTargetScalingView == null) &#123;&#10;        mTargetScalingView = parent.findViewByTag(TAG);&#10;        if(mTargetScalingView != null)&#123;&#10;             mScaleImpl.obtainInitialValues();&#10;         &#125;&#10;     &#125;&#10;    return superLayout;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>而且我们需要保证只有在垂直滚动的时候起作用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout,... int nestedScrollAxes) &#123;&#10;    return nestedScrollAxes == View.SCROLL_AXIS_VERTICAL;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们先前没有在程序中显示设置，会设置ViewScaler为默认的Scaler。</p>
<p>在内容滚动的瞬间，真正重要的问题就有头绪了。CoordinatorLayout.Behavior提供了一个onNestedScroll()方法，当滚动进行的时候这个方法会被调用，并且当内容滚动到边界的时候也会调用。最后两个参数dyUnconsumed和dxUnconsumed提供了未被该行为的目标视图填满的像素值。</p>
<p>这个方法对我们实现尺寸改变来说太重要了。所以我列出了哪些情况需要改变尺寸，哪些情况不需要：</p>
<h4 id="u9700_u8981_u6539_u53D8_u5C3A_u5BF8"><a href="#u9700_u8981_u6539_u53D8_u5C3A_u5BF8" class="headerlink" title="需要改变尺寸"></a>需要改变尺寸</h4><ol>
<li>存在未填满的像素，如dyUnconsumed小于0  </li>
<li>AppBarLayout是展开的，getTopAndBottomOffset() &gt;= mScaleImpl.getInitialParentBottom()</li>
</ol>
<h4 id="u4E0D_u9700_u8981_u6539_u53D8_u5C3A_u5BF8"><a href="#u4E0D_u9700_u8981_u6539_u53D8_u5C3A_u5BF8" class="headerlink" title="不需要改变尺寸"></a>不需要改变尺寸</h4><ol>
<li>AppBarLayout中没有子视图可以改变尺寸</li>
<li>有填充的像素，如dyConsumed不等于0</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;public void onNestedScroll(CoordinatorLayout ... int dxUnconsumed, int dyUnconsumed) &#123;&#10;    if (mTargetScalingView == null || dyConsumed != 0) &#123;&#10;        mScaleImpl.cancelAnimations();&#10;        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);&#10;        return;&#10;    &#125;&#10;&#10;    if (dyUnconsumed &#60; 0 &#38;&#38; getTopAndBottomOffset() &#62;= mScaleImpl.getInitialParentBottom()) &#123;&#10;        int absDyUnconsumed = Math.abs(dyUnconsumed);&#10;        mTotalDyUnconsumed += absDyUnconsumed;&#10;        mTotalDyUnconsumed = Math.min(mTotalDyUnconsumed, mTotalTargetDyUnconsumed);&#10;        mScaleImpl.updateViewScale();&#10;    &#125; else &#123;&#10;        mTotalDyUnconsumed = 0;&#10;        mScaleImpl.setShouldRestore(false);&#10;        if (dyConsumed != 0) &#123;&#10;            mScaleImpl.cancelAnimations();&#10;        &#125;&#10;        super.onNestedScroll(coordinatorLayout, .... dxUnconsumed, dyUnconsumed);&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>当嵌套的overscroll停止的时候，我们需要将视图的边界和大小重置到它们的原始值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;public void onStopNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target) &#123;&#10;    mScaleImpl.retractScale();&#10;    super.onStopNestedScroll(coordinatorLayout, child, target);&#10;&#10;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="ViewScaler"><a href="#ViewScaler" class="headerlink" title="ViewScaler"></a>ViewScaler</h1><p>这个类实现了AppBarLayout应该如何改变它的底部以及视图应该如何改变尺寸的逻辑。大多数行为都依赖累积的未填充的像素。我们可以为最大累积值设置一个约束值，这样可以很容的找到要如何改变AppBarLayout底部和改变视图的尺寸。ParentScaler是ViewScaler的父类，它能让AppBarLayout近乎平滑的改变尺寸。我就不在这里贴大量代码了，如果你有兴趣，<a href="https://gist.github.com/NikolaDespotoski/7d6a019e5aafe60ebade" target="_blank" rel="external">可以从这里获取代码</a>。</p>
<h4 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h4><p>大神们，这里有个MatrixScaler类，我没有时间去完成它。如果想要改变尺寸的视图是ImageView，并且设置了ScaleType为MATRIX，这个类将可以用使用矩阵的方式来改变图像的尺寸。  </p>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="https://youtu.be/2udXoC8AXSM" target="_blank" rel="external">Demo演示地址</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/@nullthemall/overscroll-appbarlayout-behavior-e58f1ee2807#.gtmxsk7sw">Overscroll AppBarLayout Behavior</a></li>
<li>原文作者 : <a href="https://medium.com/@nullthemall">Nikola Despotoski</a></li>
<li>译文出自 : <a href="http://www.devtf.cn">开发技术前线 www.devtf.cn。未经允许，不得转载!</a></li>
<li>译者 : <a href="https://github.com/liuling07">liuling07</a> </li>
<li>校对者: <a href="https://github.com/desmond1121">desmond1121</a></li>
<li>状态 :  完成 </li>
</ul>
</blockquote>
<p>很不幸，Youtube音乐应用在我们国家不可使用，我尝试着通过各种盗版网站来获取该应用，但我仍然无法看到在这个应用上发生了什么。感谢这位<a href="https://www.reddit.com/user/IanSan5653">redditor</a>，在我的请求下，他在<a href="https://www.reddit.com/r/materialdesign">/r/materialdesign</a>打开了一个<a href="https://www.reddit.com/r/MaterialDesign/comments/3slct5/youtube_music_has_tons_of_animations_and/">thread</a>并且发表一段录制的视频，我才有机会看到这个行为。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*lEMS5RiBLGk3Q72FhXBwxA.gif" alt="Youtube视频app的真实截图，可能的行为"></p>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="译文" scheme="http://www.liuling123.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Say bye to my 2015]]></title>
    <link href="http://www.liuling123.com/2015/12/Say-bye-to-my-2015.html"/>
    <id>http://www.liuling123.com/2015/12/Say-bye-to-my-2015.html</id>
    <published>2015-12-25T09:25:10.000Z</published>
    <updated>2016-01-03T06:52:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u6280_u672F_u6210_u957F"><a href="#u6280_u672F_u6210_u957F" class="headerlink" title="技术成长"></a><strong>技术成长</strong></h2><p>14年毕业后开始接触Android，到目前为止从事Android开发差不多一年半的时间，15年算是自己技术成长最大的一年吧。<br>上半年自己大部分精力都耗在云老师项目上，自己既要开发同时兼任项目负责人（这里要感谢老大认可，愿意给新人机会）。前前后后经历了四五次迭代，最终在3个Android新人（确切来说是两个）的努力下完成并上线了。遗憾的是项目不受公司重视，并且部门领导担心影响实体产品的销售而不愿推广。最后随着部门的解散该项目也夭折了，这当时对我来说是很令人伤心的事了。虽然项目夭折了，但是自己从中收获了不少。不仅是技术水平的提升，还收获了项目管理的经验。 </p>
<p>部门解散前，有一个多月时间是比较闲的。利用这段时间自己研究了Android Framework层的源码，搭建了自己的<a href="http://www.liuling123.com/">个人技术博客</a>并且接触了开源社区github。贡献了图片选择库<a href="https://github.com/liuling07/PhotoPicker" target="_blank" rel="external">PhotoPicker</a>。<br>部门解散后，到新部门做cocos2dx游戏开发，学习了C++以及cocos2dx引擎。利用下班在家的时间学习了Material Design等知识，并且开发了基于Material Design和MVP模式的新闻客户端<a href="https://github.com/liuling07/SimpleNews" target="_blank" rel="external">SimpleNews</a>。</p>
<a id="more"></a>
<h2 id="u8BFB_u4E66"><a href="#u8BFB_u4E66" class="headerlink" title="读书"></a><strong>读书</strong></h2><p>今年看的书不多，看完的有《代码整洁之道》、《极客与团队》、《微管理》、《拆掉思维里的墙》  </p>
<p>未看完的有《从0到1》、《C++ Primer》、《cocos2dX高级开发教程》。</p>
<h2 id="u57F9_u8BAD"><a href="#u57F9_u8BAD" class="headerlink" title="培训"></a><strong>培训</strong></h2><p>今年公司组织两场培训，刘捷老师的《Clean Code》以及MSUP软件工作坊培训。两场培训下来收获都挺大的，尤其是刘捷老师的《Clean Code》课程，培训完之后立马现学现用，为小组制定Android编码规范并且实施代码review。</p>
<h2 id="u953B_u70BC"><a href="#u953B_u70BC" class="headerlink" title="锻炼"></a><strong>锻炼</strong></h2><p>最为程序员，长期坐在电脑前作业，如果没有锻炼的习惯，恐怕身体很难扛得住。自己不爱跑步，对健身房也没兴趣，只喜欢约上几个好友在球场挥洒汗水。</p>
<p>因为鼻骨被撞骨折，14年下半年一直没有碰球，15年春节过后伤好又开始坚持打球了。基本上每周三晚上都和同事在篮球公园包场打。后来部门解散，同事回总部的回总部，离职的离职，最后篮球活动也取消了。之后就每周日早上和同学在宝体打，一直坚持到现在。</p>
<h2 id="15_u5E74_u5927_u4E8B_u8BB0"><a href="#15_u5E74_u5927_u4E8B_u8BB0" class="headerlink" title="15年大事记"></a><strong>15年大事记</strong></h2><p>第一次去女朋友家里，并商讨婚嫁事宜，这算是我人生中一件大事了吧。  </p>
<p>下了血本买了台中配Mac pro。对于生产工具一定要买所能承受范围内最好的。  </p>
<p>搭建自己的<a href="http://www.liuling123.com/">个人技术博客</a>，并且开始接触开源社区，并在github和微博上关注了很多业界大牛。</p>
<h2 id="16_u5E74_u5C55_u671B"><a href="#16_u5E74_u5C55_u671B" class="headerlink" title="16年展望"></a><strong>16年展望</strong></h2><p>首先得找一份自己满意的Android研发工作，因为自己对游戏开发（儿童游戏，略感弱智）没有太大兴趣；  </p>
<p>努力提升自己的技术水平，向业界大牛靠拢；  </p>
<p>多向github贡献代码，经常更新自己的技术博客；  </p>
<p>看完Simple哥送的《Android软件安全与逆向分析》（感谢Simple哥 <a href="https://github.com/bboyfeiyu" target="_blank" rel="external">@bboyfeiyu</a> ）,看完徐医生的《Android群英传》； </p>
<p>和女朋友订婚；</p>
<p><a href="https://github.com/winter-fall/Bye2015Hi2016/issues/30" target="_blank" rel="external">https://github.com/winter-fall/Bye2015Hi2016/issues/30</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u6280_u672F_u6210_u957F"><a href="#u6280_u672F_u6210_u957F" class="headerlink" title="技术成长"></a><strong>技术成长</strong></h2><p>14年毕业后开始接触Android，到目前为止从事Android开发差不多一年半的时间，15年算是自己技术成长最大的一年吧。<br>上半年自己大部分精力都耗在云老师项目上，自己既要开发同时兼任项目负责人（这里要感谢老大认可，愿意给新人机会）。前前后后经历了四五次迭代，最终在3个Android新人（确切来说是两个）的努力下完成并上线了。遗憾的是项目不受公司重视，并且部门领导担心影响实体产品的销售而不愿推广。最后随着部门的解散该项目也夭折了，这当时对我来说是很令人伤心的事了。虽然项目夭折了，但是自己从中收获了不少。不仅是技术水平的提升，还收获了项目管理的经验。 </p>
<p>部门解散前，有一个多月时间是比较闲的。利用这段时间自己研究了Android Framework层的源码，搭建了自己的<a href="http://www.liuling123.com/">个人技术博客</a>并且接触了开源社区github。贡献了图片选择库<a href="https://github.com/liuling07/PhotoPicker">PhotoPicker</a>。<br>部门解散后，到新部门做cocos2dx游戏开发，学习了C++以及cocos2dx引擎。利用下班在家的时间学习了Material Design等知识，并且开发了基于Material Design和MVP模式的新闻客户端<a href="https://github.com/liuling07/SimpleNews">SimpleNews</a>。</p>]]>
    
    </summary>
    
      <category term="人生感悟" scheme="http://www.liuling123.com/categories/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MVP模式在Android项目中的使用]]></title>
    <link href="http://www.liuling123.com/2015/12/mvp-pattern-android.html"/>
    <id>http://www.liuling123.com/2015/12/mvp-pattern-android.html</id>
    <published>2015-12-23T14:16:04.000Z</published>
    <updated>2016-01-03T07:35:27.000Z</updated>
    <content type="html"><![CDATA[<p> 以前在写项目的时候，没有过多考虑架构模式的问题，因为之前一直做J2EE开发，而J2EE都是采用MVC模式进行开发的，所以在搭建公司项目的时候，也是使用类似MVC的架构（严格来讲，之前的项目还算不上MVC模式，只是简单将网络请求与界面分离，然后通过Handle通知更新界面）。这种写法，在后面随着项目越来越大，Activty或者Fragment中代码也会越来越多，导致项目的维护变的越来越复杂。所以需要另外一种架构模式来解决这个问题，在网上浏览了一圈，发现适合Android开发的架构模式非MVP莫属了。</p>
<p>网上一搜，讲MVP模式的文章比比皆是。但是大多都是讲理论，稍微好点的会附带一个简单的登录的demo。一个简单的demo很难让初次接触MVP模式的人掌握它的使用。所以我决定写一个稍微复杂一点的新闻客户端SimpleNews（当然只是相对登录的demo）来展示MVP在具体项目中的使用。另外SimpleNews还使用了Material Design，也是学习Material Design的一个好Demo。<br><a id="more"></a><br>好了，切入正文吧。先讲一下MVP的概念。</p>
<h3 id="u4EC0_u4E48_u662FMVP"><a href="#u4EC0_u4E48_u662FMVP" class="headerlink" title="什么是MVP"></a>什么是MVP</h3><p>MVP是模型（Model）、视图（View）、主持人（Presenter）的缩写，分别代表项目中3个不同的模块。</p>
<ul>
<li><p>模型（Model）：负责处理数据的加载或者存储，比如从网络或本地数据库获取数据等；</p>
</li>
<li><p>视图（View）：负责界面数据的展示，与用户进行交互；</p>
</li>
<li><p>主持人（Presenter）：相当于协调者，是模型与视图之间的桥梁，将模型与视图分离开来。</p>
</li>
</ul>
<p>如下图所示，View与Model并不直接交互，而是使用Presenter作为View与Model之间的桥梁。其中Presenter中同时持有Viwe层以及Model层的Interface的引用，而View层持有Presenter层Interface的引用。当View层某个界面需要展示某些数据的时候，首先会调用Presenter层的某个接口，然后Presenter层会调用Model层请求数据，当Model层数据加载成功之后会调用Presenter层的回调方法通知Presenter层数据加载完毕，最后Presenter层再调用View层的接口将加载后的数据展示给用户。这就是MVP模式的整个核心过程。<br><img src="http://7xnqm4.com1.z0.glb.clouddn.com/Android中MVP的使用%C2%8F%C2%9B.png" alt="MVP模式"></p>
<p>这样分层的好处就是大大减少了Model与View层之间的耦合度。一方面可以使得View层和Model层单独开发与测试，互不依赖。另一方面Model层可以封装复用，可以极大的减少代码量。当然，MVP还有其他的一些优点，这里不再赘述。下面看下MVP模式在具体项目中的使用。</p>
<h3 id="MVP_u6A21_u5F0F_u5728_u9879_u76EE_u4E2D_u7684_u4F7F_u7528"><a href="#MVP_u6A21_u5F0F_u5728_u9879_u76EE_u4E2D_u7684_u4F7F_u7528" class="headerlink" title="MVP模式在项目中的使用"></a>MVP模式在项目中的使用</h3><h4 id="View_u5C42"><a href="#View_u5C42" class="headerlink" title="View层"></a>View层</h4><p>View层新闻展示模块的是组件是Fragment，里面有一个RecyclerView、SwipeRefreshLayout。布局代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&#62;&#10;&#60;android.support.v4.widget.SwipeRefreshLayout&#10;    xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#10;    xmlns:app=&#34;http://schemas.android.com/apk/res-auto&#34;&#10;    android:id=&#34;@+id/swipe_refresh_widget&#34;&#10;    android:layout_width=&#34;match_parent&#34;&#10;    android:layout_height=&#34;match_parent&#34;&#62;&#10;    &#60;android.support.v7.widget.RecyclerView&#10;        android:id=&#34;@+id/recycle_view&#34;&#10;        android:layout_width=&#34;match_parent&#34;&#10;        android:layout_height=&#34;wrap_content&#34;&#10;        android:scrollbars=&#34;vertical&#34;&#10;        app:layout_behavior=&#34;@string/appbar_scrolling_view_behavior&#34;&#10;        android:paddingTop=&#34;@dimen/card_margin&#34;&#62;&#10;    &#60;/android.support.v7.widget.RecyclerView&#62;&#10;&#60;/android.support.v4.widget.SwipeRefreshLayout&#62;</span><br></pre></td></tr></table></figure>
<p>新闻列表模块主要是展示从网络获取的新闻列表信息，View层的接口大概需要如下方法：</p>
<ol>
<li>加载数据的过程中需要提示“正在加载”的反馈信息给用户</li>
<li>加载成功后，将加载得到的数据填充到RecyclerView展示给用户</li>
<li>加载成功后，需要将“正在加载”反馈信息取消掉</li>
<li>若加载数据失败，如无网络连接，则需要给用户提示信息</li>
</ol>
<p>根据上面描述，我们将View层的接口定义如下，分别对应上面四个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface NewsView &#123;&#10;    void showProgress();&#10;    void addNews(List&#60;NewsBean&#62; newsList);&#10;    void hideProgress();&#10;    void showLoadFailMsg();&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>在新闻列表Fragment中实现上述接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package com.lauren.simplenews.news.widget;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.support.annotation.Nullable;&#10;import android.support.design.widget.Snackbar;&#10;import android.support.v4.app.ActivityCompat;&#10;import android.support.v4.app.ActivityOptionsCompat;&#10;import android.support.v4.app.Fragment;&#10;import android.support.v4.widget.SwipeRefreshLayout;&#10;import android.support.v7.widget.DefaultItemAnimator;&#10;import android.support.v7.widget.LinearLayoutManager;&#10;import android.support.v7.widget.RecyclerView;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import com.lauren.simplenews.R;&#10;import com.lauren.simplenews.beans.NewsBean;&#10;import com.lauren.simplenews.commons.Urls;&#10;import com.lauren.simplenews.news.NewsAdapter;&#10;import com.lauren.simplenews.news.presenter.NewsPresenter;&#10;import com.lauren.simplenews.news.presenter.NewsPresenterImpl;&#10;import com.lauren.simplenews.news.view.NewsView;&#10;import com.lauren.simplenews.utils.LogUtils;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;/**&#10; * Description : &#26032;&#38395;Fragment&#10; * Author : lauren&#10; * Email  : lauren.liuling@gmail.com&#10; * Blog   : http://www.liuling123.com&#10; * Date   : 15/12/13&#10; */&#10;public class NewsListFragment extends Fragment implements NewsView, SwipeRefreshLayout.OnRefreshListener &#123;&#10;    private static final String TAG = &#34;NewsListFragment&#34;;&#10;    private SwipeRefreshLayout mSwipeRefreshWidget;&#10;    private RecyclerView mRecyclerView;&#10;    private LinearLayoutManager mLayoutManager;&#10;    private NewsAdapter mAdapter;&#10;    private List&#60;NewsBean&#62; mData;&#10;    private NewsPresenter mNewsPresenter;&#10;    private int mType = NewsFragment.NEWS_TYPE_TOP;&#10;    private int pageIndex = 0;&#10;    public static NewsListFragment newInstance(int type) &#123;&#10;        Bundle args = new Bundle();&#10;        NewsListFragment fragment = new NewsListFragment();&#10;        args.putInt(&#34;type&#34;, type);&#10;        fragment.setArguments(args);&#10;        return fragment;&#10;    &#125;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) &#123;&#10;        super.onCreate(savedInstanceState);&#10;        mNewsPresenter = new NewsPresenterImpl(this);&#10;        mType = getArguments().getInt(&#34;type&#34;);&#10;    &#125;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;&#10;        View view = inflater.inflate(R.layout.fragment_newslist, null);&#10;        mSwipeRefreshWidget = (SwipeRefreshLayout) view.findViewById(R.id.swipe_refresh_widget);&#10;        mSwipeRefreshWidget.setColorSchemeResources(R.color.primary,&#10;                R.color.primary_dark, R.color.primary_light,&#10;                R.color.accent);&#10;        mSwipeRefreshWidget.setOnRefreshListener(this);&#10;        mRecyclerView = (RecyclerView)view.findViewById(R.id.recycle_view);&#10;        mRecyclerView.setHasFixedSize(true);&#10;        mLayoutManager = new LinearLayoutManager(getActivity());&#10;        mRecyclerView.setLayoutManager(mLayoutManager);&#10;        mRecyclerView.setItemAnimator(new DefaultItemAnimator());&#10;        mAdapter = new NewsAdapter(getActivity().getApplicationContext());&#10;        mAdapter.setOnItemClickListener(mOnItemClickListener);&#10;        mRecyclerView.setAdapter(mAdapter);&#10;        mRecyclerView.setOnScrollListener(mOnScrollListener);&#10;        onRefresh();&#10;        return view;&#10;    &#125;&#10;    private RecyclerView.OnScrollListener mOnScrollListener = new RecyclerView.OnScrollListener() &#123;&#10;        private int lastVisibleItem;&#10;        @Override&#10;        public void onScrolled(RecyclerView recyclerView, int dx, int dy) &#123;&#10;            super.onScrolled(recyclerView, dx, dy);&#10;            lastVisibleItem = mLayoutManager.findLastVisibleItemPosition();&#10;        &#125;&#10;        @Override&#10;        public void onScrollStateChanged(RecyclerView recyclerView, int newState) &#123;&#10;            super.onScrollStateChanged(recyclerView, newState);&#10;            if (newState == RecyclerView.SCROLL_STATE_IDLE&#10;                    &#38;&#38; lastVisibleItem + 1 == mAdapter.getItemCount()&#10;                    &#38;&#38; mAdapter.isShowFooter()) &#123;&#10;                //&#21152;&#36733;&#26356;&#22810;&#10;                LogUtils.d(TAG, &#34;loading more data&#34;);&#10;                mNewsPresenter.loadNews(mType, pageIndex + Urls.PAZE_SIZE);&#10;            &#125;&#10;        &#125;&#10;    &#125;;&#10;    private NewsAdapter.OnItemClickListener mOnItemClickListener = new NewsAdapter.OnItemClickListener() &#123;&#10;        @Override&#10;        public void onItemClick(View view, int position) &#123;&#10;            NewsBean news = mAdapter.getItem(position);&#10;            Intent intent = new Intent(getActivity(), NewsDetailActivity.class);&#10;            intent.putExtra(&#34;news&#34;, news);&#10;            View transitionView = view.findViewById(R.id.ivNews);&#10;            ActivityOptionsCompat options =&#10;                    ActivityOptionsCompat.makeSceneTransitionAnimation(getActivity(),&#10;                            transitionView, getString(R.string.transition_news_img));&#10;            ActivityCompat.startActivity(getActivity(), intent, options.toBundle());&#10;        &#125;&#10;    &#125;;&#10;    @Override&#10;    public void showProgress() &#123;&#10;        mSwipeRefreshWidget.setRefreshing(true);&#10;    &#125;&#10;    @Override&#10;    public void addNews(List&#60;NewsBean&#62; newsList) &#123;&#10;        mAdapter.isShowFooter(true);&#10;        if(mData == null) &#123;&#10;            mData = new ArrayList&#60;NewsBean&#62;();&#10;        &#125;&#10;        mData.addAll(newsList);&#10;        if(pageIndex == 0) &#123;&#10;            mAdapter.setmDate(mData);&#10;        &#125; else &#123;&#10;            //&#22914;&#26524;&#27809;&#26377;&#26356;&#22810;&#25968;&#25454;&#20102;,&#21017;&#38544;&#34255;footer&#24067;&#23616;&#10;            if(newsList == null || newsList.size() == 0) &#123;&#10;                mAdapter.isShowFooter(false);&#10;            &#125;&#10;            mAdapter.notifyDataSetChanged();&#10;        &#125;&#10;        pageIndex += Urls.PAZE_SIZE;&#10;    &#125;&#10;    @Override&#10;    public void hideProgress() &#123;&#10;        mSwipeRefreshWidget.setRefreshing(false);&#10;    &#125;&#10;    @Override&#10;    public void showLoadFailMsg() &#123;&#10;        if(pageIndex == 0) &#123;&#10;            mAdapter.isShowFooter(false);&#10;            mAdapter.notifyDataSetChanged();&#10;        &#125;&#10;        Snackbar.make(getActivity().findViewById(R.id.drawer_layout), getString(R.string.load_fail), Snackbar.LENGTH_SHORT).show();&#10;    &#125;&#10;    @Override&#10;    public void onRefresh() &#123;&#10;        pageIndex = 0;&#10;        if(mData != null) &#123;&#10;            mData.clear();&#10;        &#125;&#10;        mNewsPresenter.loadNews(mType, pageIndex);&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Model_u5C42"><a href="#Model_u5C42" class="headerlink" title="Model层"></a>Model层</h4><p>新闻模块的model主要负责从服务器获取新闻列表信息，接口代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface NewsModel &#123;&#10;    void loadNews(String url, int type, NewsModelImpl.OnLoadNewsListListener listener);&#10;    ......&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package com.lauren.simplenews.news.model;&#10;import com.lauren.simplenews.beans.NewsBean;&#10;import com.lauren.simplenews.beans.NewsDetailBean;&#10;import com.lauren.simplenews.commons.Urls;&#10;import com.lauren.simplenews.news.NewsJsonUtils;&#10;import com.lauren.simplenews.news.widget.NewsFragment;&#10;import com.lauren.simplenews.utils.OkHttpUtils;&#10;import java.util.List;&#10;/**&#10; * Description : &#26032;&#38395;&#19994;&#21153;&#22788;&#29702;&#31867;&#10; * Author : lauren&#10; * Email  : lauren.liuling@gmail.com&#10; * Blog   : http://www.liuling123.com&#10; * Date   : 15/12/19&#10; */&#10;public class NewsModelImpl implements NewsModel &#123;&#10;    /**&#10;     * &#21152;&#36733;&#26032;&#38395;&#21015;&#34920;&#10;     * @param url&#10;     * @param listener&#10;     */&#10;    @Override&#10;    public void loadNews(String url, final int type, final OnLoadNewsListListener listener) &#123;&#10;        OkHttpUtils.ResultCallback&#60;String&#62; loadNewsCallback = new OkHttpUtils.ResultCallback&#60;String&#62;() &#123;&#10;            @Override&#10;            public void onSuccess(String response) &#123;&#10;                List&#60;NewsBean&#62; newsBeanList = NewsJsonUtils.readJsonNewsBeans(response, getID(type));&#10;                listener.onSuccess(newsBeanList);&#10;            &#125;&#10;            @Override&#10;            public void onFailure(Exception e) &#123;&#10;                listener.onFailure(&#34;load news list failure.&#34;, e);&#10;            &#125;&#10;        &#125;;&#10;        OkHttpUtils.get(url, loadNewsCallback);&#10;    &#125;&#10;    ......&#10;    /**&#10;     * &#33719;&#21462;ID&#10;     * @param type&#10;     * @return&#10;     */&#10;    private String getID(int type) &#123;&#10;        String id;&#10;        switch (type) &#123;&#10;            case NewsFragment.NEWS_TYPE_TOP:&#10;                id = Urls.TOP_ID;&#10;                break;&#10;            case NewsFragment.NEWS_TYPE_NBA:&#10;                id = Urls.NBA_ID;&#10;                break;&#10;            case NewsFragment.NEWS_TYPE_CARS:&#10;                id = Urls.CAR_ID;&#10;                break;&#10;            case NewsFragment.NEWS_TYPE_JOKES:&#10;                id = Urls.JOKE_ID;&#10;                break;&#10;            default:&#10;                id = Urls.TOP_ID;&#10;                break;&#10;        &#125;&#10;        return id;&#10;    &#125;&#10;    private String getDetailUrl(String docId) &#123;&#10;        StringBuffer sb = new StringBuffer(Urls.NEW_DETAIL);&#10;        sb.append(docId).append(Urls.END_DETAIL_URL);&#10;        return sb.toString();&#10;    &#125;&#10;    public interface OnLoadNewsListListener &#123;&#10;        void onSuccess(List&#60;NewsBean&#62; list);&#10;        void onFailure(String msg, Exception e);&#10;    &#125;&#10;    ......&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>网络请求使用开源项目OkHttp，OkHttpUtils是对其的封装，具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package com.lauren.simplenews.utils;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import com.google.gson.internal.$Gson$Types;&#10;import com.squareup.okhttp.Callback;&#10;import com.squareup.okhttp.FormEncodingBuilder;&#10;import com.squareup.okhttp.OkHttpClient;&#10;import com.squareup.okhttp.Request;&#10;import com.squareup.okhttp.RequestBody;&#10;import com.squareup.okhttp.Response;&#10;import java.io.IOException;&#10;import java.lang.reflect.ParameterizedType;&#10;import java.lang.reflect.Type;&#10;import java.net.CookieManager;&#10;import java.net.CookiePolicy;&#10;import java.util.List;&#10;import java.util.concurrent.TimeUnit;&#10;/**&#10; * Description : OkHttp&#32593;&#32476;&#36830;&#25509;&#23553;&#35013;&#24037;&#20855;&#31867;&#10; * Author : lauren&#10; * Email  : lauren.liuling@gmail.com&#10; * Blog   : http://www.liuling123.com&#10; * Date   : 15/12/17&#10; */&#10;public class OkHttpUtils &#123;&#10;    private static final String TAG = &#34;OkHttpUtils&#34;;&#10;    private static OkHttpUtils mInstance;&#10;    private OkHttpClient mOkHttpClient;&#10;    private Handler mDelivery;&#10;    private OkHttpUtils() &#123;&#10;        mOkHttpClient = new OkHttpClient();&#10;        mOkHttpClient.setConnectTimeout(10, TimeUnit.SECONDS);&#10;        mOkHttpClient.setWriteTimeout(10, TimeUnit.SECONDS);&#10;        mOkHttpClient.setReadTimeout(30, TimeUnit.SECONDS);&#10;        //cookie enabled&#10;        mOkHttpClient.setCookieHandler(new CookieManager(null, CookiePolicy.ACCEPT_ORIGINAL_SERVER));&#10;        mDelivery = new Handler(Looper.getMainLooper());&#10;    &#125;&#10;    private synchronized static OkHttpUtils getmInstance() &#123;&#10;        if (mInstance == null) &#123;&#10;            mInstance = new OkHttpUtils();&#10;        &#125;&#10;        return mInstance;&#10;    &#125;&#10;    private void getRequest(String url, final ResultCallback callback) &#123;&#10;        final Request request = new Request.Builder().url(url).build();&#10;        deliveryResult(callback, request);&#10;    &#125;&#10;    private void postRequest(String url, final ResultCallback callback, List&#60;Param&#62; params) &#123;&#10;        Request request = buildPostRequest(url, params);&#10;        deliveryResult(callback, request);&#10;    &#125;&#10;    private void deliveryResult(final ResultCallback callback, Request request) &#123;&#10;        mOkHttpClient.newCall(request).enqueue(new Callback() &#123;&#10;            @Override&#10;            public void onFailure(Request request, final IOException e) &#123;&#10;                sendFailCallback(callback, e);&#10;            &#125;&#10;            @Override&#10;            public void onResponse(Response response) throws IOException &#123;&#10;                try &#123;&#10;                    String str = response.body().string();&#10;                    if (callback.mType == String.class) &#123;&#10;                        sendSuccessCallBack(callback, str);&#10;                    &#125; else &#123;&#10;                        Object object = JsonUtils.deserialize(str, callback.mType);&#10;                        sendSuccessCallBack(callback, object);&#10;                    &#125;&#10;                &#125; catch (final Exception e) &#123;&#10;                    LogUtils.e(TAG, &#34;convert json failure&#34;, e);&#10;                    sendFailCallback(callback, e);&#10;                &#125;&#10;            &#125;&#10;        &#125;);&#10;    &#125;&#10;    private void sendFailCallback(final ResultCallback callback, final Exception e) &#123;&#10;        mDelivery.post(new Runnable() &#123;&#10;            @Override&#10;            public void run() &#123;&#10;                if (callback != null) &#123;&#10;                    callback.onFailure(e);&#10;                &#125;&#10;            &#125;&#10;        &#125;);&#10;    &#125;&#10;    private void sendSuccessCallBack(final ResultCallback callback, final Object obj) &#123;&#10;        mDelivery.post(new Runnable() &#123;&#10;            @Override&#10;            public void run() &#123;&#10;                if (callback != null) &#123;&#10;                    callback.onSuccess(obj);&#10;                &#125;&#10;            &#125;&#10;        &#125;);&#10;    &#125;&#10;    private Request buildPostRequest(String url, List&#60;Param&#62; params) &#123;&#10;        FormEncodingBuilder builder = new FormEncodingBuilder();&#10;        for (Param param : params) &#123;&#10;            builder.add(param.key, param.value);&#10;        &#125;&#10;        RequestBody requestBody = builder.build();&#10;        return new Request.Builder().url(url).post(requestBody).build();&#10;    &#125;&#10;    /**********************&#23545;&#22806;&#25509;&#21475;************************/&#10;    /**&#10;     * get&#35831;&#27714;&#10;     * @param url  &#35831;&#27714;url&#10;     * @param callback  &#35831;&#27714;&#22238;&#35843;&#10;     */&#10;    public static void get(String url, ResultCallback callback) &#123;&#10;        getmInstance().getRequest(url, callback);&#10;    &#125;&#10;    /**&#10;     * post&#35831;&#27714;&#10;     * @param url       &#35831;&#27714;url&#10;     * @param callback  &#35831;&#27714;&#22238;&#35843;&#10;     * @param params    &#35831;&#27714;&#21442;&#25968;&#10;     */&#10;    public static void post(String url, final ResultCallback callback, List&#60;Param&#62; params) &#123;&#10;        getmInstance().postRequest(url, callback, params);&#10;    &#125;&#10;    /**&#10;     * http&#35831;&#27714;&#22238;&#35843;&#31867;,&#22238;&#35843;&#26041;&#27861;&#22312;UI&#32447;&#31243;&#20013;&#25191;&#34892;&#10;     * @param &#60;T&#62;&#10;     */&#10;    public static abstract class ResultCallback&#60;T&#62; &#123;&#10;        Type mType;&#10;        public ResultCallback()&#123;&#10;            mType = getSuperclassTypeParameter(getClass());&#10;        &#125;&#10;        static Type getSuperclassTypeParameter(Class&#60;?&#62; subclass) &#123;&#10;            Type superclass = subclass.getGenericSuperclass();&#10;            if (superclass instanceof Class) &#123;&#10;                throw new RuntimeException(&#34;Missing type parameter.&#34;);&#10;            &#125;&#10;            ParameterizedType parameterized = (ParameterizedType) superclass;&#10;            return $Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);&#10;        &#125;&#10;        /**&#10;         * &#35831;&#27714;&#25104;&#21151;&#22238;&#35843;&#10;         * @param response&#10;         */&#10;        public abstract void onSuccess(T response);&#10;        /**&#10;         * &#35831;&#27714;&#22833;&#36133;&#22238;&#35843;&#10;         * @param e&#10;         */&#10;        public abstract void onFailure(Exception e);&#10;    &#125;&#10;    /**&#10;     * post&#35831;&#27714;&#21442;&#25968;&#31867;&#10;     */&#10;    public static class Param &#123;&#10;        String key;&#10;        String value;&#10;        public Param() &#123;&#10;        &#125;&#10;        public Param(String key, String value) &#123;&#10;            this.key = key;&#10;            this.value = value;&#10;        &#125;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>将网络请求进行封装可以减少很多的代码量，并且后期如果我不想用okhttp了，想换成其它的库，修改起来也方便。</p>
<h4 id="Presenter_u5C42"><a href="#Presenter_u5C42" class="headerlink" title="Presenter层"></a>Presenter层</h4><p>View层需要调用Presenter层加载新闻信息，所以Presenter需要提供加载新闻信息的接口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface NewsPresenter &#123;&#10;    void loadNews(int type, int page);&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>NewsPresenterImpl的构造函数中需要传入View层的接口对象NewView，并且需要创建一个NewsModel对象。Presenter的具体实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package com.lauren.simplenews.news.presenter;&#10;import com.lauren.simplenews.beans.NewsBean;&#10;import com.lauren.simplenews.commons.Urls;&#10;import com.lauren.simplenews.news.model.NewsModel;&#10;import com.lauren.simplenews.news.model.NewsModelImpl;&#10;import com.lauren.simplenews.news.view.NewsView;&#10;import com.lauren.simplenews.news.widget.NewsFragment;&#10;import com.lauren.simplenews.utils.LogUtils;&#10;import java.util.List;&#10;/**&#10; * Description :&#10; * Author : lauren&#10; * Email  : lauren.liuling@gmail.com&#10; * Blog   : http://www.liuling123.com&#10; * Date   : 15/12/18&#10; */&#10;public class NewsPresenterImpl implements NewsPresenter, NewsModelImpl.OnLoadNewsListListener &#123;&#10;    private static final String TAG = &#34;NewsPresenterImpl&#34;;&#10;    private NewsView mNewsView;&#10;    private NewsModel mNewsModel;&#10;    public NewsPresenterImpl(NewsView newsView) &#123;&#10;        this.mNewsView = newsView;&#10;        this.mNewsModel = new NewsModelImpl();&#10;    &#125;&#10;    @Override&#10;    public void loadNews(final int type, final int pageIndex) &#123;&#10;        String url = getUrl(type, pageIndex);&#10;        LogUtils.d(TAG, url);&#10;        //&#21482;&#26377;&#31532;&#19968;&#39029;&#30340;&#25110;&#32773;&#21047;&#26032;&#30340;&#26102;&#20505;&#25165;&#26174;&#31034;&#21047;&#26032;&#36827;&#24230;&#26465;&#10;        if(pageIndex == 0) &#123;&#10;            mNewsView.showProgress();&#10;        &#125;&#10;        mNewsModel.loadNews(url, type, this);&#10;    &#125;&#10;    /**&#10;     * &#26681;&#25454;&#31867;&#21035;&#21644;&#39029;&#38754;&#32034;&#24341;&#21019;&#24314;url&#10;     * @param type&#10;     * @param pageIndex&#10;     * @return&#10;     */&#10;    private String getUrl(int type, int pageIndex) &#123;&#10;        StringBuffer sb = new StringBuffer();&#10;        switch (type) &#123;&#10;            case NewsFragment.NEWS_TYPE_TOP:&#10;                sb.append(Urls.TOP_URL).append(Urls.TOP_ID);&#10;                break;&#10;            case NewsFragment.NEWS_TYPE_NBA:&#10;                sb.append(Urls.COMMON_URL).append(Urls.NBA_ID);&#10;                break;&#10;            case NewsFragment.NEWS_TYPE_CARS:&#10;                sb.append(Urls.COMMON_URL).append(Urls.CAR_ID);&#10;                break;&#10;            case NewsFragment.NEWS_TYPE_JOKES:&#10;                sb.append(Urls.COMMON_URL).append(Urls.JOKE_ID);&#10;                break;&#10;            default:&#10;                sb.append(Urls.TOP_URL).append(Urls.TOP_ID);&#10;                break;&#10;        &#125;&#10;        sb.append(&#34;/&#34;).append(pageIndex).append(Urls.END_URL);&#10;        return sb.toString();&#10;    &#125;&#10;    @Override&#10;    public void onSuccess(List&#60;NewsBean&#62; list) &#123;&#10;        mNewsView.hideProgress();&#10;        mNewsView.addNews(list);&#10;    &#125;&#10;    @Override&#10;    public void onFailure(String msg, Exception e) &#123;&#10;        mNewsView.hideProgress();&#10;        mNewsView.showLoadFailMsg();&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>当用户切换到NewsListFragment界面之后，界面需要展示新闻列表信息给用户。首先NewsListFragment会调用NewsPresenter的loadNews方法，NewsPresenter 的loadNews方法中又会调用NewsModel中的loadNews方法。NewsModel中的loadNews方法中就是加载数据的核心，通过Okhttp请求服务器接口获取数据，无论数据获取成功与否，都会通过OnLoadNewsListener接口回调给NewsPresenter 。如果获取成功，NewsPresenter 会调用NewsView的addNews方法将获取的新闻列表信息展示到RecyclerView。如果获取失败，则调用NewsView的showLoadFialMsg方法向用户提示失败信息。</p>
<p>以上就是新闻列表请求的整个过程。</p>
<p>源码地址：<a href="https://github.com/liuling07/SimpleNews" target="_blank" rel="external">https://github.com/liuling07/SimpleNews</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p> 以前在写项目的时候，没有过多考虑架构模式的问题，因为之前一直做J2EE开发，而J2EE都是采用MVC模式进行开发的，所以在搭建公司项目的时候，也是使用类似MVC的架构（严格来讲，之前的项目还算不上MVC模式，只是简单将网络请求与界面分离，然后通过Handle通知更新界面）。这种写法，在后面随着项目越来越大，Activty或者Fragment中代码也会越来越多，导致项目的维护变的越来越复杂。所以需要另外一种架构模式来解决这个问题，在网上浏览了一圈，发现适合Android开发的架构模式非MVP莫属了。</p>
<p>网上一搜，讲MVP模式的文章比比皆是。但是大多都是讲理论，稍微好点的会附带一个简单的登录的demo。一个简单的demo很难让初次接触MVP模式的人掌握它的使用。所以我决定写一个稍微复杂一点的新闻客户端SimpleNews（当然只是相对登录的demo）来展示MVP在具体项目中的使用。另外SimpleNews还使用了Material Design，也是学习Material Design的一个好Demo。<br>]]>
    
    </summary>
    
      <category term="MVP" scheme="http://www.liuling123.com/tags/MVP/"/>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="设计模式" scheme="http://www.liuling123.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【译文】Android M中Intent的解析]]></title>
    <link href="http://www.liuling123.com/2015/12/intent-resolving-in-android-m.html"/>
    <id>http://www.liuling123.com/2015/12/intent-resolving-in-android-m.html</id>
    <published>2015-12-04T06:52:06.000Z</published>
    <updated>2016-01-03T07:29:56.000Z</updated>
    <content type="html"><![CDATA[<p>原文链接 : <a href="https://medium.com/google-developer-experts/intent-resolving-in-android-m-c17d39d27048#.n23z2g14e" target="_blank" rel="external">Intent Resolving in Android M</a><br>原文作者 : <a href="https://medium.com/@tasomaniac" target="_blank" rel="external">Said Tahsin Dane</a><br>译文出自 : <a href="http://www.devtf.cn" target="_blank" rel="external">开发技术前线 www.devtf.cn。未经允许，不得转载!</a><br>译者 : <a href="https://github.com/liuling07" target="_blank" rel="external">liuling07</a><br>校对者: <a href="https://github.com/desmond1121" target="_blank" rel="external">desmond1121</a><br>状态 : 完成</p>
<h2 id="u8BD1_u6587_u8FDE_u63A5_uFF1AAndroid_M_u4E2DIntent_u7684_u89E3_u6790"><a href="#u8BD1_u6587_u8FDE_u63A5_uFF1AAndroid_M_u4E2DIntent_u7684_u89E3_u6790" class="headerlink" title="译文连接：Android M中Intent的解析"></a>译文连接：<a href="https://github.com/bboyfeiyu/android-tech-frontier/tree/master/others/Android-M中Intent的解析" target="_blank" rel="external">Android M中Intent的解析</a></h2><p>注意了！在Android 6.0中，“隐式Intent”的解析不能像之前版本那样正常工作了。这很有可能导致你的app不能正常使用。</p>
<p>现在让我解释一下这个意料之中的问题以及为什么它不能正常使用： 最近，我正在开发一个小的开源项目，叫做“Open Link With”。希望不久后它能够在应用市场上架。</p>
<p>我的这个app能够让你在其他app之间随意切换。当你给我分享一个链接的时候，我基本上可以根据这个链接查询出所有可以处理这个链接的Activity。然后我会模拟一个系统对话框让你切换app。<br><a id="more"></a><br><img src="https://cdn-images-1.medium.com/max/1600/1*rW8I8aCpJ2q8fnfKH_51_g.gif" alt="从已经打开的youtube的web页面切换到youtube应用" title="从已经打开的youtube的web页面切换到youtube应用"></p>
<p>我一直都是使用下面的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&#60;ResolveInfo&#62; infos = packageManager&#10;        .queryIntentActivities(intent, MATCH_DEFAULT_ONLY);</span><br></pre></td></tr></table></figure></p>
<p>这段代码几乎所有Android开发者都比较熟悉，并且我也相信大部分app都有用到这段代码。</p>
<p>我的手机里有两个浏览器。“一个URL是Google+ 的Intent”期望得到一个具有3个ResolveInfo对象的列表（Google+应用以及两个浏览器）。</p>
<p>好吧，并不是这样！</p>
<p>欢迎来到Android 6.0！</p>
<p>Android 6.0引进了应用关联。系统主要通过你的web页面来认证，并且自动使用你的app来打开这些URL，而不会向你做任何请求。或者你可以到系统设置，选择“应用程序”，然后点击一个应用，再点击“默认打开方式”，然后设置“用这个应用打开”，就可以每次都使用这个应用打开。</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*MVZbYKhwu-7qnyGAFWuNsw.png" alt="Android 6.0的应用默认设置页面" title="Android 6.0的应用默认设置页面"></p>
<p>在这种情况下，queryIntentActivities方法只会给开发者返回一个只有一个Activity的列表（此例子返回的是Google+）。</p>
<p>虽然这是在意料之中的，但是应该在文档中注明，因为它与公共API相矛盾了。</p>
<p>我研究了一下，发现了一个MATCH_ALL标志，文档表示，它将禁用所有的系统级过滤器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/**&#10; * Querying flag: if set and if the platform is doing any filtering of the results, then&#10; * the filtering will not happen. This is a synonym for saying that all results should&#10; * be returned.&#10; */&#10;public static final int MATCH_ALL = 0x00020000;</span><br></pre></td></tr></table></figure>
<p>这对我来说没什么用。我打开源码（至少我有源码）并开始研究这个方法。</p>
<p>它似乎优先考虑验证应用程序的域，不仅在它的内部系统，在公共API中也是如此。</p>
<p>如果有一个验证应用程序的域，它不会返回任何其他东西。MATCH_ALL标志会移除一些系统过滤器，但是仅仅是在没有验证程序的情况下。</p>
<p>对于这个问题，我找不到任何可变通的措施。它只是排除浏览器应用，即使他们的IntentFilters匹配。</p>
<p>之所以没有可变通的措施，是因为他是一个内部组件（我们无法访问），Android SDK通过IPC使用AIDL与它进行通信。</p>
<p>大部分开发者使用这个方法来判断是否至少有一个Activity来处理隐式的Intent。在大多数情况下，列表中第一项就是你想要的。</p>
<p>在花了几个小时搞明白到底发生了什么之后，我尝试寻找一个我认为每个人都应该知道的解决方案。</p>
<p>在Android 6.0中，改动的地方很多。实际上谷歌提供了一些改变清单，在清单中你能看到到底有哪些改变。我认为还有很多类似上面的一些没有在清单中列出的改变，而这些改动很有可能导致你的应用无法正常运行。</p>
<p>所以如果你使用PackageManager的方法，你一定得小心，并且认真检查。</p>
<p>感谢此文的校对者：<a href="https://twitter.com/yagmurdalman" target="_blank" rel="external">Yağmur Dalman</a>、<a href="https://medium.com/u/9706138c9bfb" target="_blank" rel="external">Sebastiano Poggi</a>、<a href="https://medium.com/u/73761c65c602" target="_blank" rel="external">Salim KAYABAŞI</a>、<a href="https://medium.com/u/24a0490cd588" target="_blank" rel="external">Hasan Keklik</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文链接 : <a href="https://medium.com/google-developer-experts/intent-resolving-in-android-m-c17d39d27048#.n23z2g14e">Intent Resolving in Android M</a><br>原文作者 : <a href="https://medium.com/@tasomaniac">Said Tahsin Dane</a><br>译文出自 : <a href="http://www.devtf.cn">开发技术前线 www.devtf.cn。未经允许，不得转载!</a><br>译者 : <a href="https://github.com/liuling07">liuling07</a><br>校对者: <a href="https://github.com/desmond1121">desmond1121</a><br>状态 : 完成</p>
<h2 id="u8BD1_u6587_u8FDE_u63A5_uFF1AAndroid_M_u4E2DIntent_u7684_u89E3_u6790"><a href="#u8BD1_u6587_u8FDE_u63A5_uFF1AAndroid_M_u4E2DIntent_u7684_u89E3_u6790" class="headerlink" title="译文连接：Android M中Intent的解析"></a>译文连接：<a href="https://github.com/bboyfeiyu/android-tech-frontier/tree/master/others/Android-M中Intent的解析">Android M中Intent的解析</a></h2><p>注意了！在Android 6.0中，“隐式Intent”的解析不能像之前版本那样正常工作了。这很有可能导致你的app不能正常使用。</p>
<p>现在让我解释一下这个意料之中的问题以及为什么它不能正常使用： 最近，我正在开发一个小的开源项目，叫做“Open Link With”。希望不久后它能够在应用市场上架。</p>
<p>我的这个app能够让你在其他app之间随意切换。当你给我分享一个链接的时候，我基本上可以根据这个链接查询出所有可以处理这个链接的Activity。然后我会模拟一个系统对话框让你切换app。<br>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="译文" scheme="http://www.liuling123.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【译文】高性能ListViews]]></title>
    <link href="http://www.liuling123.com/2015/12/performance-listviews.html"/>
    <id>http://www.liuling123.com/2015/12/performance-listviews.html</id>
    <published>2015-12-02T10:22:14.000Z</published>
    <updated>2016-01-03T07:37:23.000Z</updated>
    <content type="html"><![CDATA[<p>原文链接 : <a href="http://willowtreeapps.com/blog/performance-listviews/?utm_source=Android+Weekly&amp;utm_campaign=038d344835-Android_Weekly_178&amp;utm_medium=email&amp;utm_term=0_4eb677ad19-038d344835-337955857" target="_blank" rel="external">Performance ListViews</a><br>原文作者 : <a href="http://willowtreeapps.com/blog/" target="_blank" rel="external">Brandon</a><br>译文出自 : <a href="http://www.devtf.cn" target="_blank" rel="external">开发技术前线 www.devtf.cn。未经允许，不得转载!</a><br>译者 : <a href="https://github.com/liuling07" target="_blank" rel="external">liuling07</a><br>校对者: <a href="https://github.com/desmond1121" target="_blank" rel="external">desmond1121</a><br>状态 : 完成</p>
<h2 id="u8BD1_u6587_u8FDE_u63A5_uFF1A_u9AD8_u6027_u80FDListViews"><a href="#u8BD1_u6587_u8FDE_u63A5_uFF1A_u9AD8_u6027_u80FDListViews" class="headerlink" title="译文连接：高性能ListViews"></a>译文连接：<a href="https://github.com/bboyfeiyu/android-tech-frontier/blob/master/androidweekly/高性能ListViews/高性能ListViews.md" target="_blank" rel="external">高性能ListViews</a></h2><p>列表展示功能几乎在所有app中都会被用到，使用列表可以很方便的展示一些列表项，比如菜谱、联系人，或者任意类型的类别。所以Android有一个内置的方式来展示此类型的数据，也是在情理之中的。RecyclerView是一种最新的展示列表数据的方式，它非常高效，因为它重用视图而不是每一行出现在屏幕上都重新创建。在RecyclerView出现之前，我们可以使用ListView，即使到了现在，ListView也是广泛的被开发者所使用。虽然ListView也是可以回收视图的，但它也一直都是Android中最容易被错误使用的一个控件。我们知道在此之前这个话题已经被写过无数遍了，但是今天我还是要在博客中提出来，因为我们仍然发现很多app在错误的使用它们。</p>
<p>关于ListView中ArrayAdapter的用法，标准的新手写法是这样子的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;public View getView(int position, View convertView, ViewGroup parent) &#123;&#10; &#10;    LayoutInflater inflater = (LayoutInflater) context&#10;            .getSystemService(Context.LAYOUT_INFLATER_SERVICE);&#10;    View rowView = inflater.inflate(R.layout.view_test_row, parent, false);&#10; &#10;    TextView testName = (TextView)rowView.findViewById(R.id.text_view_test_name);&#10;    TextView testDesc = (TextView)rowView.findViewById(R.id.text_view_test_desc);&#10; &#10;    //modify TextViews, in some arbitrary way&#10; &#10;    return rowView;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>当所有列表项都能够一次性在一屏中显示的时候，这种写法并没有什么问题，但这样你就创建了一个基本视图，并完全避免了ArrayAdapter的麻烦了吗？当ListView需要显示一个很大的列表集，而且列表子项是一个非常复杂的视图的时候，上面的方式会消耗大量的性能。当用户滑动屏幕的时候，每个视图都会被inflate并且调用findViewById()方法。当findViewById()方法被调用的时候，会遍历整个视图层级，直到找到正确的Id。每个子视图都要执行上述过程！并且用户滑动的越快，卡顿现象愈加明显。为了解决这个问题，我们可以使用一个静态类来绑定还没被使用的convertView。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static class ViewHolder()&#123;&#10; &#10;        TextView testName;&#10;        TextView testDesc;&#10; &#10;&#125;&#10; &#10;@Override&#10; public View getView(int position, View convertView, ViewGroup parent) &#123;&#10; &#10;    View rowView = convertView;  //reference to one of the previous Views in the list that we can reuse.&#10; &#10;    if(convertView == null) &#123;&#10; &#10;        LayoutInflater inflater = (LayoutInflater) context&#10;                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);&#10;        rowView = inflater.inflate(R.layout.view_test_row, parent, false);&#10; &#10;        ViewHolder viewHolder = new ViewHolder();&#10;        viewHolder.testName = (TextView) rowView.findViewById(R.id.text_view_test_name);&#10;        viewHolder.testDesc = (TextView) rowView.findViewById(R.id.text_view_test_desc);&#10; &#10;        rowView.setTag(viewHolder);&#10;    &#125;&#10; &#10;    ViewHolder holder = (ViewHolder) rowView.getTag();&#10; &#10;    //in real code these strings should be in res&#10;    holder.testName.setText(&#34;Test&#34;+position);&#10;    holder.testDesc.setText(&#34;This is number &#34;+position);&#10; &#10;    return rowView;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>那convertView又是什么呢？它可以让ListView跳过一些显示一行内容所需要的设置。如果某一行的视图不在屏幕中显示，我们可以重复使用这个视图来显示一个新行。当ListView刚开始显示的时候，一切都是正常的。既然没有视图可以被用来复用，convertView为空。视图也像前面版本一样被inflate，但是TextViews会被找到且它的引用被保存在一个ViewHolder中。然后我们可以调用setTag()方法将ViewHolder存储在视图中。正如修订过后的getView()方法中后半段代码所示，我们可以在视图中存储后面我们需要用到的数据。</p>
<p>我们所做的更改可能看起来并没有太大的效果，但是随着布局越来越复杂并且数量也越来越多，效果将变得越来越明显。作为开发者，我最不想做的事就是开发一个用户体验很差的app。所以请记住，仅仅一个低水平的ListView都有可能让一个app死掉，我们一定得避免这种情况发生。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文链接 : <a href="http://willowtreeapps.com/blog/performance-listviews/?utm_source=Android+Weekly&amp;utm_campaign=038d344835-Android_Weekly_178&amp;utm_medium=email&amp;utm_term=0_4eb677ad19-038d344835-337955857">Performance ListViews</a><br>原文作者 : <a href="http://willowtreeapps.com/blog/">Brandon</a><br>译文出自 : <a href="http://www.devtf.cn">开发技术前线 www.devtf.cn。未经允许，不得转载!</a><br>译者 : <a href="https://github.com/liuling07">liuling07</a><br>校对者: <a href="https://github.com/desmond1121">desmond1121</a><br>状态 : 完成</p>
<h2 id="u8BD1_u6587_u8FDE_u63A5_uFF1A_u9AD8_u6027_u80FDListViews"><a href="#u8BD1_u6587_u8FDE_u63A5_uFF1A_u9AD8_u6027_u80FDListViews" class="headerlink" title="译文连接：高性能ListViews"></a>译文连接：<a href="https://github.com/bboyfeiyu/android-tech-frontier/blob/master/androidweekly/高性能ListViews/高性能ListViews.md">高性能ListViews</a></h2><p>列表展示功能几乎在所有app中都会被用到，使用列表可以很方便的展示一些列表项，比如菜谱、联系人，或者任意类型的类别。所以Android有一个内置的方式来展示此类型的数据，也是在情理之中的。RecyclerView是一种最新的展示列表数据的方式，它非常高效，因为它重用视图而不是每一行出现在屏幕上都重新创建。在RecyclerView出现之前，我们可以使用ListView，即使到了现在，ListView也是广泛的被开发者所使用。虽然ListView也是可以回收视图的，但它也一直都是Android中最容易被错误使用的一个控件。我们知道在此之前这个话题已经被写过无数遍了，但是今天我还是要在博客中提出来，因为我们仍然发现很多app在错误的使用它们。</p>
<p>关于ListView中ArrayAdapter的用法，标准的新手写法是这样子的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;public View getView(int position, View convertView, ViewGroup parent) &#123;&#10; &#10;    LayoutInflater inflater = (LayoutInflater) context&#10;            .getSystemService(Context.LAYOUT_INFLATER_SERVICE);&#10;    View rowView = inflater.inflate(R.layout.view_test_row, parent, false);&#10; &#10;    TextView testName = (TextView)rowView.findViewById(R.id.text_view_test_name);&#10;    TextView testDesc = (TextView)rowView.findViewById(R.id.text_view_test_desc);&#10; &#10;    //modify TextViews, in some arbitrary way&#10; &#10;    return rowView;&#10;&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="译文" scheme="http://www.liuling123.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android带多选功能的PhotoPicker]]></title>
    <link href="http://www.liuling123.com/2015/11/android-multi-photo-picker.html"/>
    <id>http://www.liuling123.com/2015/11/android-multi-photo-picker.html</id>
    <published>2015-11-21T07:46:03.000Z</published>
    <updated>2016-01-03T07:01:45.000Z</updated>
    <content type="html"><![CDATA[<p>最近利用闲碎的一些时间开发了一个Android库<a href="https://github.com/liuling07/PhotoPicker" target="_blank" rel="external">PhotoPicker</a>，前面一篇文章也介绍了，<a href="http://www.liuling123.com/2015/11/android-photo-picker.html">Android高仿微信图片选择功能的PhotoPicker</a>，之前没有加入选择多张图片的功能，现在加上之后一个完整的PhotoPicker库终于算是完工了。</p>
<h2 id="u52A8_u6001_u6548_u679C_u56FE"><a href="#u52A8_u6001_u6548_u679C_u56FE" class="headerlink" title="动态效果图"></a><strong>动态效果图</strong></h2><p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/photo-picker-sample.gif?watermark/1/image/aHR0cDovLzd4bnFtNC5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS93YXRlcm1hcmsucG5n/dissolve/50/gravity/SouthEast" alt="Android带多选功能的PhotoPicker示例图片" title="Android带多选功能的PhotoPicker示例图片"></p>
<a id="more"></a>
<h2 id="u4F7F_u7528_u65B9_u6CD5"><a href="#u4F7F_u7528_u65B9_u6CD5" class="headerlink" title="使用方法"></a><strong>使用方法</strong></h2><p>引入PhotoPicker库，在需要使用图片选择功能的地方添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(MainActivity.this, PhotoPickerActivity.class);&#10;intent.putExtra(PhotoPickerActivity.EXTRA_SHOW_CAMERA, showCamera);&#10;intent.putExtra(PhotoPickerActivity.EXTRA_SELECT_MODE, selectedMode);&#10;intent.putExtra(PhotoPickerActivity.EXTRA_MAX_MUN, maxNum);&#10;startActivityForResult(intent, PICK_PHOTO);</span><br></pre></td></tr></table></figure></p>
<p>并且重写activity的onActivityResult方法，处理返回结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;&#10;    super.onActivityResult(requestCode, resultCode, data);&#10;    if(requestCode == PICK_PHOTO)&#123;&#10;        if(resultCode == RESULT_OK)&#123;&#10;             ArrayList&#60;String&#62; result = data.getStringArrayListExtra(PhotoPickerActivity.KEY_RESULT);&#10;            //do what you want to to.&#10;        &#125;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>源码地址：<a href="https://github.com/liuling07/PhotoPicker" target="_blank" rel="external">https://github.com/liuling07/PhotoPicker</a>，欢迎fork和star。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近利用闲碎的一些时间开发了一个Android库<a href="https://github.com/liuling07/PhotoPicker">PhotoPicker</a>，前面一篇文章也介绍了，<a href="http://www.liuling123.com/2015/11/android-photo-picker.html">Android高仿微信图片选择功能的PhotoPicker</a>，之前没有加入选择多张图片的功能，现在加上之后一个完整的PhotoPicker库终于算是完工了。</p>
<h2 id="u52A8_u6001_u6548_u679C_u56FE"><a href="#u52A8_u6001_u6548_u679C_u56FE" class="headerlink" title="动态效果图"></a><strong>动态效果图</strong></h2><p><img src="http://7xnqm4.com1.z0.glb.clouddn.com/photo-picker-sample.gif?watermark/1/image/aHR0cDovLzd4bnFtNC5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS93YXRlcm1hcmsucG5n/dissolve/50/gravity/SouthEast" alt="Android带多选功能的PhotoPicker示例图片" title="Android带多选功能的PhotoPicker示例图片"></p>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="图片选择" scheme="http://www.liuling123.com/tags/%E5%9B%BE%E7%89%87%E9%80%89%E6%8B%A9/"/>
    
      <category term="开源" scheme="http://www.liuling123.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android高仿微信图片选择功能的PhotoPicker]]></title>
    <link href="http://www.liuling123.com/2015/11/android-photo-picker.html"/>
    <id>http://www.liuling123.com/2015/11/android-photo-picker.html</id>
    <published>2015-11-15T12:25:01.000Z</published>
    <updated>2016-01-03T07:02:06.000Z</updated>
    <content type="html"><![CDATA[<p>类似于微信修改头像的功能基本上每个app都会有，以前公司开发的项目就有修改头像的功能，但是用的Android系统自带的图片选择器。用Android系统的图片选择器有个好处就是稳定，不会有什么问题。但也有它的缺点，比如不可定制，我们想要修改一下符合自己app的风格无法做到。</p>
<p>既然大部分app都要用到图片选择器，为啥我不自己写一个呢？难不成每次都用系统自带的？那显得太没水平。所以，我就有了一个自己编写一个图片选择器的想法，以后只要有项目需要这个功能，直接拿来用就行了，这多爽！</p>
<p>其实github上也有很多大牛写的图片选择开源库，虽然大家一直都推崇不要重复造轮子这个观念，但是我却不这么认为，同样是轮子，也有不同价格、不同品牌的呢，难不成有了一个制造商生产了轮子，其他厂商就没必要做了吗？所以说，重复造轮子也是有意义的，至少你知道轮子是怎么造的。</p>
<a id="more"></a>
<p>好了，闲话不多说，先看看效果图：</p>
<p>1、图片选择效果<br><img src="http://7xnqm4.com1.z0.glb.clouddn.com/photo-picker-sample01.png?watermark/1/image/aHR0cDovLzd4bnFtNC5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS93YXRlcm1hcmsucG5n/dissolve/50/gravity/SouthEast" alt="Android高仿微信图片选择功能的PhotoPicker示例图片1" title="Android高仿微信图片选择功能的PhotoPicker示例图片1"></p>
<p>2、弹出文件夹选择效果：<br><img src="http://7xnqm4.com1.z0.glb.clouddn.com/photo-picker-sample02.png?watermark/1/image/aHR0cDovLzd4bnFtNC5jb20xLnowLmdsYi5jbG91ZGRuLmNvbS93YXRlcm1hcmsucG5n/dissolve/50/gravity/SouthEast" alt="Android高仿微信图片选择功能的PhotoPicker示例图片2" title="Android高仿微信图片选择功能的PhotoPicker示例图片2"></p>
<p>这里博主还是只模范微信的头像选择功能，也就是单张图片的选取。而微信发送图片消息的多张图片选择，暂时还没有做。主要是博主现在要学习C++，要快速熟悉cocos2dx的开发，没有时间去弄。后面有时间会把多图选择功能加上。</p>
<p>博主测试3部手机，vivo x3s 826张图片、联想A800 1231张、中兴V955 762张均为出现OOM，且图片加载很流畅。由于测试覆盖率不够，程序难免还会存在一些bug，如果有还望各位不吝指正，谢谢！</p>
<p>这里代码我就不贴了，需要的直接去博主github上fork源码，欢迎fork和star。</p>
<p>源码地址：<a href="https://github.com/liuling07/PhotoPicker" target="_blank" rel="external">https://github.com/liuling07/PhotoPicker</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>类似于微信修改头像的功能基本上每个app都会有，以前公司开发的项目就有修改头像的功能，但是用的Android系统自带的图片选择器。用Android系统的图片选择器有个好处就是稳定，不会有什么问题。但也有它的缺点，比如不可定制，我们想要修改一下符合自己app的风格无法做到。</p>
<p>既然大部分app都要用到图片选择器，为啥我不自己写一个呢？难不成每次都用系统自带的？那显得太没水平。所以，我就有了一个自己编写一个图片选择器的想法，以后只要有项目需要这个功能，直接拿来用就行了，这多爽！</p>
<p>其实github上也有很多大牛写的图片选择开源库，虽然大家一直都推崇不要重复造轮子这个观念，但是我却不这么认为，同样是轮子，也有不同价格、不同品牌的呢，难不成有了一个制造商生产了轮子，其他厂商就没必要做了吗？所以说，重复造轮子也是有意义的，至少你知道轮子是怎么造的。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="图片选择" scheme="http://www.liuling123.com/tags/%E5%9B%BE%E7%89%87%E9%80%89%E6%8B%A9/"/>
    
      <category term="开源" scheme="http://www.liuling123.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[科学上网工具Lantern，轻松访问Google、Facebook等被墙网站]]></title>
    <link href="http://www.liuling123.com/2015/11/lantern.html"/>
    <id>http://www.liuling123.com/2015/11/lantern.html</id>
    <published>2015-11-11T14:13:18.000Z</published>
    <updated>2016-01-03T03:00:03.000Z</updated>
    <content type="html"><![CDATA[<p>给大家推荐一个科学上网的工具，轻松就可以访问google、facebook等被墙的网站：<a href="https://github.com/liuling07/Lantern" target="_blank" rel="external">下载Lantern</a></p>
<p>下载lantern.exe.fbd文件，将.fbd后缀去掉，双击运行即可。可能360会阻止运行，要点击允许。</p>
<p>如下图：<br><a href="http://www.liuling123.com/wp-content/uploads/2015/11/QQ图片20151111215158.png"><img src="http://www.liuling123.com/wp-content/uploads/2015/11/QQ图片20151111215158-300x129.png" alt="科学上网工具"></a></p>
<p>该工具只能用于PC端浏览器浏览被墙网站，一般查资料够用了。如果需要玩游戏或者其他用途，建议还是买VPN。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>给大家推荐一个科学上网的工具，轻松就可以访问google、facebook等被墙的网站：<a href="https://github.com/liuling07/Lantern" target="_blank" rel="external">下载Lantern</a></]]>
    </summary>
    
      <category term="科学上网" scheme="http://www.liuling123.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="其他技术" scheme="http://www.liuling123.com/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL导入数据报Got a packet bigger than‘max_allowed_packet’bytes错误的解决方法]]></title>
    <link href="http://www.liuling123.com/2015/11/max-allowed-packet.html"/>
    <id>http://www.liuling123.com/2015/11/max-allowed-packet.html</id>
    <published>2015-11-11T13:00:54.000Z</published>
    <updated>2016-01-03T03:00:03.000Z</updated>
    <content type="html"><![CDATA[<p>   今天将博客的数据库进行了迁移，在执行sql脚本的时候报了Got a packet bigger than‘max_allowed_packet’bytes的错误，上网搜了一下，发现是由于max_allowed_packet的值设置过小的原因，知道原因就好办了，只需要将max_allowed_packet值设置大一点就OK了。<br>   通过终端进入mysql控制台，输入如下命令可以查看max_allowed_packet值的大小。<br>   show VARIABLES like ‘%max_allowed_packet%’;<br>显示的结果为：</p>
<p>+——————–+———+<br>| Variable_name      | Value   |<br>+——————–+———+<br>| max_allowed_packet | 1048576 |<br>+——————–+———+</p>
<p>以上说明目前的配置是：1M<br>执行一下命令可以将max_allowed_packet的值设置大一点：<br>set global max_allowed_packet = 2<em>1024</em>1024*10<br>退出mysql命令行，然后重新登录。<br>show VARIABLES like ‘%max_allowed_packet%’;</p>
<p>设置完之后，再重新导入数据，OK，一切正常。</p>
<p>注意，使用这种方法，重启服务器之后又恢复默认值了。这里博主只是导数据的时候临时将其值设置大一点，导完之后尽量让其恢复原值，因为max_allowed_packet设置过大可能会导致服务器太忙来不及接收，网络差的时候也可能会出现丢包的现象。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>   今天将博客的数据库进行了迁移，在执行sql脚本的时候报了Got a packet bigger than‘max_allowed_packet’bytes的错误，上网搜了一下，发现是由于max_allowed_packet的值设置过小的原因，知道原因就好办了，只需要将]]>
    </summary>
    
      <category term="mysql" scheme="http://www.liuling123.com/tags/mysql/"/>
    
      <category term="其他技术" scheme="http://www.liuling123.com/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++学习随笔]]></title>
    <link href="http://www.liuling123.com/2015/11/cpp-study.html"/>
    <id>http://www.liuling123.com/2015/11/cpp-study.html</id>
    <published>2015-11-10T11:28:33.000Z</published>
    <updated>2016-01-03T07:07:40.000Z</updated>
    <content type="html"><![CDATA[<p>最近由于公司部门调整，博主被安排去做游戏开发了，使用的是cocos2d游戏引擎，开发语言为C++。所以硬着头皮边熟悉cocos2d边学C++。对于写了多年Java的来说，看C++代码很坑爹有木有。<br>但是作为Android工程师，C/C++还是有必要学的，因为Android系统源码大部分都是C写的。之前看过一段时间的Android源码，看到C++部分也是比较吃力，现在借此机会学学C++也是挺不错的。<br>下面简单记录在学习C++过程中遇到的一些不懂的东西（持续更新）。</p>
<p><strong>std::nothrow</strong></p>
<p>在内存不足时，new (std::nothrow)并不抛出异常，而是将指针置NULL。<br>如：auto layer = new (std::nothrow) FirstLayer();</p>
<p><strong>auto</strong><br>auto是C++11的新特性，自动类型推断，用于从初始化表达式中推断出变量的数据类型，有点类似于js中的弱类型var。<br><a id="more"></a><br><strong>#pragma once</strong><br>只要在头文件的最开始加入这条杂注，就能够保证头文件只被编译一次。但是是依赖编译器的，可以使用宏定义#ifndef</p>
<p><strong>#ifndef，#define，#endif</strong><br>C/C++语言中的宏定义，通过宏定义避免文件多次编译</p>
<p><strong>#if与if的区别</strong></p>
<p>#endif//与#if对应<br>作为一个编译“开关”，比如：   </p>
<p>#if(条件满足)<br>  执行代码1   </p>
<p>#else<br>  执行代码2   </p>
<p>#endif<br>假如编译时，确实满足条件，则生成的程序文件(.exe文件)中不会有执行代码2的。如果用普通if语句，生成的程序文件就会有执行代码2，这个区别看看生成文件大小就可以知道。如果你的条件在程序编译前就已经确定了，那就用#if；如果条件需要在程序运行过程中才能判断，则用if。</p>
<p><strong>static_cast</strong><br>用法：static_cast &lt; type-id &gt; ( expression )<br>该运算符把expression转换为type-id类型，但没有运行时类型检查来保证转换的安全性。有点类似于Java中的强制转换。</p>
<p><strong>string与int拼接</strong><br>1、stringstream拼接string与int</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringstream ss;&#10;ss &#60;&#60; &#34;old:&#34;&#60;&#60; GameOverScene::goldNum &#60;&#60; &#34;,distance:&#34; &#60;&#60; GameOverScene::distance;&#10;LabelTTF* goldAndDistanceLabel = LabelTTF::create(ss.str(), &#34;Arial&#34;, 30);</span><br></pre></td></tr></table></figure>
<p>2、sprintf函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char countBuf[16] = &#34;&#34;;&#10;sprintf(countBuf, &#34;distance:%d&#34;, mDistance);</span><br></pre></td></tr></table></figure>
<p>3、std::to_string函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string s = &#34;run0&#34; + std::to_string(i) + &#34;.png&#34;;</span><br></pre></td></tr></table></figure>
<p>安卓没有to_string这个函数，eclipse中编译出错，为了跨平台，尽量使用stringstream或者sprintf</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近由于公司部门调整，博主被安排去做游戏开发了，使用的是cocos2d游戏引擎，开发语言为C++。所以硬着头皮边熟悉cocos2d边学C++。对于写了多年Java的来说，看C++代码很坑爹有木有。<br>但是作为Android工程师，C/C++还是有必要学的，因为Android系统源码大部分都是C写的。之前看过一段时间的Android源码，看到C++部分也是比较吃力，现在借此机会学学C++也是挺不错的。<br>下面简单记录在学习C++过程中遇到的一些不懂的东西（持续更新）。</p>
<p><strong>std::nothrow</strong></p>
<p>在内存不足时，new (std::nothrow)并不抛出异常，而是将指针置NULL。<br>如：auto layer = new (std::nothrow) FirstLayer();</p>
<p><strong>auto</strong><br>auto是C++11的新特性，自动类型推断，用于从初始化表达式中推断出变量的数据类型，有点类似于js中的弱类型var。<br>]]>
    
    </summary>
    
      <category term="c++" scheme="http://www.liuling123.com/tags/c/"/>
    
      <category term="其他技术" scheme="http://www.liuling123.com/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView的使用]]></title>
    <link href="http://www.liuling123.com/2015/11/recyclerview-example.html"/>
    <id>http://www.liuling123.com/2015/11/recyclerview-example.html</id>
    <published>2015-11-04T05:31:59.000Z</published>
    <updated>2016-01-03T07:38:20.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u4EC0_u4E48_u662FRecyclerView"><a href="#u4EC0_u4E48_u662FRecyclerView" class="headerlink" title="什么是RecyclerView"></a>什么是RecyclerView</h1><pre><code>RecyclerView是Android 5.0 materials design中的组件之一，相应的还有CardView、Palette等。看名字我们就能看出一点端倪，没错，它主要的特点就是复用。我们知道，Listview中的Adapter中可以实现ViewHolder的复用。RecyclerView提供了一个耦合度更低的方式来复用ViewHolder，并且可以轻松的实现ListView、GridView以及瀑布流的效果。
</code></pre><h1 id="RecyclerView_u7684_u7528_u6CD5"><a href="#RecyclerView_u7684_u7528_u6CD5" class="headerlink" title="RecyclerView的用法"></a>RecyclerView的用法</h1><pre><code>首先我们要gradle的依赖库中添加  compile &apos;com.android.support:recyclerview-v7:21.+&apos;  。如果是eclipse直接导入android-support-v7-recyclerview.jar就可以了。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/**&#10;* &#35774;&#32622;Adapter&#10;*/&#10;mRecyclerView.setAdapter(mListAdapter);&#10;/**&#10;* &#35774;&#32622;&#24067;&#23616;&#31649;&#29702;&#22120;&#10;*/&#10;mRecyclerView.setLayoutManager(linearLayoutManager);&#10;/**&#10;* &#35774;&#32622;item&#20998;&#21106;&#32447;&#10;*/&#10;mRecyclerView.addItemDecoration(itemDecoration);&#10;/**&#10;* &#35774;&#32622;item&#21160;&#30011;&#10;*/&#10;mRecyclerView.setItemAnimator(new DefaultItemAnimator());</span><br></pre></td></tr></table></figure>
<p>使用RecyclerView，基本上要上面四步。相比ListView只需设置Adapter而言，RecyclerView的使用看起来似乎要复杂一些。但是它的可定制性更高了，你可以自己定制自己的分割线样式或者是item的的动画。  </p>
<a id="more"></a>
<p>下面我们看下如何使用RecyclerView简单实现ListView的效果。<br>activity:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package com.bbk.lling.recyclerview;&#10;&#10;import android.support.v7.app.ActionBarActivity;&#10;import android.os.Bundle;&#10;import android.support.v7.widget.DefaultItemAnimator;&#10;import android.support.v7.widget.LinearLayoutManager;&#10;import android.support.v7.widget.RecyclerView;&#10;import android.view.Menu;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.Toast;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * @Class: ListLayoutActivity&#10; * @Description: RecycleView&#23454;&#29616;listview&#30340;&#21151;&#33021;&#10; * @author: lling(www.liuling123.com)&#10; * @Date: 2015/10/29&#10; */&#10;public class ListLayoutActivity extends ActionBarActivity &#123;&#10;&#10;    private RecyclerView mRecyclerView;&#10;    private ListAdapter mListAdapter;&#10;    private List&#38;lt;String&#38;gt; mDatas;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) &#123;&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_list_layout);&#10;        initData();&#10;        mRecyclerView = (RecyclerView) findViewById(R.id.recyclerview);&#10;        mListAdapter = new ListAdapter(this, mDatas);&#10;        mListAdapter.setOnItemClickListener(new ListAdapter.OnItemClickListener() &#123;&#10;            @Override&#10;            public void onItemClick(View view, int position) &#123;&#10;                Toast.makeText(ListLayoutActivity.this, &#38;quot;Click&#38;quot; + mDatas.get(position), Toast.LENGTH_SHORT).show();&#10;            &#125;&#10;&#10;            @Override&#10;            public void onItemLongClick(View view, int position) &#123;&#10;                mListAdapter.remove(position); //remove the item&#10;                Toast.makeText(ListLayoutActivity.this, &#38;quot;LongClick&#38;quot; + mDatas.get(position), Toast.LENGTH_SHORT).show();&#10;            &#125;&#10;        &#125;);&#10;        mRecyclerView.setAdapter(mListAdapter);&#10;        /**&#10;         * &#35774;&#32622;&#24067;&#23616;&#31649;&#29702;&#22120;&#65292;listview&#39118;&#26684;&#21017;&#35774;&#32622;&#20026;LinearLayoutManager&#10;         * gridview&#39118;&#26684;&#21017;&#35774;&#32622;&#20026;GridLayoutManager&#10;         * pu&#28689;&#24067;&#27969;&#39118;&#26684;&#30340;&#35774;&#32622;&#20026;StaggeredGridLayoutManager&#10;         */&#10;        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;        // &#35774;&#32622;item&#20998;&#10;        mRecyclerView.addItemDecoration(new ListItemDecoration(this, LinearLayoutManager.VERTICAL));&#10;        // &#35774;&#32622;item&#21160;&#30011;&#10;        mRecyclerView.setItemAnimator(new DefaultItemAnimator());&#10;&#10;    &#125;&#10;&#10;    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) &#123;&#10;        getMenuInflater().inflate(R.menu.menu_list_layout, menu);&#10;        return true;&#10;    &#125;&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) &#123;&#10;        switch (item.getItemId()) &#123;&#10;            case R.id.add_first:&#10;                mListAdapter.add(0, &#38;quot;add first&#38;quot;);&#10;                break;&#10;            case R.id.add_last:&#10;                mListAdapter.add(mListAdapter.getItemCount(), &#38;quot;add last&#38;quot;);&#10;                break;&#10;            case R.id.remove_first:&#10;                String value = mListAdapter.remove(0);&#10;                Toast.makeText(ListLayoutActivity.this, &#38;quot;remove:&#38;quot; + value, Toast.LENGTH_SHORT).show();&#10;                break;&#10;            case R.id.remove_last:&#10;                String value1 =  mListAdapter.remove(mListAdapter.getItemCount()-1);&#10;                Toast.makeText(ListLayoutActivity.this, &#38;quot;remove:&#38;quot; + value1, Toast.LENGTH_SHORT).show();&#10;                break;&#10;            case R.id.horizontal:&#10;                mRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));&#10;                mRecyclerView.addItemDecoration(new ListItemDecoration(this, LinearLayoutManager.HORIZONTAL));&#10;                break;&#10;            case R.id.vertical:&#10;                mRecyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;                mRecyclerView.addItemDecoration(new ListItemDecoration(this, LinearLayoutManager.VERTICAL));&#10;                break;&#10;        &#125;&#10;        return super.onOptionsItemSelected(item);&#10;    &#125;&#10;&#10;     /* ==========This Part is not necessary========= */&#10;&#10;    /**&#10;     * Create datas&#10;     */&#10;    protected void initData() &#123;&#10;        mDatas = new ArrayList&#38;lt;String&#38;gt;();&#10;        for (int i = 0; i &#38;lt; 100; i++) &#123;&#10;            mDatas.add(String.valueOf(i));&#10;        &#125;&#10;    &#125;&#10;&#10;    /* ==========This Part is not necessary========= */&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>activity布局：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;RelativeLayout xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#10;    xmlns:tools=&#34;http://schemas.android.com/tools&#34;&#10;    android:layout_width=&#34;match_parent&#34;&#10;    android:layout_height=&#34;match_parent&#34; &#62;&#10; &#10;    &#60;android.support.v7.widget.RecyclerView&#10;        android:id=&#34;@+id/recyclerview&#34;&#10;        android:layout_width=&#34;match_parent&#34;&#10;        android:layout_height=&#34;match_parent&#34; /&#62;&#10; &#10;&#60;/RelativeLayout&#62;</span><br></pre></td></tr></table></figure></p>
<p>Adapter：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package com.bbk.lling.recyclerview;&#10;&#10;import android.annotation.SuppressLint;&#10;import android.content.Context;&#10;import android.support.v7.widget.RecyclerView;&#10;import android.util.Log;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * @Class: ListAdapter&#10; * @Description: &#25968;&#25454;&#36866;&#37197;&#22120;&#10; * @author: lling(www.liuling123.com)&#10; * @Date: 2015/10/29&#10; */&#10;public class ListAdapter extends RecyclerView.Adapter&#60;ListAdapter.ItemViewHolder&#62; &#123;&#10;&#10;    private List&#38;lt;String&#38;gt; mDatas;&#10;    private LayoutInflater mInflater;&#10;    private OnItemClickListener mOnItemClickListener;&#10;&#10;    public ListAdapter(Context context, List&#38;lt;String&#38;gt; mDatas) &#123;&#10;        this.mDatas = mDatas;&#10;        mInflater = LayoutInflater.from(context);&#10;    &#125;&#10;&#10;    @Override&#10;    public int getItemCount() &#123;&#10;        return mDatas.size();&#10;    &#125;&#10;&#10;    @SuppressLint(&#38;quot;NewApi&#38;quot;)&#10;    @Override&#10;    public void onBindViewHolder(final ItemViewHolder itemViewHolder, final int i) &#123;&#10;        itemViewHolder.mTextView.setText(mDatas.get(i));&#10;        if(mOnItemClickListener != null) &#123;&#10;            /**&#10;             * &#36825;&#37324;&#21152;&#20102;&#21028;&#26029;&#65292;itemViewHolder.itemView.hasOnClickListeners()&#10;             * &#30446;&#30340;&#26159;&#20943;&#23569;&#23545;&#35937;&#30340;&#21019;&#24314;&#65292;&#22914;&#26524;&#24050;&#32463;&#20026;view&#35774;&#32622;&#20102;click&#30417;&#21548;&#20107;&#20214;,&#23601;&#19981;&#29992;&#37325;&#22797;&#35774;&#32622;&#20102;&#10;             * &#19981;&#28982;&#27599;&#27425;&#35843;&#29992;onBindViewHolder&#26041;&#27861;&#65292;&#37117;&#20250;&#21019;&#24314;&#20004;&#20010;&#30417;&#21548;&#20107;&#20214;&#23545;&#35937;&#65292;&#22686;&#21152;&#20102;&#20869;&#23384;&#30340;&#24320;&#38144;&#10;             */&#10;            if(!itemViewHolder.itemView.hasOnClickListeners()) &#123;&#10;                Log.e(&#38;quot;ListAdapter&#38;quot;, &#38;quot;setOnClickListener&#38;quot;);&#10;                itemViewHolder.itemView.setOnClickListener(new View.OnClickListener() &#123;&#10;                    @Override&#10;                    public void onClick(View v) &#123;&#10;                        int pos = itemViewHolder.getPosition();&#10;                        mOnItemClickListener.onItemClick(v, pos);&#10;                    &#125;&#10;                &#125;);&#10;                itemViewHolder.itemView.setOnLongClickListener(new View.OnLongClickListener() &#123;&#10;                    @Override&#10;                    public boolean onLongClick(View v) &#123;&#10;                        int pos = itemViewHolder.getPosition();&#10;                        mOnItemClickListener.onItemLongClick(v, pos);&#10;                        return true;&#10;                    &#125;&#10;                &#125;);&#10;            &#125;&#10;        &#125;&#10;    &#125;&#10;&#10;    @Override&#10;    public ItemViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) &#123;&#10;        /**&#10;         * &#20351;&#29992;RecyclerView&#65292;ViewHolder&#26159;&#21487;&#20197;&#22797;&#29992;&#30340;&#12290;&#36825;&#26681;&#20351;&#29992;ListView&#30340;VIewHolder&#22797;&#29992;&#26159;&#19968;&#26679;&#30340;&#10;         * ViewHolder&#21019;&#24314;&#30340;&#20010;&#25968;&#22909;&#20687;&#26159;&#21487;&#35265;item&#30340;&#20010;&#25968;+3&#10;         */&#10;        Log.e(&#38;quot;ListAdapter&#38;quot;, &#38;quot;onCreateViewHolder&#38;quot;);&#10;        ItemViewHolder holder = new ItemViewHolder(mInflater.inflate(&#10;                R.layout.item_layout, viewGroup, false));&#10;        return holder;&#10;    &#125;&#10;&#10;    /**&#10;     * &#21521;&#25351;&#23450;&#20301;&#32622;&#28155;&#21152;&#20803;&#32032;&#10;     * @param position&#10;     * @param value&#10;     */&#10;    public void add(int position, String value) &#123;&#10;        if(position &#38;gt; mDatas.size()) &#123;&#10;            position = mDatas.size();&#10;        &#125;&#10;        if(position &#38;lt; 0) &#123;&#10;            position = 0;&#10;        &#125;&#10;        mDatas.add(position, value);&#10;        /**&#10;         * &#20351;&#29992;notifyItemInserted/notifyItemRemoved&#20250;&#26377;&#21160;&#30011;&#25928;&#26524;&#10;         * &#32780;&#20351;&#29992;notifyDataSetChanged()&#21017;&#27809;&#26377;&#10;         */&#10;        notifyItemInserted(position);&#10;    &#125;&#10;&#10;    /**&#10;     * &#31227;&#38500;&#25351;&#23450;&#20301;&#32622;&#20803;&#32032;&#10;     * @param position&#10;     * @return&#10;     */&#10;    public String remove(int position) &#123;&#10;        if(position &#38;gt; mDatas.size()-1) &#123;&#10;            return null;&#10;        &#125;&#10;        String value = mDatas.remove(position);&#10;        notifyItemRemoved(position);&#10;        return value;&#10;    &#125;&#10;&#10;    public void setOnItemClickListener(OnItemClickListener mOnItemClickListener) &#123;&#10;        this.mOnItemClickListener = mOnItemClickListener;&#10;    &#125;&#10;&#10;    /**&#10;     * &#22788;&#29702;item&#30340;&#28857;&#20987;&#20107;&#20214;&#21644;&#38271;&#25353;&#20107;&#20214;&#10;     */&#10;    interface OnItemClickListener &#123;&#10;        public void onItemClick(View view, int position);&#10;        public void onItemLongClick(View view, int position);&#10;    &#125;&#10;&#10;    class ItemViewHolder extends RecyclerView.ViewHolder &#123;&#10;&#10;        private TextView mTextView;&#10;&#10;        public ItemViewHolder(View itemView) &#123;&#10;            super(itemView);&#10;            mTextView = (TextView) itemView.findViewById(R.id.textview);&#10;        &#125;&#10;    &#125;&#10;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里值得注意的是，RecyclerView并没有提供setOnItemClickListener方法来设置item的点击事件，所以这里我们自己来实现item的点击事件，这点很坑爹有木有？没有就自己设置呗！上面代码121-124定义了一个点击接口。然后给Adapter设置定义的接口对象，然后在onBindViewHolder中为每个holder设置点击事件就行了。但是有一点得注意，因为只要滑动RecyclerView，onBindViewHolder就会不停的调用，如果不加判断的话，则会不停的创建新的点击事件对象，浪费内存，所以在设置点击事件之前需要判断一下是否已经设置过了（如上面代码46行），如果设置过了就不需要创建了。</p>
<p>item的布局：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&#62;&#10;&#60;RelativeLayout xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#10;    android:layout_width=&#34;match_parent&#34;&#10;    android:layout_height=&#34;match_parent&#34;&#62;&#10;    &#60;TextView&#10;        android:id=&#34;@+id/textview&#34;&#10;        android:layout_width=&#34;wrap_content&#34;&#10;        android:layout_height=&#34;48dp&#34;&#10;        android:minWidth=&#34;48dp&#34;&#10;        android:gravity=&#34;center&#34;&#10;        android:layout_centerInParent=&#34;true&#34;&#10;        android:text=&#34;XXX&#34;/&#62;&#10;&#60;/RelativeLayout&#62;</span><br></pre></td></tr></table></figure></p>
<p>item分割线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package com.bbk.lling.recyclerview;&#10;&#10;import android.content.Context;&#10;import android.graphics.Canvas;&#10;import android.graphics.Rect;&#10;import android.graphics.drawable.Drawable;&#10;import android.support.v7.widget.LinearLayoutManager;&#10;import android.support.v7.widget.RecyclerView;&#10;import android.view.View;&#10;&#10;/**&#10; * @Class: ListItemDecoration&#10; * @Description: listview&#30340;item&#20998;&#21106;&#32447;&#10; * @author: lling(www.liuling123.com)&#10; * @Date: 2015/10/29&#10; */&#10;public class ListItemDecoration extends RecyclerView.ItemDecoration &#123;&#10;&#10;    private Drawable mDrawable;&#10;&#10;    private final static int DEFAULT_ORENTATION = LinearLayoutManager.VERTICAL;&#10;&#10;    private int mOrientation;&#10;&#10;    public ListItemDecoration(Context context, int orientation) &#123;&#10;        if(orientation != LinearLayoutManager.HORIZONTAL &#38;amp;&#38;amp; orientation != LinearLayoutManager.VERTICAL) &#123;&#10;            this.mOrientation = DEFAULT_ORENTATION;&#10;        &#125; else &#123;&#10;            this.mOrientation = orientation;&#10;        &#125;&#10;        mDrawable = context.getResources().getDrawable(R.drawable.divider);&#10;    &#125;&#10;&#10;    @Override&#10;    public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) &#123;&#10;        if(mOrientation == LinearLayoutManager.HORIZONTAL) &#123;&#10;            drawHorizontal(c, parent);&#10;        &#125; else &#123;&#10;            drawVertical(c, parent);&#10;        &#125;&#10;    &#125;&#10;&#10;    private void drawHorizontal(Canvas c, RecyclerView parent) &#123;&#10;        int top = parent.getPaddingTop();&#10;        int bottom = parent.getHeight() - parent.getPaddingBottom();&#10;&#10;        int childCount = parent.getChildCount();&#10;        for (int i = 0; i &#38;lt; childCount; i++) &#123;&#10;            View child = parent.getChildAt(i);&#10;            RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child&#10;                    .getLayoutParams();&#10;            int left = child.getRight() + params.rightMargin;&#10;            int right = left + mDrawable.getIntrinsicHeight();&#10;            mDrawable.setBounds(left, top, right, bottom);&#10;            mDrawable.draw(c);&#10;        &#125;&#10;    &#125;&#10;&#10;    private void drawVertical(Canvas c, RecyclerView parent) &#123;&#10;        int left = parent.getPaddingLeft();&#10;        int right = parent.getWidth() - parent.getPaddingRight();&#10;&#10;        int childCount = parent.getChildCount();&#10;        for (int i = 0; i &#38;lt; childCount; i++) &#123;&#10;            View child = parent.getChildAt(i);&#10;            android.support.v7.widget.RecyclerView v = new android.support.v7.widget.RecyclerView(parent.getContext());&#10;            RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child&#10;                    .getLayoutParams();&#10;            int top = child.getBottom() + params.bottomMargin;&#10;            int bottom = top + mDrawable.getIntrinsicHeight();&#10;            mDrawable.setBounds(left, top, right, bottom);&#10;            mDrawable.draw(c);&#10;        &#125;&#10;    &#125;&#10;&#10;    @Override&#10;    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) &#123;&#10;        super.getItemOffsets(outRect, view, parent, state);&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>divider.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&#62;&#10;&#60;shape xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; android:shape=&#34;rectangle&#34; &#62;&#10;    &#60;size android:height=&#34;1dp&#34; android:width=&#34;1dp&#34;/&#62;&#10;    &#60;!--&#60;solid android:color=&#34;#e0e0e0&#34;/&#62;--&#62;&#10;    &#60;solid android:color=&#34;#ff0000&#34;/&#62;&#10;&#60;/shape&#62;</span><br></pre></td></tr></table></figure></p>
<p>好了，ListView的效果已经实现了，看下效果图  </p>
<p><a href="https://raw.githubusercontent.com/liuling07/RecyclerView/master/example1.gif" target="_blank" rel="external"><img src="https://raw.githubusercontent.com/liuling07/RecyclerView/master/example1.gif" alt=""></a></p>
<p>RecyclerView实现GridView以及瀑布流效果的代码这里就不贴出来了，demo源码里面有，需要的可以下载看看。</p>
<p>demo源码下载：<a href="https://github.com/liuling07/RecyclerView" target="_blank" rel="external">https://github.com/liuling07/RecyclerView</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u4EC0_u4E48_u662FRecyclerView"><a href="#u4EC0_u4E48_u662FRecyclerView" class="headerlink" title="什么是RecyclerView"></a>什么是RecyclerView</h1><pre><code>RecyclerView是Android 5.0 materials design中的组件之一，相应的还有CardView、Palette等。看名字我们就能看出一点端倪，没错，它主要的特点就是复用。我们知道，Listview中的Adapter中可以实现ViewHolder的复用。RecyclerView提供了一个耦合度更低的方式来复用ViewHolder，并且可以轻松的实现ListView、GridView以及瀑布流的效果。
</code></pre><h1 id="RecyclerView_u7684_u7528_u6CD5"><a href="#RecyclerView_u7684_u7528_u6CD5" class="headerlink" title="RecyclerView的用法"></a>RecyclerView的用法</h1><pre><code>首先我们要gradle的依赖库中添加  compile &apos;com.android.support:recyclerview-v7:21.+&apos;  。如果是eclipse直接导入android-support-v7-recyclerview.jar就可以了。
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/**&#10;* &#35774;&#32622;Adapter&#10;*/&#10;mRecyclerView.setAdapter(mListAdapter);&#10;/**&#10;* &#35774;&#32622;&#24067;&#23616;&#31649;&#29702;&#22120;&#10;*/&#10;mRecyclerView.setLayoutManager(linearLayoutManager);&#10;/**&#10;* &#35774;&#32622;item&#20998;&#21106;&#32447;&#10;*/&#10;mRecyclerView.addItemDecoration(itemDecoration);&#10;/**&#10;* &#35774;&#32622;item&#21160;&#30011;&#10;*/&#10;mRecyclerView.setItemAnimator(new DefaultItemAnimator());</span><br></pre></td></tr></table></figure>
<p>使用RecyclerView，基本上要上面四步。相比ListView只需设置Adapter而言，RecyclerView的使用看起来似乎要复杂一些。但是它的可定制性更高了，你可以自己定制自己的分割线样式或者是item的的动画。  </p>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android自定义相机拍照、图片裁剪的实现]]></title>
    <link href="http://www.liuling123.com/2015/10/custom-camera.html"/>
    <id>http://www.liuling123.com/2015/10/custom-camera.html</id>
    <published>2015-10-28T07:00:00.000Z</published>
    <updated>2016-01-03T07:09:29.000Z</updated>
    <content type="html"><![CDATA[<p>　　<span style="font-size: 15px;">最近项目里面又要加一个拍照搜题的功能，也就是用户对着不会做的题目拍一张照片，将照片的文字使用ocr识别出来，再调用题库搜索接口搜索出来展示给用户，类似于小猿搜题、学霸君等app。<br></span></p>
<p>　　<span style="font-size: 15px;">其实Android提供Intent让我们打开系统的相机，但是系统相机跟自己app风格不搭，而且用起来体验不好。所以我使用了SDK提供的camera API自定义了一个相机，并且在相机界面上面添加了参考线，有助于用户将题目拍正，提高ocr的识别率。</span><br><a id="more"></a><br><span style="font-size: 15px;">　　1、绘制参考线的代码</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> ReferenceLine <span style="color: #0000ff;">extends</span><span style="color: #000000;"> View {<br></span><span style="color: #008080;"> 2</span><br><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Paint mLinePaint;<br></span><span style="color: #008080;"> 4</span><br><span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> ReferenceLine(Context context) {<br></span><span style="color: #008080;"> 6</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context);<br></span><span style="color: #008080;"> 7</span> <span style="color: #000000;">        init();<br></span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 9</span><br><span style="color: #008080;">10</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> ReferenceLine(Context context, AttributeSet attrs) {<br></span><span style="color: #008080;">11</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, attrs);<br></span><span style="color: #008080;">12</span> <span style="color: #000000;">        init();<br></span><span style="color: #008080;">13</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">14</span><br><span style="color: #008080;">15</span>     <span style="color: #0000ff;">public</span> ReferenceLine(Context context, AttributeSet attrs, <span style="color: #0000ff;">int</span><span style="color: #000000;"> defStyleAttr) {<br></span><span style="color: #008080;">16</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, attrs, defStyleAttr);<br></span><span style="color: #008080;">17</span> <span style="color: #000000;">        init();<br></span><span style="color: #008080;">18</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">19</span><br><span style="color: #008080;">20</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> init() {<br></span><span style="color: #008080;">21</span>         mLinePaint = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Paint();<br></span><span style="color: #008080;">22</span>         mLinePaint.setAntiAlias(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br></span><span style="color: #008080;">23</span>         mLinePaint.setColor(Color.parseColor(“#45e0e0e0”<span style="color: #000000;">));<br></span><span style="color: #008080;">24</span>         mLinePaint.setStrokeWidth(1<span style="color: #000000;">);<br></span><span style="color: #008080;">25</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">26</span><br><span style="color: #008080;">27</span><br><span style="color: #008080;">28</span><br><span style="color: #008080;">29</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">30</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDraw(Canvas canvas) {<br></span><span style="color: #008080;">31</span>         <span style="color: #0000ff;">int</span> screenWidth =<span style="color: #000000;"> Utils.getScreenWH(getContext()).widthPixels;<br></span><span style="color: #008080;">32</span>         <span style="color: #0000ff;">int</span> screenHeight =<span style="color: #000000;"> Utils.getScreenWH(getContext()).heightPixels;<br></span><span style="color: #008080;">33</span><br><span style="color: #008080;">34</span>         <span style="color: #0000ff;">int</span> width = screenWidth/3<span style="color: #000000;">;<br></span><span style="color: #008080;">35</span>         <span style="color: #0000ff;">int</span> height = screenHeight/3<span style="color: #000000;">;<br></span><span style="color: #008080;">36</span><br><span style="color: #008080;">37</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = width, j = 0;i &lt; screenWidth &amp;&amp; j<2;i +="width," j++<span="" style="color: #000000;">) {<br><span style="color: #008080;">38</span>             canvas.drawLine(i, 0<span style="color: #000000;">, i, screenHeight, mLinePaint);<br></span><span style="color: #008080;">39</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">40</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> j = height,i = 0;j &lt; screenHeight &amp;&amp; i &lt; 2;j += height,i++<span style="color: #000000;">) {<br></span><span style="color: #008080;">41</span>             canvas.drawLine(0<span style="color: #000000;">, j, screenWidth, j, mLinePaint);<br></span><span style="color: #008080;">42</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">43</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">44</span><br><span style="color: #008080;">45</span><br><span style="color: #008080;">46</span> }</2;i></pre><br></div>

<p>&nbsp;</p>
<p>　　<span style="font-size: 15px;">2、自定义相机代码</span></p>
<p><span style="font-size: 15px;">　　这里主要是要创建一个SurfaceView，将摄像头的预览界面放到SurfaceView中显示。</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.bbk.lling.camerademo.camare;<br></span><span style="color: #008080;">  2</span><br><span style="color: #008080;">  3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;<br></span><span style="color: #008080;">  4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.res.Configuration;<br></span><span style="color: #008080;">  5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.graphics.PixelFormat;<br></span><span style="color: #008080;">  6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.graphics.Rect;<br></span><span style="color: #008080;">  7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.hardware.Camera;<br></span><span style="color: #008080;">  8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.hardware.Camera.AutoFocusCallback;<br></span><span style="color: #008080;">  9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.hardware.Camera.PictureCallback;<br></span><span style="color: #008080;"> 10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.AttributeSet;<br></span><span style="color: #008080;"> 11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;<br></span><span style="color: #008080;"> 12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.MotionEvent;<br></span><span style="color: #008080;"> 13</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.SurfaceHolder;<br></span><span style="color: #008080;"> 14</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.SurfaceView;<br></span><span style="color: #008080;"> 15</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;<br></span><span style="color: #008080;"> 16</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.RelativeLayout;<br></span><span style="color: #008080;"> 17</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Toast;<br></span><span style="color: #008080;"> 18</span><br><span style="color: #008080;"> 19</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.bbk.lling.camerademo.utils.Utils;<br></span><span style="color: #008080;"> 20</span><br><span style="color: #008080;"> 21</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.IOException;<br></span><span style="color: #008080;"> 22</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.ArrayList;<br></span><span style="color: #008080;"> 23</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.Date;<br></span><span style="color: #008080;"> 24</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;<br></span><span style="color: #008080;"> 25</span><br><span style="color: #008080;"> 26</span> <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;"> 27</span> <span style="color: #008000;"> <em> @Class: CameraPreview<br></em></span><span style="color: #008080;"> 28</span> <span style="color: #008000;">  @Description: 自定义相机<br></span><span style="color: #008080;"> 29</span> <span style="color: #008000;"> <em> </em></span><span style="color: #808080;">@author</span><span style="color: #008000;">: lling(www.cnblogs.com/liuling)<br></span><span style="color: #008080;"> 30</span> <span style="color: #008000;">  @Date: 2015/10/25<br></span><span style="color: #008080;"> 31</span>  <span style="color: #008000;">*/</span><br><span style="color: #008080;"> 32</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> CameraPreview <span style="color: #0000ff;">extends</span> SurfaceView <span style="color: #0000ff;">implements</span><br><span style="color: #008080;"> 33</span> <span style="color: #000000;">        SurfaceHolder.Callback, AutoFocusCallback {<br></span><span style="color: #008080;"> 34</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String TAG = “CameraPreview”<span style="color: #000000;">;<br></span><span style="color: #008080;"> 35</span><br><span style="color: #008080;"> 36</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span> viewWidth = 0<span style="color: #000000;">;<br></span><span style="color: #008080;"> 37</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span> viewHeight = 0<span style="color: #000000;">;<br></span><span style="color: #008080;"> 38</span><br><span style="color: #008080;"> 39</span>     <span style="color: #008000;">/</span><span style="color: #008000;"> 监听接口 </span><span style="color: #008000;"><em>/</em></span><br><span style="color: #008080;"> 40</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> OnCameraStatusListener listener;<br></span><span style="color: #008080;"> 41</span><br><span style="color: #008080;"> 42</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> SurfaceHolder holder;<br></span><span style="color: #008080;"> 43</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Camera camera;<br></span><span style="color: #008080;"> 44</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> FocusView mFocusView;<br></span><span style="color: #008080;"> 45</span><br><span style="color: #008080;"> 46</span>     <span style="color: #008000;">//</span><span style="color: #008000;">创建一个PictureCallback对象，并实现其中的onPictureTaken方法</span><br><span style="color: #008080;"> 47</span>     <span style="color: #0000ff;">private</span> PictureCallback pictureCallback = <span style="color: #0000ff;">new</span><span style="color: #000000;"> PictureCallback() {<br></span><span style="color: #008080;"> 48</span><br><span style="color: #008080;"> 49</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 该方法用于处理拍摄后的照片数据</span><br><span style="color: #008080;"> 50</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;"> 51</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onPictureTaken(<span style="color: #0000ff;">byte</span><span style="color: #000000;">[] data, Camera camera) {<br></span><span style="color: #008080;"> 52</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 停止照片拍摄</span><br><span style="color: #008080;"> 53</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 54</span> <span style="color: #000000;">                camera.stopPreview();<br></span><span style="color: #008080;"> 55</span>             } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;"> 56</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;"> 57</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 调用结束事件</span><br><span style="color: #008080;"> 58</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> listener) {<br></span><span style="color: #008080;"> 59</span> <span style="color: #000000;">                listener.onCameraStopped(data);<br></span><span style="color: #008080;"> 60</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;"> 61</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 62</span> <span style="color: #000000;">    };<br></span><span style="color: #008080;"> 63</span><br><span style="color: #008080;"> 64</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> Preview类的构造方法</span><br><span style="color: #008080;"> 65</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> CameraPreview(Context context, AttributeSet attrs) {<br></span><span style="color: #008080;"> 66</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, attrs);<br></span><span style="color: #008080;"> 67</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 获得SurfaceHolder对象</span><br><span style="color: #008080;"> 68</span>         holder =<span style="color: #000000;"> getHolder();<br></span><span style="color: #008080;"> 69</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 指定用于捕捉拍照事件的SurfaceHolder.Callback对象</span><br><span style="color: #008080;"> 70</span>         holder.addCallback(<span style="color: #0000ff;">this</span><span style="color: #000000;">);<br></span><span style="color: #008080;"> 71</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 设置SurfaceHolder对象的类型</span><br><span style="color: #008080;"> 72</span> <span style="color: #000000;">        holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);<br></span><span style="color: #008080;"> 73</span> <span style="color: #000000;">        setOnTouchListener(onTouchListener);<br></span><span style="color: #008080;"> 74</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 75</span><br><span style="color: #008080;"> 76</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 在surface创建时激发</span><br><span style="color: #008080;"> 77</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> surfaceCreated(SurfaceHolder holder) {<br></span><span style="color: #008080;"> 78</span>         Log.e(TAG, “==surfaceCreated==”<span style="color: #000000;">);<br></span><span style="color: #008080;"> 79</span>         <span style="color: #0000ff;">if</span>(!<span style="color: #000000;">Utils.checkCameraHardware(getContext())) {<br></span><span style="color: #008080;"> 80</span>             Toast.makeText(getContext(), “摄像头打开失败！”<span style="color: #000000;">, Toast.LENGTH_SHORT).show();<br></span><span style="color: #008080;"> 81</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 82</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 83</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 获得Camera对象</span><br><span style="color: #008080;"> 84</span>         camera =<span style="color: #000000;"> getCameraInstance();<br></span><span style="color: #008080;"> 85</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 86</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 设置用于显示拍照摄像的SurfaceHolder对象</span><br><span style="color: #008080;"> 87</span> <span style="color: #000000;">            camera.setPreviewDisplay(holder);<br></span><span style="color: #008080;"> 88</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {<br></span><span style="color: #008080;"> 89</span> <span style="color: #000000;">            e.printStackTrace();<br></span><span style="color: #008080;"> 90</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> 释放手机摄像头</span><br><span style="color: #008080;"> 91</span> <span style="color: #000000;">            camera.release();<br></span><span style="color: #008080;"> 92</span>             camera = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 93</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 94</span> <span style="color: #000000;">        updateCameraParameters();<br></span><span style="color: #008080;"> 95</span>         <span style="color: #0000ff;">if</span> (camera != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;"> 96</span> <span style="color: #000000;">            camera.startPreview();<br></span><span style="color: #008080;"> 97</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 98</span> <span style="color: #000000;">        setFocus();<br></span><span style="color: #008080;"> 99</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">100</span><br><span style="color: #008080;">101</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 在surface销毁时激发</span><br><span style="color: #008080;">102</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> surfaceDestroyed(SurfaceHolder holder) {<br></span><span style="color: #008080;">103</span>         Log.e(TAG, “==surfaceDestroyed==”<span style="color: #000000;">);<br></span><span style="color: #008080;">104</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 释放手机摄像头</span><br><span style="color: #008080;">105</span> <span style="color: #000000;">        camera.release();<br></span><span style="color: #008080;">106</span>         camera = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">107</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">108</span><br><span style="color: #008080;">109</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 在surface的大小发生改变时激发</span><br><span style="color: #008080;">110</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> surfaceChanged(<span style="color: #0000ff;">final</span> SurfaceHolder holder, <span style="color: #0000ff;">int</span> format, <span style="color: #0000ff;">int</span><span style="color: #000000;"> w,<br></span><span style="color: #008080;">111</span>             <span style="color: #0000ff;">int</span><span style="color: #000000;"> h) {<br></span><span style="color: #008080;">112</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> stop preview before making changes</span><br><span style="color: #008080;">113</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">114</span> <span style="color: #000000;">            camera.stopPreview();<br></span><span style="color: #008080;">115</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e){<br></span><span style="color: #008080;">116</span>             <span style="color: #008000;">//</span><span style="color: #008000;"> ignore: tried to stop a non-existent preview</span><br><span style="color: #008080;">117</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">118</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> set preview size and make any resize, rotate or<br></span><span style="color: #008080;">119</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> reformatting changes here</span><br><span style="color: #008080;">120</span> <span style="color: #000000;">        updateCameraParameters();<br></span><span style="color: #008080;">121</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> start preview with new settings</span><br><span style="color: #008080;">122</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">123</span> <span style="color: #000000;">            camera.setPreviewDisplay(holder);<br></span><span style="color: #008080;">124</span> <span style="color: #000000;">            camera.startPreview();<br></span><span style="color: #008080;">125</span><br><span style="color: #008080;">126</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e){<br></span><span style="color: #008080;">127</span>             Log.d(TAG, “Error starting camera preview: “ +<span style="color: #000000;"> e.getMessage());<br></span><span style="color: #008080;">128</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">129</span> <span style="color: #000000;">        setFocus();<br></span><span style="color: #008080;">130</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">131</span><br><span style="color: #008080;">132</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">133</span> <span style="color: #008000;">      点击显示焦点区域<br></span><span style="color: #008080;">134</span>      <span style="color: #008000;"><em>/</em></span><br><span style="color: #008080;">135</span>     OnTouchListener onTouchListener = <span style="color: #0000ff;">new</span><span style="color: #000000;"> OnTouchListener() {<br></span><span style="color: #008080;">136</span>         @SuppressWarnings(“deprecation”<span style="color: #000000;">)<br></span><span style="color: #008080;">137</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;">138</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> onTouch(View v, MotionEvent event) {<br></span><span style="color: #008080;">139</span>             <span style="color: #0000ff;">if</span> (event.getAction() ==<span style="color: #000000;"> MotionEvent.ACTION_DOWN) {<br></span><span style="color: #008080;">140</span>                 <span style="color: #0000ff;">int</span> width =<span style="color: #000000;"> mFocusView.getWidth();<br></span><span style="color: #008080;">141</span>                 <span style="color: #0000ff;">int</span> height =<span style="color: #000000;"> mFocusView.getHeight();<br></span><span style="color: #008080;">142</span>                 mFocusView.setX(event.getX() - (width / 2<span style="color: #000000;">));<br></span><span style="color: #008080;">143</span>                 mFocusView.setY(event.getY() - (height / 2<span style="color: #000000;">));<br></span><span style="color: #008080;">144</span> <span style="color: #000000;">                mFocusView.beginFocus();<br></span><span style="color: #008080;">145</span>             } <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (event.getAction() ==<span style="color: #000000;"> MotionEvent.ACTION_UP) {<br></span><span style="color: #008080;">146</span> <span style="color: #000000;">                focusOnTouch(event);<br></span><span style="color: #008080;">147</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">148</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">true</span><span style="color: #000000;">;<br></span><span style="color: #008080;">149</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">150</span> <span style="color: #000000;">    };<br></span><span style="color: #008080;">151</span><br><span style="color: #008080;">152</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">153</span> <span style="color: #008000;">      获取摄像头实例<br></span><span style="color: #008080;">154</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@return</span><br><span style="color: #008080;">155</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">156</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Camera getCameraInstance() {<br></span><span style="color: #008080;">157</span>         Camera c = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">158</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">159</span>             <span style="color: #0000ff;">int</span> cameraCount = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">160</span>             Camera.CameraInfo cameraInfo = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Camera.CameraInfo();<br></span><span style="color: #008080;">161</span>             cameraCount = Camera.getNumberOfCameras(); <span style="color: #008000;">//</span><span style="color: #008000;"> get cameras number</span><br><span style="color: #008080;">162</span><br><span style="color: #008080;">163</span>             <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> camIdx = 0; camIdx &lt; cameraCount; camIdx++<span style="color: #000000;">) {<br></span><span style="color: #008080;">164</span>                 Camera.getCameraInfo(camIdx, cameraInfo); <span style="color: #008000;">//</span><span style="color: #008000;"> get camerainfo<br></span><span style="color: #008080;">165</span>                 <span style="color: #008000;">//</span><span style="color: #008000;"> 代表摄像头的方位，目前有定义值两个分别为CAMERA_FACING_FRONT前置和CAMERA_FACING_BACK后置</span><br><span style="color: #008080;">166</span>                 <span style="color: #0000ff;">if</span> (cameraInfo.facing ==<span style="color: #000000;"> Camera.CameraInfo.CAMERA_FACING_BACK) {<br></span><span style="color: #008080;">167</span>                     <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">168</span>                         c = Camera.open(camIdx);   <span style="color: #008000;">//</span><span style="color: #008000;">打开后置摄像头</span><br><span style="color: #008080;">169</span>                     } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (RuntimeException e) {<br></span><span style="color: #008080;">170</span>                         Toast.makeText(getContext(), “摄像头打开失败！”<span style="color: #000000;">, Toast.LENGTH_SHORT).show();<br></span><span style="color: #008080;">171</span> <span style="color: #000000;">                    }<br></span><span style="color: #008080;">172</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">173</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">174</span>             <span style="color: #0000ff;">if</span> (c == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">175</span>                 c = Camera.open(0); <span style="color: #008000;">//</span><span style="color: #008000;"> attempt to get a Camera instance</span><br><span style="color: #008080;">176</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">177</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;">178</span>             Toast.makeText(getContext(), “摄像头打开失败！”<span style="color: #000000;">, Toast.LENGTH_SHORT).show();<br></span><span style="color: #008080;">179</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">180</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> c;<br></span><span style="color: #008080;">181</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">182</span><br><span style="color: #008080;">183</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> updateCameraParameters() {<br></span><span style="color: #008080;">184</span>         <span style="color: #0000ff;">if</span> (camera != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">185</span>             Camera.Parameters p =<span style="color: #000000;"> camera.getParameters();<br></span><span style="color: #008080;">186</span><br><span style="color: #008080;">187</span> <span style="color: #000000;">            setParameters(p);<br></span><span style="color: #008080;">188</span><br><span style="color: #008080;">189</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">190</span> <span style="color: #000000;">                camera.setParameters(p);<br></span><span style="color: #008080;">191</span>             } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;">192</span>                 Camera.Size previewSize =<span style="color: #000000;"> findBestPreviewSize(p);<br></span><span style="color: #008080;">193</span> <span style="color: #000000;">                p.setPreviewSize(previewSize.width, previewSize.height);<br></span><span style="color: #008080;">194</span> <span style="color: #000000;">                p.setPictureSize(previewSize.width, previewSize.height);<br></span><span style="color: #008080;">195</span> <span style="color: #000000;">                camera.setParameters(p);<br></span><span style="color: #008080;">196</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">197</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">198</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">199</span><br><span style="color: #008080;">200</span>     <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;">201</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> p<br></span><span style="color: #008080;">202</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">203</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setParameters(Camera.Parameters p) {<br></span><span style="color: #008080;">204</span>         List<string> focusModes =<span style="color: #000000;"> p.getSupportedFocusModes();<br></span><span style="color: #008080;">205</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;"> (focusModes<br></span><span style="color: #008080;">206</span> <span style="color: #000000;">                .contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) {<br></span><span style="color: #008080;">207</span> <span style="color: #000000;">            p.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);<br></span><span style="color: #008080;">208</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">209</span><br><span style="color: #008080;">210</span>         <span style="color: #0000ff;">long</span> time = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date().getTime();<br></span><span style="color: #008080;">211</span> <span style="color: #000000;">        p.setGpsTimestamp(time);<br></span><span style="color: #008080;">212</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 设置照片格式</span><br><span style="color: #008080;">213</span> <span style="color: #000000;">        p.setPictureFormat(PixelFormat.JPEG);<br></span><span style="color: #008080;">214</span>         Camera.Size previewSize =<span style="color: #000000;"> findPreviewSizeByScreen(p);<br></span><span style="color: #008080;">215</span> <span style="color: #000000;">        p.setPreviewSize(previewSize.width, previewSize.height);<br></span><span style="color: #008080;">216</span> <span style="color: #000000;">        p.setPictureSize(previewSize.width, previewSize.height);<br></span><span style="color: #008080;">217</span> <span style="color: #000000;">        p.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);<br></span><span style="color: #008080;">218</span>         <span style="color: #0000ff;">if</span> (getContext().getResources().getConfiguration().orientation !=<span style="color: #000000;"> Configuration.ORIENTATION_LANDSCAPE) {<br></span><span style="color: #008080;">219</span>             camera.setDisplayOrientation(90<span style="color: #000000;">);<br></span><span style="color: #008080;">220</span>             p.setRotation(90<span style="color: #000000;">);<br></span><span style="color: #008080;">221</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">222</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">223</span><br><span style="color: #008080;">224</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 进行拍照，并将拍摄的照片传入PictureCallback接口的onPictureTaken方法</span><br><span style="color: #008080;">225</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> takePicture() {<br></span><span style="color: #008080;">226</span>         <span style="color: #0000ff;">if</span> (camera != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">227</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">228</span>                 camera.takePicture(<span style="color: #0000ff;">null</span>, <span style="color: #0000ff;">null</span><span style="color: #000000;">, pictureCallback);<br></span><span style="color: #008080;">229</span>             } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;">230</span> <span style="color: #000000;">                e.printStackTrace();<br></span><span style="color: #008080;">231</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">232</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">233</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">234</span><br><span style="color: #008080;">235</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 设置监听事件</span><br><span style="color: #008080;">236</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setOnCameraStatusListener(OnCameraStatusListener listener) {<br></span><span style="color: #008080;">237</span>         <span style="color: #0000ff;">this</span>.listener =<span style="color: #000000;"> listener;<br></span><span style="color: #008080;">238</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">239</span><br><span style="color: #008080;">240</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">241</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onAutoFocus(<span style="color: #0000ff;">boolean</span><span style="color: #000000;"> success, Camera camera) {<br></span><span style="color: #008080;">242</span><br><span style="color: #008080;">243</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">244</span><br><span style="color: #008080;">245</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> start() {<br></span><span style="color: #008080;">246</span>         <span style="color: #0000ff;">if</span> (camera != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">247</span> <span style="color: #000000;">            camera.startPreview();<br></span><span style="color: #008080;">248</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">249</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">250</span><br><span style="color: #008080;">251</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> stop() {<br></span><span style="color: #008080;">252</span>         <span style="color: #0000ff;">if</span> (camera != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">253</span> <span style="color: #000000;">            camera.stopPreview();<br></span><span style="color: #008080;">254</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">255</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">256</span><br><span style="color: #008080;">257</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;">258</span> <span style="color: #008000;">     <em> 相机拍照监听接口<br></em></span><span style="color: #008080;">259</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">260</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> OnCameraStatusListener {<br></span><span style="color: #008080;">261</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 相机拍照结束事件</span><br><span style="color: #008080;">262</span>         <span style="color: #0000ff;">void</span> onCameraStopped(<span style="color: #0000ff;">byte</span><span style="color: #000000;">[] data);<br></span><span style="color: #008080;">263</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">264</span><br><span style="color: #008080;">265</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">266</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span> onMeasure(<span style="color: #0000ff;">int</span> widthSpec, <span style="color: #0000ff;">int</span><span style="color: #000000;"> heightSpec) {<br></span><span style="color: #008080;">267</span>         viewWidth =<span style="color: #000000;"> MeasureSpec.getSize(widthSpec);<br></span><span style="color: #008080;">268</span>         viewHeight =<span style="color: #000000;"> MeasureSpec.getSize(heightSpec);<br></span><span style="color: #008080;">269</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onMeasure(<br></span><span style="color: #008080;">270</span> <span style="color: #000000;">                MeasureSpec.makeMeasureSpec(viewWidth, MeasureSpec.EXACTLY),<br></span><span style="color: #008080;">271</span> <span style="color: #000000;">                MeasureSpec.makeMeasureSpec(viewHeight, MeasureSpec.EXACTLY));<br></span><span style="color: #008080;">272</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">273</span><br><span style="color: #008080;">274</span>     <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;">275</span> <span style="color: #008000;">     <em> 将预览大小设置为屏幕大小<br></em></span><span style="color: #008080;">276</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> parameters<br></span><span style="color: #008080;">277</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@return</span><br><span style="color: #008080;">278</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">279</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Camera.Size findPreviewSizeByScreen(Camera.Parameters parameters) {<br></span><span style="color: #008080;">280</span>         <span style="color: #0000ff;">if</span> (viewWidth != 0 &amp;&amp; viewHeight != 0<span style="color: #000000;">) {<br></span><span style="color: #008080;">281</span>             <span style="color: #0000ff;">return</span> camera.<span style="color: #0000ff;">new</span><span style="color: #000000;"> Size(Math.max(viewWidth, viewHeight),<br></span><span style="color: #008080;">282</span> <span style="color: #000000;">                    Math.min(viewWidth, viewHeight));<br></span><span style="color: #008080;">283</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">284</span>             <span style="color: #0000ff;">return</span> camera.<span style="color: #0000ff;">new</span><span style="color: #000000;"> Size(Utils.getScreenWH(getContext()).heightPixels,<br></span><span style="color: #008080;">285</span> <span style="color: #000000;">                    Utils.getScreenWH(getContext()).widthPixels);<br></span><span style="color: #008080;">286</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">287</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">288</span><br><span style="color: #008080;">289</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;">290</span> <span style="color: #008000;">     <em> 找到最合适的显示分辨率 （防止预览图像变形）<br></em></span><span style="color: #008080;">291</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> parameters<br></span><span style="color: #008080;">292</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@return</span><br><span style="color: #008080;">293</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">294</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Camera.Size findBestPreviewSize(Camera.Parameters parameters) {<br></span><span style="color: #008080;">295</span><br><span style="color: #008080;">296</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 系统支持的所有预览分辨率</span><br><span style="color: #008080;">297</span>         String previewSizeValueString = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">298</span>         previewSizeValueString = parameters.get(“preview-size-values”<span style="color: #000000;">);<br></span><span style="color: #008080;">299</span><br><span style="color: #008080;">300</span>         <span style="color: #0000ff;">if</span> (previewSizeValueString == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">301</span>             previewSizeValueString = parameters.get(“preview-size-value”<span style="color: #000000;">);<br></span><span style="color: #008080;">302</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">303</span><br><span style="color: #008080;">304</span>         <span style="color: #0000ff;">if</span> (previewSizeValueString == <span style="color: #0000ff;">null</span>) { <span style="color: #008000;">//</span><span style="color: #008000;"> 有些手机例如m9获取不到支持的预览大小 就直接返回屏幕大小</span><br><span style="color: #008080;">305</span>             <span style="color: #0000ff;">return</span> camera.<span style="color: #0000ff;">new</span><span style="color: #000000;"> Size(Utils.getScreenWH(getContext()).widthPixels,<br></span><span style="color: #008080;">306</span> <span style="color: #000000;">                    Utils.getScreenWH(getContext()).heightPixels);<br></span><span style="color: #008080;">307</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">308</span>         <span style="color: #0000ff;">float</span> bestX = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">309</span>         <span style="color: #0000ff;">float</span> bestY = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">310</span><br><span style="color: #008080;">311</span>         <span style="color: #0000ff;">float</span> tmpRadio = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">312</span>         <span style="color: #0000ff;">float</span> viewRadio = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">313</span><br><span style="color: #008080;">314</span>         <span style="color: #0000ff;">if</span> (viewWidth != 0 &amp;&amp; viewHeight != 0<span style="color: #000000;">) {<br></span><span style="color: #008080;">315</span>             viewRadio = Math.min((<span style="color: #0000ff;">float</span>) viewWidth, (<span style="color: #0000ff;">float</span><span style="color: #000000;">) viewHeight)<br></span><span style="color: #008080;">316</span>                     / Math.max((<span style="color: #0000ff;">float</span>) viewWidth, (<span style="color: #0000ff;">float</span><span style="color: #000000;">) viewHeight);<br></span><span style="color: #008080;">317</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">318</span><br><span style="color: #008080;">319</span>         String[] COMMA_PATTERN = previewSizeValueString.split(“,”<span style="color: #000000;">);<br></span><span style="color: #008080;">320</span>         <span style="color: #0000ff;">for</span><span style="color: #000000;"> (String prewsizeString : COMMA_PATTERN) {<br></span><span style="color: #008080;">321</span>             prewsizeString =<span style="color: #000000;"> prewsizeString.trim();<br></span><span style="color: #008080;">322</span><br><span style="color: #008080;">323</span>             <span style="color: #0000ff;">int</span> dimPosition = prewsizeString.indexOf(‘x’<span style="color: #000000;">);<br></span><span style="color: #008080;">324</span>             <span style="color: #0000ff;">if</span> (dimPosition == -1<span style="color: #000000;">) {<br></span><span style="color: #008080;">325</span>                 <span style="color: #0000ff;">continue</span><span style="color: #000000;">;<br></span><span style="color: #008080;">326</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">327</span><br><span style="color: #008080;">328</span>             <span style="color: #0000ff;">float</span> newX = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">329</span>             <span style="color: #0000ff;">float</span> newY = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">330</span><br><span style="color: #008080;">331</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">332</span>                 newX = Float.parseFloat(prewsizeString.substring(0<span style="color: #000000;">, dimPosition));<br></span><span style="color: #008080;">333</span>                 newY = Float.parseFloat(prewsizeString.substring(dimPosition + 1<span style="color: #000000;">));<br></span><span style="color: #008080;">334</span>             } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (NumberFormatException e) {<br></span><span style="color: #008080;">335</span>                 <span style="color: #0000ff;">continue</span><span style="color: #000000;">;<br></span><span style="color: #008080;">336</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">337</span><br><span style="color: #008080;">338</span>             <span style="color: #0000ff;">float</span> radio = Math.min(newX, newY) /<span style="color: #000000;"> Math.max(newX, newY);<br></span><span style="color: #008080;">339</span>             <span style="color: #0000ff;">if</span> (tmpRadio == 0<span style="color: #000000;">) {<br></span><span style="color: #008080;">340</span>                 tmpRadio =<span style="color: #000000;"> radio;<br></span><span style="color: #008080;">341</span>                 bestX =<span style="color: #000000;"> newX;<br></span><span style="color: #008080;">342</span>                 bestY =<span style="color: #000000;"> newY;<br></span><span style="color: #008080;">343</span>             } <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span> (tmpRadio != 0 &amp;&amp; (Math.abs(radio - viewRadio)) &lt; (Math.abs(tmpRadio -<span style="color: #000000;"> viewRadio))) {<br></span><span style="color: #008080;">344</span>                 tmpRadio =<span style="color: #000000;"> radio;<br></span><span style="color: #008080;">345</span>                 bestX =<span style="color: #000000;"> newX;<br></span><span style="color: #008080;">346</span>                 bestY =<span style="color: #000000;"> newY;<br></span><span style="color: #008080;">347</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">348</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">349</span><br><span style="color: #008080;">350</span>         <span style="color: #0000ff;">if</span> (bestX &gt; 0 &amp;&amp; bestY &gt; 0<span style="color: #000000;">) {<br></span><span style="color: #008080;">351</span>             <span style="color: #0000ff;">return</span> camera.<span style="color: #0000ff;">new</span> Size((<span style="color: #0000ff;">int</span>) bestX, (<span style="color: #0000ff;">int</span><span style="color: #000000;">) bestY);<br></span><span style="color: #008080;">352</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">353</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">354</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">355</span><br><span style="color: #008080;">356</span>     <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;">357</span> <span style="color: #008000;">     <em> 设置焦点和测光区域<br></em></span><span style="color: #008080;">358</span> <span style="color: #008000;">     <br></span><span style="color: #008080;">359</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> event<br></span><span style="color: #008080;">360</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">361</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> focusOnTouch(MotionEvent event) {<br></span><span style="color: #008080;">362</span><br><span style="color: #008080;">363</span>         <span style="color: #0000ff;">int</span>[] location = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">int</span>[2<span style="color: #000000;">];<br></span><span style="color: #008080;">364</span>         RelativeLayout relativeLayout =<span style="color: #000000;"> (RelativeLayout)getParent();<br></span><span style="color: #008080;">365</span> <span style="color: #000000;">        relativeLayout.getLocationOnScreen(location);<br></span><span style="color: #008080;">366</span><br><span style="color: #008080;">367</span>         Rect focusRect =<span style="color: #000000;"> Utils.calculateTapArea(mFocusView.getWidth(),<br></span><span style="color: #008080;">368</span> <span style="color: #000000;">                mFocusView.getHeight(), 1f, event.getRawX(), event.getRawY(),<br></span><span style="color: #008080;">369</span>                 location[0], location[0] + relativeLayout.getWidth(), location[1<span style="color: #000000;">],<br></span><span style="color: #008080;">370</span>                 location[1] +<span style="color: #000000;"> relativeLayout.getHeight());<br></span><span style="color: #008080;">371</span>         Rect meteringRect =<span style="color: #000000;"> Utils.calculateTapArea(mFocusView.getWidth(),<br></span><span style="color: #008080;">372</span>                 mFocusView.getHeight(), 1.5f<span style="color: #000000;">, event.getRawX(), event.getRawY(),<br></span><span style="color: #008080;">373</span>                 location[0], location[0] + relativeLayout.getWidth(), location[1<span style="color: #000000;">],<br></span><span style="color: #008080;">374</span>                 location[1] +<span style="color: #000000;"> relativeLayout.getHeight());<br></span><span style="color: #008080;">375</span><br><span style="color: #008080;">376</span>         Camera.Parameters parameters =<span style="color: #000000;"> camera.getParameters();<br></span><span style="color: #008080;">377</span> <span style="color: #000000;">        parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);<br></span><span style="color: #008080;">378</span><br><span style="color: #008080;">379</span>         <span style="color: #0000ff;">if</span> (parameters.getMaxNumFocusAreas() &gt; 0<span style="color: #000000;">) {<br></span><span style="color: #008080;">380</span>             List<camera.area> focusAreas = <span style="color: #0000ff;">new</span> ArrayList<camera.area><span style="color: #000000;">();<br></span><span style="color: #008080;">381</span>             focusAreas.add(<span style="color: #0000ff;">new</span> Camera.Area(focusRect, 1000<span style="color: #000000;">));<br></span><span style="color: #008080;">382</span><br><span style="color: #008080;">383</span> <span style="color: #000000;">            parameters.setFocusAreas(focusAreas);<br></span><span style="color: #008080;">384</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">385</span><br><span style="color: #008080;">386</span>         <span style="color: #0000ff;">if</span> (parameters.getMaxNumMeteringAreas() &gt; 0<span style="color: #000000;">) {<br></span><span style="color: #008080;">387</span>             List<camera.area> meteringAreas = <span style="color: #0000ff;">new</span> ArrayList<camera.area><span style="color: #000000;">();<br></span><span style="color: #008080;">388</span>             meteringAreas.add(<span style="color: #0000ff;">new</span> Camera.Area(meteringRect, 1000<span style="color: #000000;">));<br></span><span style="color: #008080;">389</span><br><span style="color: #008080;">390</span> <span style="color: #000000;">            parameters.setMeteringAreas(meteringAreas);<br></span><span style="color: #008080;">391</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">392</span><br><span style="color: #008080;">393</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">394</span> <span style="color: #000000;">            camera.setParameters(parameters);<br></span><span style="color: #008080;">395</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;">396</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">397</span>         camera.autoFocus(<span style="color: #0000ff;">this</span><span style="color: #000000;">);<br></span><span style="color: #008080;">398</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">399</span><br><span style="color: #008080;">400</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;">401</span> <span style="color: #008000;">     <em> 设置聚焦的图片<br></em></span><span style="color: #008080;">402</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> focusView<br></span><span style="color: #008080;">403</span>      <span style="color: #008000;"><em>/</em></span><br><span style="color: #008080;">404</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setFocusView(FocusView focusView) {<br></span><span style="color: #008080;">405</span>         <span style="color: #0000ff;">this</span>.mFocusView =<span style="color: #000000;"> focusView;<br></span><span style="color: #008080;">406</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">407</span><br><span style="color: #008080;">408</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">409</span> <span style="color: #008000;">      设置自动聚焦，并且聚焦的圈圈显示在屏幕中间位置<br></span><span style="color: #008080;">410</span>      <span style="color: #008000;">*/</span><br><span style="color: #008080;">411</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setFocus() {<br></span><span style="color: #008080;">412</span>         <span style="color: #0000ff;">if</span>(!<span style="color: #000000;">mFocusView.isFocusing()) {<br></span><span style="color: #008080;">413</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">414</span>                 camera.autoFocus(<span style="color: #0000ff;">this</span><span style="color: #000000;">);<br></span><span style="color: #008080;">415</span>                 mFocusView.setX((Utils.getWidthInPx(getContext())-mFocusView.getWidth()) / 2<span style="color: #000000;">);<br></span><span style="color: #008080;">416</span>                 mFocusView.setY((Utils.getHeightInPx(getContext())-mFocusView.getHeight()) / 2<span style="color: #000000;">);<br></span><span style="color: #008080;">417</span> <span style="color: #000000;">                mFocusView.beginFocus();<br></span><span style="color: #008080;">418</span>             } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;">419</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">420</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">421</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">422</span><br><span style="color: #008080;">423</span> }</camera.area></camera.area></camera.area></camera.area></string></pre><br></div>

<p>　　<span style="font-size: 15px;">3、Activity中使用自定义相机</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> TakePhoteActivity <span style="color: #0000ff;">extends</span> Activity <span style="color: #0000ff;">implements</span><span style="color: #000000;"> CameraPreview.OnCameraStatusListener,<br></span><span style="color: #008080;">  2</span> <span style="color: #000000;">        SensorEventListener {<br></span><span style="color: #008080;">  3</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String TAG = “TakePhoteActivity”<span style="color: #000000;">;<br></span><span style="color: #008080;">  4</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> Uri IMAGE_URI =<span style="color: #000000;"> MediaStore.Images.Media.EXTERNAL_CONTENT_URI;<br></span><span style="color: #008080;">  5</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String PATH =<span style="color: #000000;"> Environment.getExternalStorageDirectory()<br></span><span style="color: #008080;">  6</span>             .toString() + “/AndroidMedia/“<span style="color: #000000;">;<br></span><span style="color: #008080;">  7</span> <span style="color: #000000;">    CameraPreview mCameraPreview;<br></span><span style="color: #008080;">  8</span> <span style="color: #000000;">    CropImageView mCropImageView;<br></span><span style="color: #008080;">  9</span> <span style="color: #000000;">    RelativeLayout mTakePhotoLayout;<br></span><span style="color: #008080;"> 10</span> <span style="color: #000000;">    LinearLayout mCropperLayout;<br></span><span style="color: #008080;"> 11</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 12</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {<br></span><span style="color: #008080;"> 13</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);<br></span><span style="color: #008080;"> 14</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 设置横屏<br></span><span style="color: #008080;"> 15</span> <span style="color: #008000;">//</span><span style="color: #008000;">        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);<br></span><span style="color: #008080;"> 16</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 设置全屏</span><br><span style="color: #008080;"> 17</span> <span style="color: #000000;">        requestWindowFeature(Window.FEATURE_NO_TITLE);<br></span><span style="color: #008080;"> 18</span> <span style="color: #000000;">        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,<br></span><span style="color: #008080;"> 19</span> <span style="color: #000000;">                WindowManager.LayoutParams.FLAG_FULLSCREEN);<br></span><span style="color: #008080;"> 20</span> <span style="color: #000000;">        setContentView(R.layout.activity_take_phote);<br></span><span style="color: #008080;"> 21</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> Initialize components of the app</span><br><span style="color: #008080;"> 22</span>         mCropImageView =<span style="color: #000000;"> (CropImageView) findViewById(R.id.CropImageView);<br></span><span style="color: #008080;"> 23</span>         mCameraPreview =<span style="color: #000000;"> (CameraPreview) findViewById(R.id.cameraPreview);<br></span><span style="color: #008080;"> 24</span>         FocusView focusView =<span style="color: #000000;"> (FocusView) findViewById(R.id.view_focus);<br></span><span style="color: #008080;"> 25</span>         mTakePhotoLayout =<span style="color: #000000;"> (RelativeLayout) findViewById(R.id.take_photo_layout);<br></span><span style="color: #008080;"> 26</span>         mCropperLayout =<span style="color: #000000;"> (LinearLayout) findViewById(R.id.cropper_layout);<br></span><span style="color: #008080;"> 27</span><br><span style="color: #008080;"> 28</span> <span style="color: #000000;">        mCameraPreview.setFocusView(focusView);<br></span><span style="color: #008080;"> 29</span>         mCameraPreview.setOnCameraStatusListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);<br></span><span style="color: #008080;"> 30</span>         mCropImageView.setGuidelines(2<span style="color: #000000;">);<br></span><span style="color: #008080;"> 31</span><br><span style="color: #008080;"> 32</span>         mSensorManager =<span style="color: #000000;"> (SensorManager) getSystemService(Context.<br></span><span style="color: #008080;"> 33</span> <span style="color: #000000;">                SENSOR_SERVICE);<br></span><span style="color: #008080;"> 34</span>         mAccel =<span style="color: #000000;"> mSensorManager.getDefaultSensor(Sensor.<br></span><span style="color: #008080;"> 35</span> <span style="color: #000000;">                TYPE_ACCELEROMETER);<br></span><span style="color: #008080;"> 36</span><br><span style="color: #008080;"> 37</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 38</span><br><span style="color: #008080;"> 39</span>     <span style="color: #0000ff;">boolean</span> isRotated = <span style="color: #0000ff;">false</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 40</span><br><span style="color: #008080;"> 41</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 42</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onResume() {<br></span><span style="color: #008080;"> 43</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onResume();<br></span><span style="color: #008080;"> 44</span>         <span style="color: #0000ff;">if</span>(!<span style="color: #000000;">isRotated) {<br></span><span style="color: #008080;"> 45</span>             TextView hint_tv =<span style="color: #000000;"> (TextView) findViewById(R.id.hint);<br></span><span style="color: #008080;"> 46</span>             ObjectAnimator animator = ObjectAnimator.ofFloat(hint_tv, “rotation”<span style="color: #000000;">, 0f, 90f);<br></span><span style="color: #008080;"> 47</span>             animator.setStartDelay(800<span style="color: #000000;">);<br></span><span style="color: #008080;"> 48</span>             animator.setDuration(1000<span style="color: #000000;">);<br></span><span style="color: #008080;"> 49</span>             animator.setInterpolator(<span style="color: #0000ff;">new</span><span style="color: #000000;"> LinearInterpolator());<br></span><span style="color: #008080;"> 50</span> <span style="color: #000000;">            animator.start();<br></span><span style="color: #008080;"> 51</span>             View view =<span style="color: #000000;">  findViewById(R.id.crop_hint);<br></span><span style="color: #008080;"> 52</span>             AnimatorSet animSet = <span style="color: #0000ff;">new</span><span style="color: #000000;"> AnimatorSet();<br></span><span style="color: #008080;"> 53</span>             ObjectAnimator animator1 = ObjectAnimator.ofFloat(view, “rotation”<span style="color: #000000;">, 0f, 90f);<br></span><span style="color: #008080;"> 54</span>             ObjectAnimator moveIn = ObjectAnimator.ofFloat(view, “translationX”, 0f, -<span style="color: #000000;">50f);<br></span><span style="color: #008080;"> 55</span> <span style="color: #000000;">            animSet.play(animator1).before(moveIn);<br></span><span style="color: #008080;"> 56</span>             animSet.setDuration(10<span style="color: #000000;">);<br></span><span style="color: #008080;"> 57</span> <span style="color: #000000;">            animSet.start();<br></span><span style="color: #008080;"> 58</span>             isRotated = <span style="color: #0000ff;">true</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 59</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 60</span>         mSensorManager.registerListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">, mAccel, SensorManager.SENSOR_DELAY_UI);<br></span><span style="color: #008080;"> 61</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 62</span><br><span style="color: #008080;"> 63</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 64</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onPause() {<br></span><span style="color: #008080;"> 65</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onPause();<br></span><span style="color: #008080;"> 66</span>         mSensorManager.unregisterListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);<br></span><span style="color: #008080;"> 67</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 68</span><br><span style="color: #008080;"> 69</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 70</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onConfigurationChanged(Configuration newConfig) {<br></span><span style="color: #008080;"> 71</span>         Log.e(TAG, “onConfigurationChanged”<span style="color: #000000;">);<br></span><span style="color: #008080;"> 72</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onConfigurationChanged(newConfig);<br></span><span style="color: #008080;"> 73</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 74</span><br><span style="color: #008080;"> 75</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> takePhoto(View view) {<br></span><span style="color: #008080;"> 76</span>         <span style="color: #0000ff;">if</span>(mCameraPreview != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;"> 77</span> <span style="color: #000000;">            mCameraPreview.takePicture();<br></span><span style="color: #008080;"> 78</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 79</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 80</span><br><span style="color: #008080;"> 81</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> close(View view) {<br></span><span style="color: #008080;"> 82</span> <span style="color: #000000;">        finish();<br></span><span style="color: #008080;"> 83</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 84</span><br><span style="color: #008080;"> 85</span>     <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;"> 86</span> <span style="color: #008000;">     <em> 关闭截图界面<br></em></span><span style="color: #008080;"> 87</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> view<br></span><span style="color: #008080;"> 88</span>      <span style="color: #008000;">*/</span><br><span style="color: #008080;"> 89</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> closeCropper(View view) {<br></span><span style="color: #008080;"> 90</span> <span style="color: #000000;">        showTakePhotoLayout();<br></span><span style="color: #008080;"> 91</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 92</span><br><span style="color: #008080;"> 93</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;"> 94</span> <span style="color: #008000;">     <em> 开始截图，并保存图片<br></em></span><span style="color: #008080;"> 95</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> view<br></span><span style="color: #008080;"> 96</span>      <span style="color: #008000;"><em>/</em></span><br><span style="color: #008080;"> 97</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> startCropper(View view) {<br></span><span style="color: #008080;"> 98</span>         <span style="color: #008000;">//</span><span style="color: #008000;">获取截图并旋转90度</span><br><span style="color: #008080;"> 99</span>         CropperImage cropperImage =<span style="color: #000000;"> mCropImageView.getCroppedImage();<br></span><span style="color: #008080;">100</span>         Log.e(TAG, cropperImage.getX() + “,” +<span style="color: #000000;"> cropperImage.getY());<br></span><span style="color: #008080;">101</span>         Log.e(TAG, cropperImage.getWidth() + “,” +<span style="color: #000000;"> cropperImage.getHeight());<br></span><span style="color: #008080;">102</span>         Bitmap bitmap = Utils.rotate(cropperImage.getBitmap(), -90<span style="color: #000000;">);<br></span><span style="color: #008080;">103</span> <span style="color: #008000;">//</span><span style="color: #008000;">        Bitmap bitmap = mCropImageView.getCroppedImage();<br></span><span style="color: #008080;">104</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 系统时间</span><br><span style="color: #008080;">105</span>         <span style="color: #0000ff;">long</span> dateTaken =<span style="color: #000000;"> System.currentTimeMillis();<br></span><span style="color: #008080;">106</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 图像名称</span><br><span style="color: #008080;">107</span>         String filename = DateFormat.format(“yyyy-MM-dd kk.mm.ss”<span style="color: #000000;">, dateTaken)<br></span><span style="color: #008080;">108</span>                 .toString() + “.jpg”<span style="color: #000000;">;<br></span><span style="color: #008080;">109</span>         Uri uri =<span style="color: #000000;"> insertImage(getContentResolver(), filename, dateTaken, PATH,<br></span><span style="color: #008080;">110</span>                 filename, bitmap, <span style="color: #0000ff;">null</span><span style="color: #000000;">);<br></span><span style="color: #008080;">111</span> <span style="color: #000000;">        cropperImage.getBitmap().recycle();<br></span><span style="color: #008080;">112</span>         cropperImage.setBitmap(<span style="color: #0000ff;">null</span><span style="color: #000000;">);<br></span><span style="color: #008080;">113</span>         Intent intent = <span style="color: #0000ff;">new</span> Intent(<span style="color: #0000ff;">this</span>, ShowCropperedActivity.<span style="color: #0000ff;">class</span><span style="color: #000000;">);<br></span><span style="color: #008080;">114</span> <span style="color: #000000;">        intent.setData(uri);<br></span><span style="color: #008080;">115</span>         intent.putExtra(“path”, PATH +<span style="color: #000000;"> filename);<br></span><span style="color: #008080;">116</span>         intent.putExtra(“width”<span style="color: #000000;">, bitmap.getWidth());<br></span><span style="color: #008080;">117</span>         intent.putExtra(“height”<span style="color: #000000;">, bitmap.getHeight());<br></span><span style="color: #008080;">118</span>         intent.putExtra(“cropperImage”<span style="color: #000000;">, cropperImage);<br></span><span style="color: #008080;">119</span> <span style="color: #000000;">        startActivity(intent);<br></span><span style="color: #008080;">120</span> <span style="color: #000000;">        bitmap.recycle();<br></span><span style="color: #008080;">121</span> <span style="color: #000000;">        finish();<br></span><span style="color: #008080;">122</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.overridePendingTransition(R.anim.fade_in,<br></span><span style="color: #008080;">123</span> <span style="color: #000000;">                R.anim.fade_out);<br></span><span style="color: #008080;">124</span> <span style="color: #008000;">//</span><span style="color: #008000;">        doAnimation(cropperImage);</span><br><span style="color: #008080;">125</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">126</span><br><span style="color: #008080;">127</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> doAnimation(CropperImage cropperImage) {<br></span><span style="color: #008080;">128</span>         ImageView imageView = <span style="color: #0000ff;">new</span> ImageView(<span style="color: #0000ff;">this</span><span style="color: #000000;">);<br></span><span style="color: #008080;">129</span>         View view = LayoutInflater.from(<span style="color: #0000ff;">this</span><span style="color: #000000;">).inflate(<br></span><span style="color: #008080;">130</span>                 R.layout.image_view_layout, <span style="color: #0000ff;">null</span><span style="color: #000000;">);<br></span><span style="color: #008080;">131</span> <span style="color: #000000;">        ((RelativeLayout) view.findViewById(R.id.root_layout)).addView(imageView);<br></span><span style="color: #008080;">132</span>         RelativeLayout relativeLayout =<span style="color: #000000;"> ((RelativeLayout) findViewById(R.id.root_layout));<br></span><span style="color: #008080;">133</span> <span style="color: #008000;">//</span><span style="color: #008000;">        relativeLayout.addView(imageView);</span><br><span style="color: #008080;">134</span> <span style="color: #000000;">        imageView.setX(cropperImage.getX());<br></span><span style="color: #008080;">135</span> <span style="color: #000000;">        imageView.setY(cropperImage.getY());<br></span><span style="color: #008080;">136</span>         ViewGroup.LayoutParams lp =<span style="color: #000000;"> imageView.getLayoutParams();<br></span><span style="color: #008080;">137</span>         lp.width = (<span style="color: #0000ff;">int</span><span style="color: #000000;">)cropperImage.getWidth();<br></span><span style="color: #008080;">138</span>         lp.height = (<span style="color: #0000ff;">int</span><span style="color: #000000;">) cropperImage.getHeight();<br></span><span style="color: #008080;">139</span> <span style="color: #000000;">        imageView.setLayoutParams(lp);<br></span><span style="color: #008080;">140</span> <span style="color: #000000;">        imageView.setImageBitmap(cropperImage.getBitmap());<br></span><span style="color: #008080;">141</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">142</span> <span style="color: #000000;">            getWindow().addContentView(view, lp);<br></span><span style="color: #008080;">143</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;">144</span> <span style="color: #000000;">            e.printStackTrace();<br></span><span style="color: #008080;">145</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">146</span>         <span style="color: #008000;">/</span><span style="color: #008000;">AnimatorSet animSet = new AnimatorSet();<br></span><span style="color: #008080;">147</span> <span style="color: #008000;">        ObjectAnimator translationX = ObjectAnimator.ofFloat(this, “translationX”, cropperImage.getX(), 0);<br></span><span style="color: #008080;">148</span> <span style="color: #008000;">        ObjectAnimator translationY = ObjectAnimator.ofFloat(this, “translationY”, cropperImage.getY(), 0);</span><span style="color: #008000;"><em>/</em></span><br><span style="color: #008080;">149</span><br><span style="color: #008080;">150</span>         TranslateAnimation translateAnimation = <span style="color: #0000ff;">new</span><span style="color: #000000;"> TranslateAnimation(<br></span><span style="color: #008080;">151</span>                 0, -cropperImage.getX(), 0, -(Math.abs(cropperImage.getHeight() - cropperImage.getY())));<span style="color: #008000;">//</span><span style="color: #008000;"> 当前位置移动到指定位置</span><br><span style="color: #008080;">152</span>         RotateAnimation rotateAnimation = <span style="color: #0000ff;">new</span> RotateAnimation(0, -90<span style="color: #000000;">,<br></span><span style="color: #008080;">153</span> <span style="color: #000000;">                Animation.ABSOLUTE, cropperImage.getX() ,Animation.ABSOLUTE, cropperImage.getY());<br></span><span style="color: #008080;">154</span>         AnimationSet animationSet = <span style="color: #0000ff;">new</span> AnimationSet(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br></span><span style="color: #008080;">155</span> <span style="color: #000000;">        animationSet.addAnimation(translateAnimation);<br></span><span style="color: #008080;">156</span> <span style="color: #000000;">        animationSet.addAnimation(rotateAnimation);<br></span><span style="color: #008080;">157</span>         animationSet.setFillAfter(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br></span><span style="color: #008080;">158</span>         animationSet.setDuration(2000L<span style="color: #000000;">);<br></span><span style="color: #008080;">159</span> <span style="color: #000000;">        imageView.startAnimation(animationSet);<br></span><span style="color: #008080;">160</span> <span style="color: #008000;">//</span><span style="color: #008000;">        finish();</span><br><span style="color: #008080;">161</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">162</span><br><span style="color: #008080;">163</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">164</span> <span style="color: #008000;">      拍照成功后回调<br></span><span style="color: #008080;">165</span> <span style="color: #008000;">     <em> 存储图片并显示截图界面<br></em></span><span style="color: #008080;">166</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> data<br></span><span style="color: #008080;">167</span>      <span style="color: #008000;"><em>/</em></span><br><span style="color: #008080;">168</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">169</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onCameraStopped(<span style="color: #0000ff;">byte</span><span style="color: #000000;">[] data) {<br></span><span style="color: #008080;">170</span>         Log.i(“TAG”, “==onCameraStopped==”<span style="color: #000000;">);<br></span><span style="color: #008080;">171</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 创建图像</span><br><span style="color: #008080;">172</span>         Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0<span style="color: #000000;">, data.length);<br></span><span style="color: #008080;">173</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 系统时间</span><br><span style="color: #008080;">174</span>         <span style="color: #0000ff;">long</span> dateTaken =<span style="color: #000000;"> System.currentTimeMillis();<br></span><span style="color: #008080;">175</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 图像名称</span><br><span style="color: #008080;">176</span>         String filename = DateFormat.format(“yyyy-MM-dd kk.mm.ss”<span style="color: #000000;">, dateTaken)<br></span><span style="color: #008080;">177</span>                 .toString() + “.jpg”<span style="color: #000000;">;<br></span><span style="color: #008080;">178</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 存储图像（PATH目录）</span><br><span style="color: #008080;">179</span>         Uri source =<span style="color: #000000;"> insertImage(getContentResolver(), filename, dateTaken, PATH,<br></span><span style="color: #008080;">180</span> <span style="color: #000000;">                filename, bitmap, data);<br></span><span style="color: #008080;">181</span>         <span style="color: #008000;">//</span><span style="color: #008000;">准备截图</span><br><span style="color: #008080;">182</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">183</span>             mCropImageView.setImageBitmap(MediaStore.Images.Media.getBitmap(<span style="color: #0000ff;">this</span><span style="color: #000000;">.getContentResolver(), source));<br></span><span style="color: #008080;">184</span> <span style="color: #008000;">//</span><span style="color: #008000;">            mCropImageView.rotateImage(90);</span><br><span style="color: #008080;">185</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {<br></span><span style="color: #008080;">186</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;">187</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">188</span> <span style="color: #000000;">        showCropperLayout();<br></span><span style="color: #008080;">189</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">190</span><br><span style="color: #008080;">191</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">192</span> <span style="color: #008000;">      存储图像并将信息添加入媒体数据库<br></span><span style="color: #008080;">193</span>      <span style="color: #008000;">*/</span><br><span style="color: #008080;">194</span>     <span style="color: #0000ff;">private</span> Uri insertImage(ContentResolver cr, String name, <span style="color: #0000ff;">long</span><span style="color: #000000;"> dateTaken,<br></span><span style="color: #008080;">195</span>                             String directory, String filename, Bitmap source, <span style="color: #0000ff;">byte</span><span style="color: #000000;">[] jpegData) {<br></span><span style="color: #008080;">196</span>         OutputStream outputStream = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">197</span>         String filePath = directory +<span style="color: #000000;"> filename;<br></span><span style="color: #008080;">198</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">199</span>             File dir = <span style="color: #0000ff;">new</span><span style="color: #000000;"> File(directory);<br></span><span style="color: #008080;">200</span>             <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">dir.exists()) {<br></span><span style="color: #008080;">201</span> <span style="color: #000000;">                dir.mkdirs();<br></span><span style="color: #008080;">202</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">203</span>             File file = <span style="color: #0000ff;">new</span><span style="color: #000000;"> File(directory, filename);<br></span><span style="color: #008080;">204</span>             <span style="color: #0000ff;">if</span><span style="color: #000000;"> (file.createNewFile()) {<br></span><span style="color: #008080;">205</span>                 outputStream = <span style="color: #0000ff;">new</span><span style="color: #000000;"> FileOutputStream(file);<br></span><span style="color: #008080;">206</span>                 <span style="color: #0000ff;">if</span> (source != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">207</span>                     source.compress(Bitmap.CompressFormat.JPEG, 100<span style="color: #000000;">, outputStream);<br></span><span style="color: #008080;">208</span>                 } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">209</span> <span style="color: #000000;">                    outputStream.write(jpegData);<br></span><span style="color: #008080;">210</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">211</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">212</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (FileNotFoundException e) {<br></span><span style="color: #008080;">213</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;">214</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">215</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {<br></span><span style="color: #008080;">216</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;">217</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">218</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">219</span>             <span style="color: #0000ff;">if</span> (outputStream != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">220</span>                 <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">221</span> <span style="color: #000000;">                    outputStream.close();<br></span><span style="color: #008080;">222</span>                 } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Throwable t) {<br></span><span style="color: #008080;">223</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">224</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">225</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">226</span>         ContentValues values = <span style="color: #0000ff;">new</span> ContentValues(7<span style="color: #000000;">);<br></span><span style="color: #008080;">227</span> <span style="color: #000000;">        values.put(MediaStore.Images.Media.TITLE, name);<br></span><span style="color: #008080;">228</span> <span style="color: #000000;">        values.put(MediaStore.Images.Media.DISPLAY_NAME, filename);<br></span><span style="color: #008080;">229</span> <span style="color: #000000;">        values.put(MediaStore.Images.Media.DATE_TAKEN, dateTaken);<br></span><span style="color: #008080;">230</span>         values.put(MediaStore.Images.Media.MIME_TYPE, “image/jpeg”<span style="color: #000000;">);<br></span><span style="color: #008080;">231</span> <span style="color: #000000;">        values.put(MediaStore.Images.Media.DATA, filePath);<br></span><span style="color: #008080;">232</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> cr.insert(IMAGE_URI, values);<br></span><span style="color: #008080;">233</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">234</span><br><span style="color: #008080;">235</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> showTakePhotoLayout() {<br></span><span style="color: #008080;">236</span> <span style="color: #000000;">        mTakePhotoLayout.setVisibility(View.VISIBLE);<br></span><span style="color: #008080;">237</span> <span style="color: #000000;">        mCropperLayout.setVisibility(View.GONE);<br></span><span style="color: #008080;">238</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">239</span><br><span style="color: #008080;">240</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> showCropperLayout() {<br></span><span style="color: #008080;">241</span> <span style="color: #000000;">        mTakePhotoLayout.setVisibility(View.GONE);<br></span><span style="color: #008080;">242</span> <span style="color: #000000;">        mCropperLayout.setVisibility(View.VISIBLE);<br></span><span style="color: #008080;">243</span>         mCameraPreview.start();   <span style="color: #008000;">//</span><span style="color: #008000;">继续启动摄像头</span><br><span style="color: #008080;">244</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">245</span><br><span style="color: #008080;">246</span><br><span style="color: #008080;">247</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">float</span> mLastX = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">248</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">float</span> mLastY = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">249</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">float</span> mLastZ = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">250</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">boolean</span> mInitialized = <span style="color: #0000ff;">false</span><span style="color: #000000;">;<br></span><span style="color: #008080;">251</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> SensorManager mSensorManager;<br></span><span style="color: #008080;">252</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Sensor mAccel;<br></span><span style="color: #008080;">253</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">254</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onSensorChanged(SensorEvent event) {<br></span><span style="color: #008080;">255</span><br><span style="color: #008080;">256</span>         <span style="color: #0000ff;">float</span> x = event.values[0<span style="color: #000000;">];<br></span><span style="color: #008080;">257</span>         <span style="color: #0000ff;">float</span> y = event.values[1<span style="color: #000000;">];<br></span><span style="color: #008080;">258</span>         <span style="color: #0000ff;">float</span> z = event.values[2<span style="color: #000000;">];<br></span><span style="color: #008080;">259</span>         <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">mInitialized){<br></span><span style="color: #008080;">260</span>             mLastX =<span style="color: #000000;"> x;<br></span><span style="color: #008080;">261</span>             mLastY =<span style="color: #000000;"> y;<br></span><span style="color: #008080;">262</span>             mLastZ =<span style="color: #000000;"> z;<br></span><span style="color: #008080;">263</span>             mInitialized = <span style="color: #0000ff;">true</span><span style="color: #000000;">;<br></span><span style="color: #008080;">264</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">265</span>         <span style="color: #0000ff;">float</span> deltaX  = Math.abs(mLastX -<span style="color: #000000;"> x);<br></span><span style="color: #008080;">266</span>         <span style="color: #0000ff;">float</span> deltaY = Math.abs(mLastY -<span style="color: #000000;"> y);<br></span><span style="color: #008080;">267</span>         <span style="color: #0000ff;">float</span> deltaZ = Math.abs(mLastZ -<span style="color: #000000;"> z);<br></span><span style="color: #008080;">268</span><br><span style="color: #008080;">269</span>         <span style="color: #0000ff;">if</span>(deltaX &gt; 0.8 || deltaY &gt; 0.8 || deltaZ &gt; 0.8<span style="color: #000000;">){<br></span><span style="color: #008080;">270</span> <span style="color: #000000;">            mCameraPreview.setFocus();<br></span><span style="color: #008080;">271</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">272</span>         mLastX =<span style="color: #000000;"> x;<br></span><span style="color: #008080;">273</span>         mLastY =<span style="color: #000000;"> y;<br></span><span style="color: #008080;">274</span>         mLastZ =<span style="color: #000000;"> z;<br></span><span style="color: #008080;">275</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">276</span><br><span style="color: #008080;">277</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">278</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onAccuracyChanged(Sensor sensor, <span style="color: #0000ff;">int</span><span style="color: #000000;"> accuracy) {<br></span><span style="color: #008080;">279</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">280</span> }</pre><br></div>

<p>　　<span style="font-size: 15px;">actiity中注册了SensorEventListener，也就是使用传感器监听用户手机的移动，如果有一定距离的移动，则自动聚焦，这样体验好一点。</span></p>
<p><span style="font-size: 15px;">　　我对比了一下小猿搜题和学霸君两款app的拍照功能，个人感觉小猿搜题的体验要好一些，因为从主界面进入拍照界面，连个界面没有一个旋转的过渡，而学霸君就有一个过渡，有一丝丝的影响体验。也就是说学霸君的拍照界面是横屏的，在activity的onCreate方法里面调用了</span>setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE)来设置全屏，而切换界面的时候又从竖屏切换为横屏，就会有个过渡的效果，影响了体验。</p>
<p>　　<span style="font-size: 15px;">个人猜测小猿搜题是将拍照界面的activity设置为竖屏，而将摄像头直接旋转90度，这样就强制用户横屏拍摄，当然，拍完之后还要将图片旋转回来。所以我参考小猿搜题来实现的，毕竟体验为王嘛。</span></p>
<p><span style="font-size: 15px;"><img src="http://www.liuling123.com/wp-content/uploads/2015/11/420264-20151028225216372-729805796.png" alt=""></span></p>
<p>&nbsp;</p>
<p>　　<span style="font-size: 15px;">如上图（其实是竖屏），红色圈起来的其实是放到底部，然后将屏幕中间的文字旋转90度（带有动画，起了提示用户横屏拍照的作用），就给人的感觉是横屏的。了。</span></p>
<p><span style="font-size: 15px;">　　还有一点就是小猿搜题拍完照到截图过渡的很自然，感觉很流畅，估计是拍照和截图放在同一个activity中的，如果是两个activty，涉及到界面切换，肯定不会那么自然。所以我也将拍照和截图放在一个界面，拍照完就将自定义相机隐藏，将截图界面显示出来，这样切换就很流畅了。</span></p>
<p><span style="font-size: 15px;">　　项目中截图的功能我是从github上面找的一个开源库cropper：<a href="https://github.com/edmodo/cropper" title="https://github.com/edmodo/cropper" target="_blank" rel="external">https://github.com/edmodo/cropper</a></span></p>
<p>&nbsp;　 &nbsp;<span style="font-size: 15px;">&nbsp;</span><span style="font-size: 15px;">因为ocr图片识别的代码是公司的，所以识别的功能没有添加到demo里面去。</span><span style="font-size: 15px;"><br></span></p>
<p>&nbsp;</p>
<p>　　<span style="color: #ff0000;">Demo<span style="font-size: 15px;">源码下载：<span style="color: #000000;"><a href="https://github.com/liuling07/CustomCameraDemo" title="https://github.com/liuling07/CustomCameraDemo" target="_blank" rel="external">https://github.com/liuling07/CustomCameraDemo</a></span></span></span></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<span style="font-size: 15px;">最近项目里面又要加一个拍照搜题的功能，也就是用户对着不会做的题目拍一张照片，将照片的文字使用ocr识别出来，再调用题库搜索接口搜索出来展示给用户，类似于小猿搜题、学霸君等app。<br></span></p>
<p>　　<span style="font-size: 15px;">其实Android提供Intent让我们打开系统的相机，但是系统相机跟自己app风格不搭，而且用起来体验不好。所以我使用了SDK提供的camera API自定义了一个相机，并且在相机界面上面添加了参考线，有助于用户将题目拍正，提高ocr的识别率。</span><br>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="camera" scheme="http://www.liuling123.com/tags/camera/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ListView实现Item局部刷新]]></title>
    <link href="http://www.liuling123.com/2015/10/listview-partial-refresh.html"/>
    <id>http://www.liuling123.com/2015/10/listview-partial-refresh.html</id>
    <published>2015-10-20T05:44:00.000Z</published>
    <updated>2016-01-03T07:34:56.000Z</updated>
    <content type="html"><![CDATA[<p>　　&nbsp;<span style="font-size: 15px;">对于ListView数据的刷新大家都知道，改变Adapter的数据源，然后调用Adapter的notifyDateSetChanged()方法即可。</span></p>
<p><span style="font-size: 15px;">　　但是博主在做公司项目的时候，有个下载模块，因为可能同时下载好几个数据，所以用的listview展示所有正在下载的内容。因为下载进度要实时更新，所以要不停的调用notifyDateSetChanged刷新数据。这样会不停的重新绘制整个listview的界面，性能开销非常大。而且如果每个item有图片的话，每个item的图片都需要重新加载，就算图片做了内存缓存，刷新一下图片也会闪一下，不停的刷新就会导致各个item的图片不停的闪，体验一点都不好。</span></p>
<p><span style="font-size: 15px;">　　那么对于上面问题，有没有解决办法呢？当然是有的。我们可以针对某一个item进行局部更新，而不影响其它没有修改的item。那么具体如何实现的呢？我们看下面的代码。</span><br><a id="more"></a></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;"> 1</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> updateView(<span style="color: #0000ff;">int</span><span style="color: #000000;"> itemIndex) {<br></span><span style="color: #008080;"> 2</span>         <span style="color: #008000;">//</span><span style="color: #008000;">得到第一个可显示控件的位置，</span><br><span style="color: #008080;"> 3</span>         <span style="color: #0000ff;">int</span> visiblePosition =<span style="color: #000000;"> mListView.getFirstVisiblePosition();<br></span><span style="color: #008080;"> 4</span>         <span style="color: #008000;">//</span><span style="color: #008000;">只有当要更新的view在可见的位置时才更新，不可见时，跳过不更新</span><br><span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">if</span> (itemIndex - visiblePosition &gt;= 0<span style="color: #000000;">) {<br></span><span style="color: #008080;"> 6</span>             <span style="color: #008000;">//</span><span style="color: #008000;">得到要更新的item的view</span><br><span style="color: #008080;"> 7</span>             View view = mListView.getChildAt(itemIndex -<span style="color: #000000;"> visiblePosition);<br></span><span style="color: #008080;"> 8</span>             <span style="color: #008000;">//</span><span style="color: #008000;">调用adapter更新界面</span><br><span style="color: #008080;"> 9</span> <span style="color: #000000;">            mAdapter.updateView(view, itemIndex);<br></span><span style="color: #008080;">10</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">11</span>     }</pre><br></div>

<p>　　<span style="font-size: 15px;">这个函数主要是根据传入的itemIndex来获取第itemIndex的数据所显示的view。itemIndex就是要修改的数据再List集合中的位置，比如我这里下载进度有更新，发了一个广播这里接收到了，需要修改该下载内容的进度条，广播接收器可以这么写：</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;"> 2</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onReceive(Context context, Intent intent) {<br></span><span style="color: #008080;"> 3</span>             AppContent appContent = intent.getParcelableExtra(“appContent”<span style="color: #000000;">);<br></span><span style="color: #008080;"> 4</span>             <span style="color: #0000ff;">if</span>(appContent == <span style="color: #0000ff;">null</span>) <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 5</span>             <span style="color: #0000ff;">int</span> itemIndex = 0<span style="color: #000000;">;<br></span><span style="color: #008080;"> 6</span>             <span style="color: #0000ff;">for</span><span style="color: #000000;">(AppContent appContent1 : mList) {<br></span><span style="color: #008080;"> 7</span>                 <span style="color: #0000ff;">if</span><span style="color: #000000;">(appContent.getUrl().equals(appContent1.getUrl())) {<br></span><span style="color: #008080;"> 8</span>                     itemIndex =<span style="color: #000000;"> mList.indexOf(appContent1);<br></span><span style="color: #008080;"> 9</span> <span style="color: #000000;">                    appContent1.setDownloadPercent(appContent.getDownloadPercent());<br></span><span style="color: #008080;">10</span>                     <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br></span><span style="color: #008080;">11</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">12</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">13</span> <span style="color: #000000;">            updateView(itemIndex);<br></span><span style="color: #008080;">14</span>         }</pre><br></div>

<p>　　<span style="font-size: 15px;">下面看Adapter的具体代码：<br></span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AppContentAdapter <span style="color: #0000ff;">extends</span><span style="color: #000000;"> BaseAdapter{<br></span><span style="color: #008080;">  2</span><br><span style="color: #008080;">  3</span>     <span style="color: #0000ff;">private</span> List<appcontent> mDates = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">  4</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Context mContext;<br></span><span style="color: #008080;">  5</span><br><span style="color: #008080;">  6</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> AppContentAdapter(Context context) {<br></span><span style="color: #008080;">  7</span>         <span style="color: #0000ff;">this</span>.mContext =<span style="color: #000000;"> context;<br></span><span style="color: #008080;">  8</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">  9</span><br><span style="color: #008080;"> 10</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 11</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getCount() {<br></span><span style="color: #008080;"> 12</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> mDates.size();<br></span><span style="color: #008080;"> 13</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 14</span><br><span style="color: #008080;"> 15</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 16</span>     <span style="color: #0000ff;">public</span> Object getItem(<span style="color: #0000ff;">int</span><span style="color: #000000;"> position) {<br></span><span style="color: #008080;"> 17</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> mDates.get(position);<br></span><span style="color: #008080;"> 18</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 19</span><br><span style="color: #008080;"> 20</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 21</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">long</span> getItemId(<span style="color: #0000ff;">int</span><span style="color: #000000;"> position) {<br></span><span style="color: #008080;"> 22</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> position;<br></span><span style="color: #008080;"> 23</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 24</span><br><span style="color: #008080;"> 25</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setDates(List<appcontent><span style="color: #000000;"> mDates) {<br></span><span style="color: #008080;"> 26</span>         <span style="color: #0000ff;">this</span>.mDates =<span style="color: #000000;"> mDates;<br></span><span style="color: #008080;"> 27</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 28</span><br><span style="color: #008080;"> 29</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 30</span>     <span style="color: #0000ff;">public</span> View getView(<span style="color: #0000ff;">int</span><span style="color: #000000;"> position, View convertView, ViewGroup parent) {<br></span><span style="color: #008080;"> 31</span>         ViewHolder holder = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 32</span>         <span style="color: #0000ff;">if</span> (convertView == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;"> 33</span>             holder = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ViewHolder();<br></span><span style="color: #008080;"> 34</span>             convertView =<span style="color: #000000;"> LayoutInflater.from(mContext).inflate(<br></span><span style="color: #008080;"> 35</span>                     R.layout.listitem_download, <span style="color: #0000ff;">null</span><span style="color: #000000;">);<br></span><span style="color: #008080;"> 36</span>             holder.statusIcon =<span style="color: #000000;"> (DownloadPercentView) convertView.findViewById(R.id.status_icon);<br></span><span style="color: #008080;"> 37</span>             holder.name =<span style="color: #000000;"> (TextView) convertView.findViewById(R.id.name);<br></span><span style="color: #008080;"> 38</span>             holder.downloadPercent =<span style="color: #000000;"> (TextView) convertView.findViewById(R.id.download_percent);<br></span><span style="color: #008080;"> 39</span>             holder.progressBar =<span style="color: #000000;"> (ProgressBar) convertView.findViewById(R.id.progressbar);<br></span><span style="color: #008080;"> 40</span> <span style="color: #000000;">            convertView.setTag(holder);<br></span><span style="color: #008080;"> 41</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 42</span>             holder =<span style="color: #000000;"> (ViewHolder) convertView.getTag();<br></span><span style="color: #008080;"> 43</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 44</span> <span style="color: #000000;">        setData(holder, position);<br></span><span style="color: #008080;"> 45</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> convertView;<br></span><span style="color: #008080;"> 46</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 47</span><br><span style="color: #008080;"> 48</span>     <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;"> 49</span> <span style="color: #008000;">     <em> 设置viewHolder的数据<br></em></span><span style="color: #008080;"> 50</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> holder<br></span><span style="color: #008080;"> 51</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> itemIndex<br></span><span style="color: #008080;"> 52</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;"> 53</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> setData(ViewHolder holder, <span style="color: #0000ff;">int</span><span style="color: #000000;"> itemIndex) {<br></span><span style="color: #008080;"> 54</span>         AppContent appContent =<span style="color: #000000;"> mDates.get(itemIndex);<br></span><span style="color: #008080;"> 55</span> <span style="color: #000000;">        holder.name.setText(appContent.getName());<br></span><span style="color: #008080;"> 56</span> <span style="color: #000000;">        holder.progressBar.setProgress(appContent.getDownloadPercent());<br></span><span style="color: #008080;"> 57</span> <span style="color: #000000;">        setIconByStatus(holder.statusIcon, appContent.getStatus());<br></span><span style="color: #008080;"> 58</span>         <span style="color: #0000ff;">if</span>(appContent.getStatus() ==<span style="color: #000000;"> AppContent.Status.PENDING) {<br></span><span style="color: #008080;"> 59</span> <span style="color: #000000;">            holder.downloadPercent.setVisibility(View.INVISIBLE);<br></span><span style="color: #008080;"> 60</span>         } <span style="color: #0000ff;">else</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 61</span> <span style="color: #000000;">            holder.downloadPercent.setVisibility(View.VISIBLE);<br></span><span style="color: #008080;"> 62</span> <span style="color: #000000;">            holder.statusIcon.setProgress(appContent.getDownloadPercent());<br></span><span style="color: #008080;"> 63</span>             holder.downloadPercent.setText(“下载进度：” + appContent.getDownloadPercent() + “%”<span style="color: #000000;">);<br></span><span style="color: #008080;"> 64</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 65</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 66</span><br><span style="color: #008080;"> 67</span><br><span style="color: #008080;"> 68</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;"> 69</span> <span style="color: #008000;">     <em> 局部刷新<br></em></span><span style="color: #008080;"> 70</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> view<br></span><span style="color: #008080;"> 71</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> itemIndex<br></span><span style="color: #008080;"> 72</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;"> 73</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> updateView(View view, <span style="color: #0000ff;">int</span><span style="color: #000000;"> itemIndex) {<br></span><span style="color: #008080;"> 74</span>         <span style="color: #0000ff;">if</span>(view == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;"> 75</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 76</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 77</span>         <span style="color: #008000;">//</span><span style="color: #008000;">从view中取得holder</span><br><span style="color: #008080;"> 78</span>         ViewHolder holder =<span style="color: #000000;"> (ViewHolder) view.getTag();<br></span><span style="color: #008080;"> 79</span>         holder.statusIcon =<span style="color: #000000;"> (DownloadPercentView) view.findViewById(R.id.status_icon);<br></span><span style="color: #008080;"> 80</span>         holder.name =<span style="color: #000000;"> (TextView) view.findViewById(R.id.name);<br></span><span style="color: #008080;"> 81</span>         holder.downloadPercent =<span style="color: #000000;"> (TextView) view.findViewById(R.id.download_percent);<br></span><span style="color: #008080;"> 82</span>         holder.progressBar =<span style="color: #000000;"> (ProgressBar) view.findViewById(R.id.progressbar);<br></span><span style="color: #008080;"> 83</span> <span style="color: #000000;">        setData(holder, itemIndex);<br></span><span style="color: #008080;"> 84</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 85</span><br><span style="color: #008080;"> 86</span>     <span style="color: #008000;">/<em>*</em></span><br><span style="color: #008080;"> 87</span> <span style="color: #008000;">      根据状态设置图标<br></span><span style="color: #008080;"> 88</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> downloadPercentView<br></span><span style="color: #008080;"> 89</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> status<br></span><span style="color: #008080;"> 90</span>      <span style="color: #008000;">*/</span><br><span style="color: #008080;"> 91</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setIconByStatus(DownloadPercentView downloadPercentView, AppContent.Status status) {<br></span><span style="color: #008080;"> 92</span> <span style="color: #000000;">        downloadPercentView.setVisibility(View.VISIBLE);<br></span><span style="color: #008080;"> 93</span>         <span style="color: #0000ff;">if</span>(status ==<span style="color: #000000;"> AppContent.Status.PENDING) {<br></span><span style="color: #008080;"> 94</span> <span style="color: #000000;">            downloadPercentView.setStatus(DownloadPercentView.STATUS_PEDDING);<br></span><span style="color: #008080;"> 95</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 96</span>         <span style="color: #0000ff;">if</span>(status ==<span style="color: #000000;"> AppContent.Status.DOWNLOADING) {<br></span><span style="color: #008080;"> 97</span> <span style="color: #000000;">            downloadPercentView.setStatus(DownloadPercentView.STATUS_DOWNLOADING);<br></span><span style="color: #008080;"> 98</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 99</span>         <span style="color: #0000ff;">if</span>(status ==<span style="color: #000000;"> AppContent.Status.WAITING) {<br></span><span style="color: #008080;">100</span> <span style="color: #000000;">            downloadPercentView.setStatus(DownloadPercentView.STATUS_WAITING);<br></span><span style="color: #008080;">101</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">102</span>         <span style="color: #0000ff;">if</span>(status ==<span style="color: #000000;"> AppContent.Status.PAUSED) {<br></span><span style="color: #008080;">103</span> <span style="color: #000000;">            downloadPercentView.setStatus(DownloadPercentView.STATUS_PAUSED);<br></span><span style="color: #008080;">104</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">105</span>         <span style="color: #0000ff;">if</span>(status ==<span style="color: #000000;"> AppContent.Status.FINISHED) {<br></span><span style="color: #008080;">106</span> <span style="color: #000000;">            downloadPercentView.setStatus(DownloadPercentView.STATUS_FINISHED);<br></span><span style="color: #008080;">107</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">108</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">109</span><br><span style="color: #008080;">110</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ViewHolder {<br></span><span style="color: #008080;">111</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> DownloadPercentView statusIcon;<br></span><span style="color: #008080;">112</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> TextView name;<br></span><span style="color: #008080;">113</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> TextView downloadPercent;<br></span><span style="color: #008080;">114</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> ProgressBar progressBar;<br></span><span style="color: #008080;">115</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">116</span> }</appcontent></appcontent></pre><br></div>

<p>　　<span style="font-size: 15px;">其实这些代码就是我上篇博文《<a href="http://www.cnblogs.com/liuling/p/2015-10-16-01.html" title="http://www.cnblogs.com/liuling/p/2015-10-16-01.html" target="_blank" rel="external">AsyncTask实现多任务多线程下载</a>》的例子中的，如果需要可以去下载。</span></p>
<p><span style="font-size: 15px;">&nbsp;</span></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　&nbsp;<span style="font-size: 15px;">对于ListView数据的刷新大家都知道，改变Adapter的数据源，然后调用Adapter的notifyDateSetChanged()方法即可。</span></p>
<p><span style="font-size: 15px;">　　但是博主在做公司项目的时候，有个下载模块，因为可能同时下载好几个数据，所以用的listview展示所有正在下载的内容。因为下载进度要实时更新，所以要不停的调用notifyDateSetChanged刷新数据。这样会不停的重新绘制整个listview的界面，性能开销非常大。而且如果每个item有图片的话，每个item的图片都需要重新加载，就算图片做了内存缓存，刷新一下图片也会闪一下，不停的刷新就会导致各个item的图片不停的闪，体验一点都不好。</span></p>
<p><span style="font-size: 15px;">　　那么对于上面问题，有没有解决办法呢？当然是有的。我们可以针对某一个item进行局部更新，而不影响其它没有修改的item。那么具体如何实现的呢？我们看下面的代码。</span><br>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="布局" scheme="http://www.liuling123.com/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AsyncTask实现多任务多线程断点续传下载]]></title>
    <link href="http://www.liuling123.com/2015/10/asynctask-multi-task-thread.html"/>
    <id>http://www.liuling123.com/2015/10/asynctask-multi-task-thread.html</id>
    <published>2015-10-16T05:29:00.000Z</published>
    <updated>2016-01-03T07:04:37.000Z</updated>
    <content type="html"><![CDATA[<p>　　<span style="font-size: 15px;">这篇博客是AsyncTask下载系列的最后一篇文章，前面写了关于断点续传的和多线程下载的博客，这篇是在前两篇的基础上面实现的，有兴趣的可以去看下。</span></p>
<p><span style="font-size: 15px;">　　一、<a href="http://www.cnblogs.com/liuling/p/2015-10-10-01.html" title="http://www.cnblogs.com/liuling/p/2015-10-10-01.html" target="_blank" rel="external">AsyncTask实现断点续传</a></span></p>
<p><span style="font-size: 15px;">　　二、<a href="http://www.cnblogs.com/liuling/p/2015-10-13-01.html" title="http://www.cnblogs.com/liuling/p/2015-10-13-01.html" target="_blank" rel="external">AsyncTask实现多线程断点续传</a></span></p>
<p><span style="font-size: 15px;">　　这里模拟应用市场app下载实现了一个Demo，因为只有一个界面，所以没有将下载放到Service中，而是直接在Activity中创建。在正式的项目中，下载都是放到Service中，然后通过BroadCast通知界面更新进度。<span style="line-height: 1.5;"><br></span></span><br><a id="more"></a><br><span style="font-size: 15px;">　　上代码之前，先看下demo的运行效果图吧。</span></p>
<p><img src="http://www.liuling123.com/wp-content/uploads/2015/11/420264-20151016210637601-2103512377.gif" alt=""></p>
<p>&nbsp;</p>
<p>　　<span style="font-size: 15px;">下面我们看代码，这里每一个文件的下载定义一个Downloador来管理下载该文件的所有线程（暂停、下载等）。Downloador创建3个DownloadTask（这里定义每个文件分配3个线程下载）来下载该文件特定的起止位置。这里要通过文件的大小来计算每个线程所下载的起止位置，详细可以参考《<a href="http://www.cnblogs.com/liuling/p/2015-10-13-01.html" title="http://www.cnblogs.com/liuling/p/2015-10-13-01.html" target="_blank" rel="external">AsyncTask实现多线程断点续传</a>》。</span></p>
<p><span style="font-size: 15px;">　　1、Downloador类</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.downloador;<br></span><span style="color: #008080;">  2</span><br><span style="color: #008080;">  3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;<br></span><span style="color: #008080;">  4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Intent;<br></span><span style="color: #008080;">  5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.AsyncTask;<br></span><span style="color: #008080;">  6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;<br></span><span style="color: #008080;">  7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Handler;<br></span><span style="color: #008080;">  8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Message;<br></span><span style="color: #008080;">  9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.text.TextUtils;<br></span><span style="color: #008080;"> 10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;<br></span><span style="color: #008080;"> 11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Toast;<br></span><span style="color: #008080;"> 12</span><br><span style="color: #008080;"> 13</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.beans.AppContent;<br></span><span style="color: #008080;"> 14</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.beans.DownloadInfo;<br></span><span style="color: #008080;"> 15</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.db.DownloadFileDAO;<br></span><span style="color: #008080;"> 16</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.db.DownloadInfoDAO;<br></span><span style="color: #008080;"> 17</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.utils.DownloadUtils;<br></span><span style="color: #008080;"> 18</span><br><span style="color: #008080;"> 19</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.HttpResponse;<br></span><span style="color: #008080;"> 20</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.client.HttpClient;<br></span><span style="color: #008080;"> 21</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.client.methods.HttpGet;<br></span><span style="color: #008080;"> 22</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.impl.client.DefaultHttpClient;<br></span><span style="color: #008080;"> 23</span><br><span style="color: #008080;"> 24</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.ArrayList;<br></span><span style="color: #008080;"> 25</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;<br></span><span style="color: #008080;"> 26</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.concurrent.Executor;<br></span><span style="color: #008080;"> 27</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.concurrent.Executors;<br></span><span style="color: #008080;"> 28</span><br><span style="color: #008080;"> 29</span> <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;"> 30</span> <span style="color: #008000;"> <em> @Class: Downloador<br></em></span><span style="color: #008080;"> 31</span> <span style="color: #008000;">  @Description: 任务下载器<br></span><span style="color: #008080;"> 32</span> <span style="color: #008000;"> <em> </em></span><span style="color: #808080;">@author</span><span style="color: #008000;">: lling(www.cnblogs.com/liuling)<br></span><span style="color: #008080;"> 33</span> <span style="color: #008000;">  @Date: 2015/10/13<br></span><span style="color: #008080;"> 34</span>  <span style="color: #008000;">*/</span><br><span style="color: #008080;"> 35</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Downloador {<br></span><span style="color: #008080;"> 36</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String TAG = “Downloador”<span style="color: #000000;">;<br></span><span style="color: #008080;"> 37</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> THREAD_POOL_SIZE = 9;  <span style="color: #008000;">//</span><span style="color: #008000;">线程池大小为9</span><br><span style="color: #008080;"> 38</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> THREAD_NUM = 3;  <span style="color: #008000;">//</span><span style="color: #008000;">每个文件3个线程下载</span><br><span style="color: #008080;"> 39</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> GET_LENGTH_SUCCESS = 1<span style="color: #000000;">;<br></span><span style="color: #008080;"> 40</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> Executor THREAD_POOL_EXECUTOR =<span style="color: #000000;"> Executors.newFixedThreadPool(THREAD_POOL_SIZE);<br></span><span style="color: #008080;"> 41</span><br><span style="color: #008080;"> 42</span>     <span style="color: #0000ff;">private</span> List<downloadtask><span style="color: #000000;"> tasks;<br></span><span style="color: #008080;"> 43</span>     <span style="color: #0000ff;">private</span> InnerHandler handler = <span style="color: #0000ff;">new</span><span style="color: #000000;"> InnerHandler();<br></span><span style="color: #008080;"> 44</span><br><span style="color: #008080;"> 45</span>     <span style="color: #0000ff;">private</span> AppContent appContent; <span style="color: #008000;">//</span><span style="color: #008000;">待下载的应用</span><br><span style="color: #008080;"> 46</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">long</span> downloadLength; <span style="color: #008000;">//</span><span style="color: #008000;">下载过程中记录已下载大小</span><br><span style="color: #008080;"> 47</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">long</span><span style="color: #000000;"> fileLength;<br></span><span style="color: #008080;"> 48</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Context context;<br></span><span style="color: #008080;"> 49</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String downloadPath;<br></span><span style="color: #008080;"> 50</span><br><span style="color: #008080;"> 51</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> Downloador(Context context, AppContent appContent) {<br></span><span style="color: #008080;"> 52</span>         <span style="color: #0000ff;">this</span>.context =<span style="color: #000000;"> context;<br></span><span style="color: #008080;"> 53</span>         <span style="color: #0000ff;">this</span>.appContent =<span style="color: #000000;"> appContent;<br></span><span style="color: #008080;"> 54</span>         <span style="color: #0000ff;">this</span>.downloadPath =<span style="color: #000000;"> DownloadUtils.getDownloadPath();<br></span><span style="color: #008080;"> 55</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 56</span><br><span style="color: #008080;"> 57</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;"> 58</span> <span style="color: #008000;">     <em> 开始下载<br></em></span><span style="color: #008080;"> 59</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;"> 60</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> download() {<br></span><span style="color: #008080;"> 61</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;">(TextUtils.isEmpty(downloadPath)) {<br></span><span style="color: #008080;"> 62</span>             Toast.makeText(context, “未找到SD卡”<span style="color: #000000;">, Toast.LENGTH_SHORT).show();<br></span><span style="color: #008080;"> 63</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 64</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 65</span>         <span style="color: #0000ff;">if</span>(appContent == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;"> 66</span>             <span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> IllegalArgumentException(“download content can not be null”<span style="color: #000000;">);<br></span><span style="color: #008080;"> 67</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 68</span>         <span style="color: #0000ff;">new</span><span style="color: #000000;"> Thread() {<br></span><span style="color: #008080;"> 69</span> <span style="color: #000000;">            @Override<br></span><span style="color: #008080;"> 70</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {<br></span><span style="color: #008080;"> 71</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">获取文件大小</span><br><span style="color: #008080;"> 72</span>                 HttpClient client = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DefaultHttpClient();<br></span><span style="color: #008080;"> 73</span>                 HttpGet request = <span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpGet(appContent.getUrl());<br></span><span style="color: #008080;"> 74</span>                 HttpResponse response = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 75</span>                 <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 76</span>                     response =<span style="color: #000000;"> client.execute(request);<br></span><span style="color: #008080;"> 77</span>                     fileLength =<span style="color: #000000;"> response.getEntity().getContentLength();<br></span><span style="color: #008080;"> 78</span>                 } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;"> 79</span> <span style="color: #000000;">                    Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;"> 80</span>                 } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 81</span>                     <span style="color: #0000ff;">if</span> (request != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;"> 82</span> <span style="color: #000000;">                        request.abort();<br></span><span style="color: #008080;"> 83</span> <span style="color: #000000;">                    }<br></span><span style="color: #008080;"> 84</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;"> 85</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">计算出该文件已经下载的总长度</span><br><span style="color: #008080;"> 86</span>                 List<downloadinfo> lists =<span style="color: #000000;"> DownloadInfoDAO.getInstance(context.getApplicationContext())<br></span><span style="color: #008080;"> 87</span> <span style="color: #000000;">                        .getDownloadInfosByUrl(appContent.getUrl());<br></span><span style="color: #008080;"> 88</span>                 <span style="color: #0000ff;">for</span><span style="color: #000000;"> (DownloadInfo info : lists) {<br></span><span style="color: #008080;"> 89</span>                     downloadLength +=<span style="color: #000000;"> info.getDownloadLength();<br></span><span style="color: #008080;"> 90</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;"> 91</span><br><span style="color: #008080;"> 92</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">插入文件下载记录到数据库</span><br><span style="color: #008080;"> 93</span> <span style="color: #000000;">                DownloadFileDAO.getInstance(context.getApplicationContext()).insertDownloadFile(appContent);<br></span><span style="color: #008080;"> 94</span> <span style="color: #000000;">                Message.obtain(handler, GET_LENGTH_SUCCESS).sendToTarget();<br></span><span style="color: #008080;"> 95</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;"> 96</span> <span style="color: #000000;">        }.start();<br></span><span style="color: #008080;"> 97</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 98</span><br><span style="color: #008080;"> 99</span>     <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;">100</span> <span style="color: #008000;">     <em> 开始创建AsyncTask下载<br></em></span><span style="color: #008080;">101</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">102</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> beginDownload() {<br></span><span style="color: #008080;">103</span>         Log.e(TAG, “beginDownload” +<span style="color: #000000;"> appContent.getUrl());<br></span><span style="color: #008080;">104</span> <span style="color: #000000;">        appContent.setStatus(AppContent.Status.WAITING);<br></span><span style="color: #008080;">105</span>         <span style="color: #0000ff;">long</span> blockLength = fileLength /<span style="color: #000000;"> THREAD_NUM;<br></span><span style="color: #008080;">106</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; THREAD_NUM; i++<span style="color: #000000;">) {<br></span><span style="color: #008080;">107</span>             <span style="color: #0000ff;">long</span> beginPosition = i <em> blockLength;<span style="color: #008000;">//</span><span style="color: #008000;">每条线程下载的开始位置</span><br><span style="color: #008080;">108</span>             <span style="color: #0000ff;">long</span> endPosition = (i + 1) </em> blockLength;<span style="color: #008000;">//</span><span style="color: #008000;">每条线程下载的结束位置</span><br><span style="color: #008080;">109</span>             <span style="color: #0000ff;">if</span> (i == (THREAD_NUM - 1<span style="color: #000000;">)) {<br></span><span style="color: #008080;">110</span>                 endPosition = fileLength;<span style="color: #008000;">//</span><span style="color: #008000;">如果整个文件的大小不为线程个数的整数倍，则最后一个线程的结束位置即为文件的总长度</span><br><span style="color: #008080;">111</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">112</span>             DownloadTask task = <span style="color: #0000ff;">new</span> DownloadTask(i, beginPosition, endPosition, <span style="color: #0000ff;">this</span><span style="color: #000000;">, context);<br></span><span style="color: #008080;">113</span> <span style="color: #000000;">            task.executeOnExecutor(THREAD_POOL_EXECUTOR, appContent.getUrl());<br></span><span style="color: #008080;">114</span>             <span style="color: #0000ff;">if</span>(tasks == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">115</span>                 tasks = <span style="color: #0000ff;">new</span> ArrayList<downloadtask><span style="color: #000000;">();<br></span><span style="color: #008080;">116</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">117</span> <span style="color: #000000;">            tasks.add(task);<br></span><span style="color: #008080;">118</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">119</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">120</span><br><span style="color: #008080;">121</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;">122</span> <span style="color: #008000;">     <em> 暂停下载<br></em></span><span style="color: #008080;">123</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">124</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> pause() {<br></span><span style="color: #008080;">125</span>         <span style="color: #0000ff;">for</span><span style="color: #000000;"> (DownloadTask task : tasks) {<br></span><span style="color: #008080;">126</span>             <span style="color: #0000ff;">if</span> (task != <span style="color: #0000ff;">null</span> &amp;&amp; (task.getStatus() == AsyncTask.Status.RUNNING || !<span style="color: #000000;">task.isCancelled())) {<br></span><span style="color: #008080;">127</span>                 task.cancel(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br></span><span style="color: #008080;">128</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">129</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">130</span> <span style="color: #000000;">        tasks.clear();<br></span><span style="color: #008080;">131</span> <span style="color: #000000;">        appContent.setStatus(AppContent.Status.PAUSED);<br></span><span style="color: #008080;">132</span> <span style="color: #000000;">        DownloadFileDAO.getInstance(context.getApplicationContext()).updateDownloadFile(appContent);<br></span><span style="color: #008080;">133</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">134</span><br><span style="color: #008080;">135</span>     <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;">136</span> <span style="color: #008000;">     <em> 将已下载大小归零<br></em></span><span style="color: #008080;">137</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">138</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">synchronized</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> resetDownloadLength() {<br></span><span style="color: #008080;">139</span>         <span style="color: #0000ff;">this</span>.downloadLength = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">140</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">141</span><br><span style="color: #008080;">142</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;">143</span> <span style="color: #008000;">     <em> 添加已下载大小<br></em></span><span style="color: #008080;">144</span> <span style="color: #008000;">      多线程访问需加锁<br></span><span style="color: #008080;">145</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> size<br></span><span style="color: #008080;">146</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">147</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">synchronized</span> <span style="color: #0000ff;">void</span> updateDownloadLength(<span style="color: #0000ff;">long</span><span style="color: #000000;"> size){<br></span><span style="color: #008080;">148</span>         <span style="color: #0000ff;">this</span>.downloadLength +=<span style="color: #000000;"> size;<br></span><span style="color: #008080;">149</span>         <span style="color: #008000;">//</span><span style="color: #008000;">通知更新界面</span><br><span style="color: #008080;">150</span>         <span style="color: #0000ff;">int</span> percent = (<span style="color: #0000ff;">int</span>)((<span style="color: #0000ff;">float</span>)downloadLength * 100 / (<span style="color: #0000ff;">float</span><span style="color: #000000;">)fileLength);<br></span><span style="color: #008080;">151</span> <span style="color: #000000;">        appContent.setDownloadPercent(percent);<br></span><span style="color: #008080;">152</span>         <span style="color: #0000ff;">if</span>(percent == 100 || downloadLength ==<span style="color: #000000;"> fileLength) {<br></span><span style="color: #008080;">153</span>             appContent.setDownloadPercent(100); <span style="color: #008000;">//</span><span style="color: #008000;">上面计算有时候会有点误差，算到percent=99</span><br><span style="color: #008080;">154</span> <span style="color: #000000;">            appContent.setStatus(AppContent.Status.FINISHED);<br></span><span style="color: #008080;">155</span> <span style="color: #000000;">            DownloadFileDAO.getInstance(context.getApplicationContext()).updateDownloadFile(appContent);<br></span><span style="color: #008080;">156</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">157</span>         Intent intent = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Intent(Constants.DOWNLOAD_MSG);<br></span><span style="color: #008080;">158</span>         <span style="color: #0000ff;">if</span>(appContent.getStatus() ==<span style="color: #000000;"> AppContent.Status.WAITING) {<br></span><span style="color: #008080;">159</span> <span style="color: #000000;">            appContent.setStatus(AppContent.Status.DOWNLOADING);<br></span><span style="color: #008080;">160</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">161</span>         Bundle bundle = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Bundle();<br></span><span style="color: #008080;">162</span>         bundle.putParcelable(“appContent”<span style="color: #000000;">, appContent);<br></span><span style="color: #008080;">163</span> <span style="color: #000000;">        intent.putExtras(bundle);<br></span><span style="color: #008080;">164</span> <span style="color: #000000;">        context.sendBroadcast(intent);<br></span><span style="color: #008080;">165</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">166</span><br><span style="color: #008080;">167</span>     <span style="color: #0000ff;">protected</span><span style="color: #000000;"> String getDownloadPath() {<br></span><span style="color: #008080;">168</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> downloadPath;<br></span><span style="color: #008080;">169</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">170</span><br><span style="color: #008080;">171</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">class</span> InnerHandler <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Handler {<br></span><span style="color: #008080;">172</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;">173</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> handleMessage(Message msg) {<br></span><span style="color: #008080;">174</span>             <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (msg.what) {<br></span><span style="color: #008080;">175</span>                 <span style="color: #0000ff;">case</span><span style="color: #000000;"> GET_LENGTH_SUCCESS :<br></span><span style="color: #008080;">176</span> <span style="color: #000000;">                    beginDownload();<br></span><span style="color: #008080;">177</span>                     <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br></span><span style="color: #008080;">178</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">179</span>             <span style="color: #0000ff;">super</span><span style="color: #000000;">.handleMessage(msg);<br></span><span style="color: #008080;">180</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">181</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">182</span> }</downloadtask></downloadinfo></downloadtask></pre><br></div>

<p><span style="font-size: 15px;">　　2、DownloadTask类</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.downloador;<br></span><span style="color: #008080;">  2</span><br><span style="color: #008080;">  3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;<br></span><span style="color: #008080;">  4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.AsyncTask;<br></span><span style="color: #008080;">  5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;<br></span><span style="color: #008080;">  6</span><br><span style="color: #008080;">  7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.beans.DownloadInfo;<br></span><span style="color: #008080;">  8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.db.DownloadInfoDAO;<br></span><span style="color: #008080;">  9</span><br><span style="color: #008080;"> 10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.Header;<br></span><span style="color: #008080;"> 11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.HttpResponse;<br></span><span style="color: #008080;"> 12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.client.HttpClient;<br></span><span style="color: #008080;"> 13</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.client.methods.HttpGet;<br></span><span style="color: #008080;"> 14</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.impl.client.DefaultHttpClient;<br></span><span style="color: #008080;"> 15</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.message.BasicHeader;<br></span><span style="color: #008080;"> 16</span><br><span style="color: #008080;"> 17</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.File;<br></span><span style="color: #008080;"> 18</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.IOException;<br></span><span style="color: #008080;"> 19</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.InputStream;<br></span><span style="color: #008080;"> 20</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.OutputStream;<br></span><span style="color: #008080;"> 21</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.RandomAccessFile;<br></span><span style="color: #008080;"> 22</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.net.MalformedURLException;<br></span><span style="color: #008080;"> 23</span><br><span style="color: #008080;"> 24</span> <span style="color: #008000;">/<em>*</em></span><br><span style="color: #008080;"> 25</span> <span style="color: #008000;">  @Class: DownloadTask<br></span><span style="color: #008080;"> 26</span> <span style="color: #008000;"> <em> @Description: 文件下载AsyncTask<br></em></span><span style="color: #008080;"> 27</span> <span style="color: #008000;">  </span><span style="color: #808080;">@author</span><span style="color: #008000;">: lling(www.cnblogs.com/liuling)<br></span><span style="color: #008080;"> 28</span> <span style="color: #008000;"> <em> @Date: 2015/10/13<br></em></span><span style="color: #008080;"> 29</span>  <span style="color: #008000;">/</span><br><span style="color: #008080;"> 30</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> DownloadTask <span style="color: #0000ff;">extends</span> AsyncTask<string, integer="" ,="" long=""><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 31</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String TAG = “DownloadTask”<span style="color: #000000;">;<br></span><span style="color: #008080;"> 32</span><br><span style="color: #008080;"> 33</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> taskId;<br></span><span style="color: #008080;"> 34</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">long</span><span style="color: #000000;"> beginPosition;<br></span><span style="color: #008080;"> 35</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">long</span><span style="color: #000000;"> endPosition;<br></span><span style="color: #008080;"> 36</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">long</span><span style="color: #000000;"> downloadLength;<br></span><span style="color: #008080;"> 37</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String url;<br></span><span style="color: #008080;"> 38</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Downloador downloador;<br></span><span style="color: #008080;"> 39</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> DownloadInfoDAO downloadInfoDAO;<br></span><span style="color: #008080;"> 40</span><br><span style="color: #008080;"> 41</span><br><span style="color: #008080;"> 42</span>     <span style="color: #0000ff;">public</span> DownloadTask(<span style="color: #0000ff;">int</span> taskId, <span style="color: #0000ff;">long</span> beginPosition, <span style="color: #0000ff;">long</span><span style="color: #000000;"> endPosition, Downloador downloador,<br></span><span style="color: #008080;"> 43</span> <span style="color: #000000;">                        Context context) {<br></span><span style="color: #008080;"> 44</span>         <span style="color: #0000ff;">this</span>.taskId =<span style="color: #000000;"> taskId;<br></span><span style="color: #008080;"> 45</span>         <span style="color: #0000ff;">this</span>.beginPosition =<span style="color: #000000;"> beginPosition;<br></span><span style="color: #008080;"> 46</span>         <span style="color: #0000ff;">this</span>.endPosition =<span style="color: #000000;"> endPosition;<br></span><span style="color: #008080;"> 47</span>         <span style="color: #0000ff;">this</span>.downloador =<span style="color: #000000;"> downloador;<br></span><span style="color: #008080;"> 48</span>         downloadInfoDAO =<span style="color: #000000;"> DownloadInfoDAO.getInstance(context.getApplicationContext());<br></span><span style="color: #008080;"> 49</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 50</span><br><span style="color: #008080;"> 51</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 52</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onPreExecute() {<br></span><span style="color: #008080;"> 53</span>         Log.e(TAG, “onPreExecute”<span style="color: #000000;">);<br></span><span style="color: #008080;"> 54</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 55</span><br><span style="color: #008080;"> 56</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 57</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onPostExecute(Long aLong) {<br></span><span style="color: #008080;"> 58</span>         Log.e(TAG, url + “taskId:” + taskId + “executed”<span style="color: #000000;">);<br></span><span style="color: #008080;"> 59</span> <span style="color: #008000;">//</span><span style="color: #008000;">        downloador.updateDownloadInfo(null);</span><br><span style="color: #008080;"> 60</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 61</span><br><span style="color: #008080;"> 62</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 63</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onProgressUpdate(Integer… values) {<br></span><span style="color: #008080;"> 64</span>         <span style="color: #008000;">//</span><span style="color: #008000;">通知downloador增加已下载大小<br></span><span style="color: #008080;"> 65</span> <span style="color: #008000;">//</span><span style="color: #008000;">        downloador.updateDownloadLength(values[0]);</span><br><span style="color: #008080;"> 66</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 67</span><br><span style="color: #008080;"> 68</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 69</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCancelled() {<br></span><span style="color: #008080;"> 70</span>         Log.e(TAG, “onCancelled”<span style="color: #000000;">);<br></span><span style="color: #008080;"> 71</span> <span style="color: #008000;">//</span><span style="color: #008000;">        downloador.updateDownloadInfo(null);</span><br><span style="color: #008080;"> 72</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 73</span><br><span style="color: #008080;"> 74</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 75</span>     <span style="color: #0000ff;">protected</span><span style="color: #000000;"> Long doInBackground(String… params) {<br></span><span style="color: #008080;"> 76</span>         <span style="color: #008000;">//</span><span style="color: #008000;">这里加判断的作用是：如果还处于等待就暂停了，运行到这里已经cancel了，就直接退出</span><br><span style="color: #008080;"> 77</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;">(isCancelled()) {<br></span><span style="color: #008080;"> 78</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 79</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 80</span>         url = params[0<span style="color: #000000;">];<br></span><span style="color: #008080;"> 81</span>         <span style="color: #0000ff;">if</span>(url == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;"> 82</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 83</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 84</span>         HttpClient client = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DefaultHttpClient();<br></span><span style="color: #008080;"> 85</span>         HttpGet request = <span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpGet(url);<br></span><span style="color: #008080;"> 86</span> <span style="color: #000000;">        HttpResponse response;<br></span><span style="color: #008080;"> 87</span> <span style="color: #000000;">        InputStream is;<br></span><span style="color: #008080;"> 88</span>         RandomAccessFile fos = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 89</span>         OutputStream output = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 90</span><br><span style="color: #008080;"> 91</span>         DownloadInfo downloadInfo = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 92</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 93</span>             <span style="color: #008000;">//</span><span style="color: #008000;">本地文件</span><br><span style="color: #008080;"> 94</span>             File file = <span style="color: #0000ff;">new</span> File(downloador.getDownloadPath() + File.separator + url.substring(url.lastIndexOf(“/“) + 1<span style="color: #000000;">));<br></span><span style="color: #008080;"> 95</span><br><span style="color: #008080;"> 96</span>             <span style="color: #008000;">//</span><span style="color: #008000;">获取之前下载保存的信息</span><br><span style="color: #008080;"> 97</span>             downloadInfo =<span style="color: #000000;"> downloadInfoDAO.getDownloadInfoByTaskIdAndUrl(taskId, url);<br></span><span style="color: #008080;"> 98</span>             <span style="color: #008000;">//</span><span style="color: #008000;">从之前结束的位置继续下载<br></span><span style="color: #008080;"> 99</span>             <span style="color: #008000;">//</span><span style="color: #008000;">这里加了判断file.exists()，判断是否被用户删除了，如果文件没有下载完，但是已经被用户删除了，则重新下载</span><br><span style="color: #008080;">100</span>             <span style="color: #0000ff;">if</span>(file.exists() &amp;&amp; downloadInfo != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">101</span>                 <span style="color: #0000ff;">if</span>(downloadInfo.isDownloadSuccess() == 1<span style="color: #000000;">) {<br></span><span style="color: #008080;">102</span>                     <span style="color: #008000;">//</span><span style="color: #008000;">下载完成直接结束</span><br><span style="color: #008080;">103</span>                     <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">104</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">105</span>                 beginPosition = beginPosition +<span style="color: #000000;"> downloadInfo.getDownloadLength();<br></span><span style="color: #008080;">106</span>                 downloadLength =<span style="color: #000000;"> downloadInfo.getDownloadLength();<br></span><span style="color: #008080;">107</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">108</span>             <span style="color: #0000ff;">if</span>(!<span style="color: #000000;">file.exists()) {<br></span><span style="color: #008080;">109</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">如果此task已经下载完，但是文件被用户删除，则需要重新设置已下载长度，重新下载</span><br><span style="color: #008080;">110</span> <span style="color: #000000;">                downloador.resetDownloadLength();<br></span><span style="color: #008080;">111</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">112</span><br><span style="color: #008080;">113</span>             <span style="color: #008000;">//</span><span style="color: #008000;">设置下载的数据位置beginPosition字节到endPosition字节</span><br><span style="color: #008080;">114</span>             Header header_size = <span style="color: #0000ff;">new</span> BasicHeader(“Range”, “bytes=” + beginPosition + “-“ +<span style="color: #000000;"> endPosition);<br></span><span style="color: #008080;">115</span> <span style="color: #000000;">            request.addHeader(header_size);<br></span><span style="color: #008080;">116</span>             <span style="color: #008000;">//</span><span style="color: #008000;">执行请求获取下载输入流</span><br><span style="color: #008080;">117</span>             response =<span style="color: #000000;"> client.execute(request);<br></span><span style="color: #008080;">118</span>             is =<span style="color: #000000;"> response.getEntity().getContent();<br></span><span style="color: #008080;">119</span><br><span style="color: #008080;">120</span>             <span style="color: #008000;">//</span><span style="color: #008000;">创建文件输出流</span><br><span style="color: #008080;">121</span>             fos = <span style="color: #0000ff;">new</span> RandomAccessFile(file, “rw”<span style="color: #000000;">);<br></span><span style="color: #008080;">122</span>             <span style="color: #008000;">//</span><span style="color: #008000;">从文件的size以后的位置开始写入</span><br><span style="color: #008080;">123</span> <span style="color: #000000;">            fos.seek(beginPosition);<br></span><span style="color: #008080;">124</span><br><span style="color: #008080;">125</span>             <span style="color: #0000ff;">byte</span> buffer [] = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">byte</span>[1024<span style="color: #000000;">];<br></span><span style="color: #008080;">126</span>             <span style="color: #0000ff;">int</span> inputSize = -1<span style="color: #000000;">;<br></span><span style="color: #008080;">127</span>             <span style="color: #0000ff;">while</span>((inputSize = is.read(buffer)) != -1<span style="color: #000000;">) {<br></span><span style="color: #008080;">128</span>                 fos.write(buffer, 0<span style="color: #000000;">, inputSize);<br></span><span style="color: #008080;">129</span>                 downloadLength +=<span style="color: #000000;"> inputSize;<br></span><span style="color: #008080;">130</span> <span style="color: #000000;">                downloador.updateDownloadLength(inputSize);<br></span><span style="color: #008080;">131</span><br><span style="color: #008080;">132</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">如果暂停了，需要将下载信息存入数据库</span><br><span style="color: #008080;">133</span>                 <span style="color: #0000ff;">if</span><span style="color: #000000;"> (isCancelled()) {<br></span><span style="color: #008080;">134</span>                     <span style="color: #0000ff;">if</span>(downloadInfo == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">135</span>                         downloadInfo = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DownloadInfo();<br></span><span style="color: #008080;">136</span> <span style="color: #000000;">                    }<br></span><span style="color: #008080;">137</span> <span style="color: #000000;">                    downloadInfo.setUrl(url);<br></span><span style="color: #008080;">138</span> <span style="color: #000000;">                    downloadInfo.setDownloadLength(downloadLength);<br></span><span style="color: #008080;">139</span> <span style="color: #000000;">                    downloadInfo.setTaskId(taskId);<br></span><span style="color: #008080;">140</span>                     downloadInfo.setDownloadSuccess(0<span style="color: #000000;">);<br></span><span style="color: #008080;">141</span>                     <span style="color: #008000;">//</span><span style="color: #008000;">保存下载信息到数据库</span><br><span style="color: #008080;">142</span> <span style="color: #000000;">                    downloadInfoDAO.insertDownloadInfo(downloadInfo);<br></span><span style="color: #008080;">143</span>                     <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">144</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">145</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">146</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (MalformedURLException e) {<br></span><span style="color: #008080;">147</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;">148</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {<br></span><span style="color: #008080;">149</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;">150</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;">{<br></span><span style="color: #008080;">151</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;">{<br></span><span style="color: #008080;">152</span>                 <span style="color: #0000ff;">if</span> (request != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">153</span> <span style="color: #000000;">                    request.abort();<br></span><span style="color: #008080;">154</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">155</span>                 <span style="color: #0000ff;">if</span>(output != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">156</span> <span style="color: #000000;">                    output.close();<br></span><span style="color: #008080;">157</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">158</span>                 <span style="color: #0000ff;">if</span>(fos != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">159</span> <span style="color: #000000;">                    fos.close();<br></span><span style="color: #008080;">160</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">161</span>             } <span style="color: #0000ff;">catch</span><span style="color: #000000;">(Exception e) {<br></span><span style="color: #008080;">162</span> <span style="color: #000000;">                e.printStackTrace();<br></span><span style="color: #008080;">163</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">164</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">165</span>         <span style="color: #008000;">//</span><span style="color: #008000;">执行到这里，说明该task已经下载完了</span><br><span style="color: #008080;">166</span>         <span style="color: #0000ff;">if</span>(downloadInfo == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">167</span>             downloadInfo = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DownloadInfo();<br></span><span style="color: #008080;">168</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">169</span> <span style="color: #000000;">        downloadInfo.setUrl(url);<br></span><span style="color: #008080;">170</span> <span style="color: #000000;">        downloadInfo.setDownloadLength(downloadLength);<br></span><span style="color: #008080;">171</span> <span style="color: #000000;">        downloadInfo.setTaskId(taskId);<br></span><span style="color: #008080;">172</span>         downloadInfo.setDownloadSuccess(1<span style="color: #000000;">);<br></span><span style="color: #008080;">173</span>         <span style="color: #008000;">//</span><span style="color: #008000;">保存下载信息到数据库</span><br><span style="color: #008080;">174</span> <span style="color: #000000;">        downloadInfoDAO.insertDownloadInfo(downloadInfo);<br></span><span style="color: #008080;">175</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">176</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">177</span> }</string,></pre><br></div>

<p>　　<span style="font-size: 15px;">Downloador和DownloadTask只这个例子的核心代码，下面是关于数据库的，因为要实现断点续传必须要在暂停的时候将每个线程下载的位置记录下来，方便下次继续下载时读取。这里有两个表，一个是存放每个文件的下载状态的，一个是存放每个文件对应的每个线程的下载状态的。</span></p>
<p><span style="font-size: 15px;">　　3、DBHelper</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.db;<br></span><span style="color: #008080;"> 2</span><br><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;<br></span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.database.sqlite.SQLiteDatabase;<br></span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.database.sqlite.SQLiteOpenHelper;<br></span><span style="color: #008080;"> 6</span><br><span style="color: #008080;"> 7</span> <span style="color: #008000;">/<em>*</em></span><br><span style="color: #008080;"> 8</span> <span style="color: #008000;">  @Class: DBHelper<br></span><span style="color: #008080;"> 9</span> <span style="color: #008000;"> <em> @Description: 数据库帮助类<br></em></span><span style="color: #008080;">10</span> <span style="color: #008000;">  </span><span style="color: #808080;">@author</span><span style="color: #008000;">: lling(www.cnblogs.com/liuling)<br></span><span style="color: #008080;">11</span> <span style="color: #008000;"> <em> @Date: 2015/10/14<br></em></span><span style="color: #008080;">12</span>  <span style="color: #008000;">/</span><br><span style="color: #008080;">13</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> DBHelper <span style="color: #0000ff;">extends</span><span style="color: #000000;"> SQLiteOpenHelper {<br></span><span style="color: #008080;">14</span><br><span style="color: #008080;">15</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> DBHelper(Context context) {<br></span><span style="color: #008080;">16</span>         <span style="color: #0000ff;">super</span>(context, “download.db”, <span style="color: #0000ff;">null</span>, 1<span style="color: #000000;">);<br></span><span style="color: #008080;">17</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">18</span><br><span style="color: #008080;">19</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">20</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(SQLiteDatabase db) {<br></span><span style="color: #008080;">21</span>         db.execSQL(“create table download_info(_id INTEGER PRIMARY KEY AUTOINCREMENT, task_id INTEGER, “<br><span style="color: #008080;">22</span>                 + “download_length INTEGER, url VARCHAR(255), is_success INTEGER)”<span style="color: #000000;">);<br></span><span style="color: #008080;">23</span>         db.execSQL(“create table download_file(_id INTEGER PRIMARY KEY AUTOINCREMENT, app_name VARCHAR(255), “<br><span style="color: #008080;">24</span>                 + “url VARCHAR(255), download_percent INTEGER, status INTEGER)”<span style="color: #000000;">);<br></span><span style="color: #008080;">25</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">26</span><br><span style="color: #008080;">27</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">28</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onUpgrade(SQLiteDatabase db, <span style="color: #0000ff;">int</span> oldVersion, <span style="color: #0000ff;">int</span><span style="color: #000000;"> newVersion) {<br></span><span style="color: #008080;">29</span><br><span style="color: #008080;">30</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">31</span> }</pre><br></div>

<p>　<span style="font-size: 15px;">　4、DownloadFileDAO，文件下载状态的数据库操作类</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.db;<br></span><span style="color: #008080;">  2</span><br><span style="color: #008080;">  3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;<br></span><span style="color: #008080;">  4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.database.Cursor;<br></span><span style="color: #008080;">  5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.database.sqlite.SQLiteDatabase;<br></span><span style="color: #008080;">  6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.text.TextUtils;<br></span><span style="color: #008080;">  7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;<br></span><span style="color: #008080;">  8</span><br><span style="color: #008080;">  9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.beans.AppContent;<br></span><span style="color: #008080;"> 10</span><br><span style="color: #008080;"> 11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.ArrayList;<br></span><span style="color: #008080;"> 12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;<br></span><span style="color: #008080;"> 13</span><br><span style="color: #008080;"> 14</span> <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;"> 15</span> <span style="color: #008000;"> <em> @Class: DownloadFileDAO<br></em></span><span style="color: #008080;"> 16</span> <span style="color: #008000;">  @Description: 每个文件下载状态记录的数据库操作类<br></span><span style="color: #008080;"> 17</span> <span style="color: #008000;"> <em> </em></span><span style="color: #808080;">@author</span><span style="color: #008000;">: lling(www.cnblogs.com/liuling)<br></span><span style="color: #008080;"> 18</span> <span style="color: #008000;">  @Date: 2015/10/13<br></span><span style="color: #008080;"> 19</span>  <span style="color: #008000;">*/</span><br><span style="color: #008080;"> 20</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DownloadFileDAO {<br></span><span style="color: #008080;"> 21</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String TAG = “DownloadFileDAO”<span style="color: #000000;">;<br></span><span style="color: #008080;"> 22</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> DownloadFileDAO dao=<span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 23</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Context context;<br></span><span style="color: #008080;"> 24</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> DownloadFileDAO(Context context) {<br></span><span style="color: #008080;"> 25</span>         <span style="color: #0000ff;">this</span>.context=<span style="color: #000000;">context;<br></span><span style="color: #008080;"> 26</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 27</span><br><span style="color: #008080;"> 28</span>     <span style="color: #0000ff;">synchronized</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> DownloadFileDAO getInstance(Context context){<br></span><span style="color: #008080;"> 29</span>         <span style="color: #0000ff;">if</span>(dao==<span style="color: #0000ff;">null</span><span style="color: #000000;">){<br></span><span style="color: #008080;"> 30</span>             dao=<span style="color: #0000ff;">new</span><span style="color: #000000;"> DownloadFileDAO(context);<br></span><span style="color: #008080;"> 31</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 32</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> dao;<br></span><span style="color: #008080;"> 33</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 34</span><br><span style="color: #008080;"> 35</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;"> 36</span> <span style="color: #008000;">     <em> 获取数据库连接<br></em></span><span style="color: #008080;"> 37</span> <span style="color: #008000;">      </span><span style="color: #808080;">@return</span><br><span style="color: #008080;"> 38</span>      <span style="color: #008000;"><em>/</em></span><br><span style="color: #008080;"> 39</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> SQLiteDatabase getConnection() {<br></span><span style="color: #008080;"> 40</span>         SQLiteDatabase sqliteDatabase = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 41</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 42</span>             sqliteDatabase= <span style="color: #0000ff;">new</span><span style="color: #000000;"> DBHelper(context).getReadableDatabase();<br></span><span style="color: #008080;"> 43</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;"> 44</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;"> 45</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 46</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> sqliteDatabase;<br></span><span style="color: #008080;"> 47</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 48</span><br><span style="color: #008080;"> 49</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;"> 50</span> <span style="color: #008000;">      插入数据<br></span><span style="color: #008080;"> 51</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> appContent<br></span><span style="color: #008080;"> 52</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;"> 53</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> insertDownloadFile(AppContent appContent) {<br></span><span style="color: #008080;"> 54</span>         <span style="color: #0000ff;">if</span>(appContent == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;"> 55</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 56</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 57</span>         <span style="color: #008000;">//</span><span style="color: #008000;">如果本地已经存在，直接修改</span><br><span style="color: #008080;"> 58</span>         <span style="color: #0000ff;">if</span>(getAppContentByUrl(appContent.getUrl()) != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;"> 59</span> <span style="color: #000000;">            updateDownloadFile(appContent);<br></span><span style="color: #008080;"> 60</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 61</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 62</span>         SQLiteDatabase database =<span style="color: #000000;"> getConnection();<br></span><span style="color: #008080;"> 63</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 64</span>             String sql = “insert into download_file(app_name, url, download_percent, status) values (?,?,?,?)”<span style="color: #000000;">;<br></span><span style="color: #008080;"> 65</span>             Object[] bindArgs =<span style="color: #000000;"> { appContent.getName(), appContent.getUrl(), appContent.getDownloadPercent()<br></span><span style="color: #008080;"> 66</span> <span style="color: #000000;">                    , appContent.getStatus().getValue()};<br></span><span style="color: #008080;"> 67</span> <span style="color: #000000;">            database.execSQL(sql, bindArgs);<br></span><span style="color: #008080;"> 68</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;"> 69</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;"> 70</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 71</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> database) {<br></span><span style="color: #008080;"> 72</span> <span style="color: #000000;">                database.close();<br></span><span style="color: #008080;"> 73</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;"> 74</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 75</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 76</span><br><span style="color: #008080;"> 77</span>     <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;"> 78</span> <span style="color: #008000;">     <em> 根据url获取下载文件信息<br></em></span><span style="color: #008080;"> 79</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> url<br></span><span style="color: #008080;"> 80</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@return</span><br><span style="color: #008080;"> 81</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;"> 82</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> AppContent getAppContentByUrl(String url) {<br></span><span style="color: #008080;"> 83</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;">(TextUtils.isEmpty(url)) {<br></span><span style="color: #008080;"> 84</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 85</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 86</span>         SQLiteDatabase database =<span style="color: #000000;"> getConnection();<br></span><span style="color: #008080;"> 87</span>         AppContent appContent = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 88</span>         Cursor cursor = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 89</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 90</span>             String sql = “select * from download_file where url=?”<span style="color: #000000;">;<br></span><span style="color: #008080;"> 91</span>             cursor = database.rawQuery(sql, <span style="color: #0000ff;">new</span><span style="color: #000000;"> String[] { url });<br></span><span style="color: #008080;"> 92</span>             <span style="color: #0000ff;">if</span><span style="color: #000000;"> (cursor.moveToNext()) {<br></span><span style="color: #008080;"> 93</span>                 appContent = <span style="color: #0000ff;">new</span> AppContent(cursor.getString(1), cursor.getString(2<span style="color: #000000;">));<br></span><span style="color: #008080;"> 94</span>                 appContent.setDownloadPercent(cursor.getInt(3<span style="color: #000000;">));<br></span><span style="color: #008080;"> 95</span>                 appContent.setStatus(AppContent.Status.getByValue(cursor.getInt(4<span style="color: #000000;">)));<br></span><span style="color: #008080;"> 96</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;"> 97</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;"> 98</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;"> 99</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">100</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> database) {<br></span><span style="color: #008080;">101</span> <span style="color: #000000;">                database.close();<br></span><span style="color: #008080;">102</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">103</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> cursor) {<br></span><span style="color: #008080;">104</span> <span style="color: #000000;">                cursor.close();<br></span><span style="color: #008080;">105</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">106</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">107</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> appContent;<br></span><span style="color: #008080;">108</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">109</span><br><span style="color: #008080;">110</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;">111</span> <span style="color: #008000;">     <em> 更新下载信息<br></em></span><span style="color: #008080;">112</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> appContent<br></span><span style="color: #008080;">113</span>      <span style="color: #008000;"><em>/</em></span><br><span style="color: #008080;">114</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> updateDownloadFile(AppContent appContent) {<br></span><span style="color: #008080;">115</span>         <span style="color: #0000ff;">if</span>(appContent == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">116</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br></span><span style="color: #008080;">117</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">118</span>         SQLiteDatabase database =<span style="color: #000000;"> getConnection();<br></span><span style="color: #008080;">119</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">120</span>             Log.e(TAG, “update download_file,app name:” + appContent.getName() + “,url:” +<span style="color: #000000;"> appContent.getUrl()<br></span><span style="color: #008080;">121</span>                     + “,percent” + appContent.getDownloadPercent() + “,status:” +<span style="color: #000000;"> appContent.getStatus().getValue());<br></span><span style="color: #008080;">122</span>             String sql = “update download_file set app_name=?, url=?, download_percent=?, status=? where url=?”<span style="color: #000000;">;<br></span><span style="color: #008080;">123</span>             Object[] bindArgs =<span style="color: #000000;"> {appContent.getName(), appContent.getUrl(), appContent.getDownloadPercent()<br></span><span style="color: #008080;">124</span> <span style="color: #000000;">                    , appContent.getStatus().getValue(), appContent.getUrl()};<br></span><span style="color: #008080;">125</span> <span style="color: #000000;">            database.execSQL(sql, bindArgs);<br></span><span style="color: #008080;">126</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;">127</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;">128</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">129</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> database) {<br></span><span style="color: #008080;">130</span> <span style="color: #000000;">                database.close();<br></span><span style="color: #008080;">131</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">132</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">133</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">134</span><br><span style="color: #008080;">135</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">136</span> <span style="color: #008000;">      获取所有下载文件记录<br></span><span style="color: #008080;">137</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@return</span><br><span style="color: #008080;">138</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">139</span>     <span style="color: #0000ff;">public</span> List<appcontent><span style="color: #000000;"> getAll() {<br></span><span style="color: #008080;">140</span>         SQLiteDatabase database =<span style="color: #000000;"> getConnection();<br></span><span style="color: #008080;">141</span>         List<appcontent> list = <span style="color: #0000ff;">new</span> ArrayList<appcontent><span style="color: #000000;">();<br></span><span style="color: #008080;">142</span>         Cursor cursor = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">143</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">144</span>             String sql = “select <em> from download_file”<span style="color: #000000;">;<br></span><span style="color: #008080;">145</span>             cursor = database.rawQuery(sql, <span style="color: #0000ff;">null</span><span style="color: #000000;">);<br></span><span style="color: #008080;">146</span>             <span style="color: #0000ff;">while</span><span style="color: #000000;"> (cursor.moveToNext()) {<br></span><span style="color: #008080;">147</span>                 AppContent appContent = <span style="color: #0000ff;">new</span> AppContent(cursor.getString(1), cursor.getString(2<span style="color: #000000;">));<br></span><span style="color: #008080;">148</span>                 appContent.setDownloadPercent(cursor.getInt(3<span style="color: #000000;">));<br></span><span style="color: #008080;">149</span>                 appContent.setStatus(AppContent.Status.getByValue(cursor.getInt(4<span style="color: #000000;">)));<br></span><span style="color: #008080;">150</span> <span style="color: #000000;">                list.add(appContent);<br></span><span style="color: #008080;">151</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">152</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;">153</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;">154</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">155</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> database) {<br></span><span style="color: #008080;">156</span> <span style="color: #000000;">                database.close();<br></span><span style="color: #008080;">157</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">158</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> cursor) {<br></span><span style="color: #008080;">159</span> <span style="color: #000000;">                cursor.close();<br></span><span style="color: #008080;">160</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">161</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">162</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> list;<br></span><span style="color: #008080;">163</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">164</span><br><span style="color: #008080;">165</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">166</span> <span style="color: #008000;">     </span></em> 根据url删除记录<br><span style="color: #008080;">167</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> url<br></span><span style="color: #008080;">168</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">169</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> delByUrl(String url) {<br></span><span style="color: #008080;">170</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;">(TextUtils.isEmpty(url)) {<br></span><span style="color: #008080;">171</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br></span><span style="color: #008080;">172</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">173</span>         SQLiteDatabase database =<span style="color: #000000;"> getConnection();<br></span><span style="color: #008080;">174</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">175</span>             String sql = “delete from download_file where url=?”<span style="color: #000000;">;<br></span><span style="color: #008080;">176</span>             Object[] bindArgs =<span style="color: #000000;"> { url };<br></span><span style="color: #008080;">177</span> <span style="color: #000000;">            database.execSQL(sql, bindArgs);<br></span><span style="color: #008080;">178</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;">179</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;">180</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">181</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> database) {<br></span><span style="color: #008080;">182</span> <span style="color: #000000;">                database.close();<br></span><span style="color: #008080;">183</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">184</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">185</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">186</span><br><span style="color: #008080;">187</span> }</appcontent></appcontent></appcontent></pre><br></div>

<p>　　<span style="font-size: 15px;">5、DownloadInfoDAO，每个线程对应下载状态的数据库操作类</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.db;<br></span><span style="color: #008080;">  2</span><br><span style="color: #008080;">  3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;<br></span><span style="color: #008080;">  4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.database.Cursor;<br></span><span style="color: #008080;">  5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.database.sqlite.SQLiteDatabase;<br></span><span style="color: #008080;">  6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.text.TextUtils;<br></span><span style="color: #008080;">  7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;<br></span><span style="color: #008080;">  8</span><br><span style="color: #008080;">  9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> com.bbk.lling.multitaskdownload.beans.DownloadInfo;<br></span><span style="color: #008080;"> 10</span><br><span style="color: #008080;"> 11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.ArrayList;<br></span><span style="color: #008080;"> 12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;<br></span><span style="color: #008080;"> 13</span><br><span style="color: #008080;"> 14</span> <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;"> 15</span> <span style="color: #008000;"> <em> @Class: DownloadInfoDAO<br></em></span><span style="color: #008080;"> 16</span> <span style="color: #008000;">  @Description: 每个单独线程下载信息记录的数据库操作类<br></span><span style="color: #008080;"> 17</span> <span style="color: #008000;"> <em> </em></span><span style="color: #808080;">@author</span><span style="color: #008000;">: lling(www.cnblogs.com/liuling)<br></span><span style="color: #008080;"> 18</span> <span style="color: #008000;">  @Date: 2015/10/13<br></span><span style="color: #008080;"> 19</span>  <span style="color: #008000;">*/</span><br><span style="color: #008080;"> 20</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DownloadInfoDAO {<br></span><span style="color: #008080;"> 21</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String TAG = “DownloadInfoDAO”<span style="color: #000000;">;<br></span><span style="color: #008080;"> 22</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> DownloadInfoDAO dao=<span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 23</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Context context;<br></span><span style="color: #008080;"> 24</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;">  DownloadInfoDAO(Context context) {<br></span><span style="color: #008080;"> 25</span>         <span style="color: #0000ff;">this</span>.context=<span style="color: #000000;">context;<br></span><span style="color: #008080;"> 26</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 27</span><br><span style="color: #008080;"> 28</span>     <span style="color: #0000ff;">synchronized</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> DownloadInfoDAO getInstance(Context context){<br></span><span style="color: #008080;"> 29</span>         <span style="color: #0000ff;">if</span>(dao==<span style="color: #0000ff;">null</span><span style="color: #000000;">){<br></span><span style="color: #008080;"> 30</span>             dao=<span style="color: #0000ff;">new</span><span style="color: #000000;"> DownloadInfoDAO(context);<br></span><span style="color: #008080;"> 31</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 32</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> dao;<br></span><span style="color: #008080;"> 33</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 34</span><br><span style="color: #008080;"> 35</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;"> 36</span> <span style="color: #008000;">     <em> 获取数据库连接<br></em></span><span style="color: #008080;"> 37</span> <span style="color: #008000;">      </span><span style="color: #808080;">@return</span><br><span style="color: #008080;"> 38</span>      <span style="color: #008000;"><em>/</em></span><br><span style="color: #008080;"> 39</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> SQLiteDatabase getConnection() {<br></span><span style="color: #008080;"> 40</span>         SQLiteDatabase sqliteDatabase = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 41</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 42</span>             sqliteDatabase= <span style="color: #0000ff;">new</span><span style="color: #000000;"> DBHelper(context).getReadableDatabase();<br></span><span style="color: #008080;"> 43</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;"> 44</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;"> 45</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 46</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> sqliteDatabase;<br></span><span style="color: #008080;"> 47</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 48</span><br><span style="color: #008080;"> 49</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;"> 50</span> <span style="color: #008000;">      插入数据<br></span><span style="color: #008080;"> 51</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> downloadInfo<br></span><span style="color: #008080;"> 52</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;"> 53</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> insertDownloadInfo(DownloadInfo downloadInfo) {<br></span><span style="color: #008080;"> 54</span>         <span style="color: #0000ff;">if</span>(downloadInfo == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;"> 55</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 56</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 57</span>         <span style="color: #008000;">//</span><span style="color: #008000;">如果本地已经存在，直接修改</span><br><span style="color: #008080;"> 58</span>         <span style="color: #0000ff;">if</span>(getDownloadInfoByTaskIdAndUrl(downloadInfo.getTaskId(), downloadInfo.getUrl()) != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;"> 59</span> <span style="color: #000000;">            updateDownloadInfo(downloadInfo);<br></span><span style="color: #008080;"> 60</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 61</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 62</span>         SQLiteDatabase database =<span style="color: #000000;"> getConnection();<br></span><span style="color: #008080;"> 63</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 64</span>             String sql = “insert into download_info(task_id, download_length, url, is_success) values (?,?,?,?)”<span style="color: #000000;">;<br></span><span style="color: #008080;"> 65</span>             Object[] bindArgs =<span style="color: #000000;"> { downloadInfo.getTaskId(), downloadInfo.getDownloadLength(),<br></span><span style="color: #008080;"> 66</span> <span style="color: #000000;">                    downloadInfo.getUrl(), downloadInfo.isDownloadSuccess()};<br></span><span style="color: #008080;"> 67</span> <span style="color: #000000;">            database.execSQL(sql, bindArgs);<br></span><span style="color: #008080;"> 68</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;"> 69</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;"> 70</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 71</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> database) {<br></span><span style="color: #008080;"> 72</span> <span style="color: #000000;">                database.close();<br></span><span style="color: #008080;"> 73</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;"> 74</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 75</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 76</span><br><span style="color: #008080;"> 77</span>     <span style="color: #0000ff;">public</span> List<downloadinfo><span style="color: #000000;"> getDownloadInfosByUrl(String url) {<br></span><span style="color: #008080;"> 78</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;">(TextUtils.isEmpty(url)) {<br></span><span style="color: #008080;"> 79</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 80</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 81</span>         SQLiteDatabase database =<span style="color: #000000;"> getConnection();<br></span><span style="color: #008080;"> 82</span>         List<downloadinfo> list = <span style="color: #0000ff;">new</span> ArrayList<downloadinfo><span style="color: #000000;">();<br></span><span style="color: #008080;"> 83</span>         Cursor cursor = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 84</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 85</span>             String sql = “select <em> from download_info where url=?”<span style="color: #000000;">;<br></span><span style="color: #008080;"> 86</span>             cursor = database.rawQuery(sql, <span style="color: #0000ff;">new</span><span style="color: #000000;"> String[] { url });<br></span><span style="color: #008080;"> 87</span>             <span style="color: #0000ff;">while</span><span style="color: #000000;"> (cursor.moveToNext()) {<br></span><span style="color: #008080;"> 88</span>                 DownloadInfo info = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DownloadInfo();<br></span><span style="color: #008080;"> 89</span>                 info.setTaskId(cursor.getInt(1<span style="color: #000000;">));<br></span><span style="color: #008080;"> 90</span>                 info.setDownloadLength(cursor.getLong(2<span style="color: #000000;">));<br></span><span style="color: #008080;"> 91</span>                 info.setDownloadSuccess(cursor.getInt(4<span style="color: #000000;">));<br></span><span style="color: #008080;"> 92</span>                 info.setUrl(cursor.getString(3<span style="color: #000000;">));<br></span><span style="color: #008080;"> 93</span> <span style="color: #000000;">                list.add(info);<br></span><span style="color: #008080;"> 94</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;"> 95</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;"> 96</span> <span style="color: #000000;">            e.printStackTrace();<br></span><span style="color: #008080;"> 97</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 98</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> database) {<br></span><span style="color: #008080;"> 99</span> <span style="color: #000000;">                database.close();<br></span><span style="color: #008080;">100</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">101</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> cursor) {<br></span><span style="color: #008080;">102</span> <span style="color: #000000;">                cursor.close();<br></span><span style="color: #008080;">103</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">104</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">105</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> list;<br></span><span style="color: #008080;">106</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">107</span><br><span style="color: #008080;">108</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">109</span> <span style="color: #008000;">     </span></em> 根据taskid和url获取下载信息<br><span style="color: #008080;">110</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> taskId<br></span><span style="color: #008080;">111</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> url<br></span><span style="color: #008080;">112</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@return</span><br><span style="color: #008080;">113</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">114</span>     <span style="color: #0000ff;">public</span> DownloadInfo getDownloadInfoByTaskIdAndUrl(<span style="color: #0000ff;">int</span><span style="color: #000000;"> taskId, String url) {<br></span><span style="color: #008080;">115</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;">(TextUtils.isEmpty(url)) {<br></span><span style="color: #008080;">116</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">117</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">118</span>         SQLiteDatabase database =<span style="color: #000000;"> getConnection();<br></span><span style="color: #008080;">119</span>         DownloadInfo info = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">120</span>         Cursor cursor = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">121</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">122</span>             String sql = “select <em> from download_info where url=? and task_id=?”<span style="color: #000000;">;<br></span><span style="color: #008080;">123</span>             cursor = database.rawQuery(sql, <span style="color: #0000ff;">new</span><span style="color: #000000;"> String[] { url, String.valueOf(taskId) });<br></span><span style="color: #008080;">124</span>             <span style="color: #0000ff;">if</span><span style="color: #000000;"> (cursor.moveToNext()) {<br></span><span style="color: #008080;">125</span>                 info = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DownloadInfo();<br></span><span style="color: #008080;">126</span>                 info.setTaskId(cursor.getInt(1<span style="color: #000000;">));<br></span><span style="color: #008080;">127</span>                 info.setDownloadLength(cursor.getLong(2<span style="color: #000000;">));<br></span><span style="color: #008080;">128</span>                 info.setDownloadSuccess(cursor.getInt(4<span style="color: #000000;">));<br></span><span style="color: #008080;">129</span>                 info.setUrl(cursor.getString(3<span style="color: #000000;">));<br></span><span style="color: #008080;">130</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">131</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;">132</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;">133</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">134</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> database) {<br></span><span style="color: #008080;">135</span> <span style="color: #000000;">                database.close();<br></span><span style="color: #008080;">136</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">137</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> cursor) {<br></span><span style="color: #008080;">138</span> <span style="color: #000000;">                cursor.close();<br></span><span style="color: #008080;">139</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">140</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">141</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> info;<br></span><span style="color: #008080;">142</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">143</span><br><span style="color: #008080;">144</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">145</span> <span style="color: #008000;">     </span></em> 更新下载信息<br><span style="color: #008080;">146</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> downloadInfo<br></span><span style="color: #008080;">147</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">148</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> updateDownloadInfo(DownloadInfo downloadInfo) {<br></span><span style="color: #008080;">149</span>         <span style="color: #0000ff;">if</span>(downloadInfo == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">150</span>             <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br></span><span style="color: #008080;">151</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">152</span>         SQLiteDatabase database =<span style="color: #000000;"> getConnection();<br></span><span style="color: #008080;">153</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">154</span>             String sql = “update download_info set download_length=?, is_success=? where task_id=? and url=?”<span style="color: #000000;">;<br></span><span style="color: #008080;">155</span>             Object[] bindArgs =<span style="color: #000000;"> { downloadInfo.getDownloadLength(), downloadInfo.isDownloadSuccess(),<br></span><span style="color: #008080;">156</span> <span style="color: #000000;">                    downloadInfo.getTaskId(), downloadInfo.getUrl() };<br></span><span style="color: #008080;">157</span> <span style="color: #000000;">            database.execSQL(sql, bindArgs);<br></span><span style="color: #008080;">158</span>         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;">159</span> <span style="color: #000000;">            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;">160</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">161</span>             <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">null</span> !=<span style="color: #000000;"> database) {<br></span><span style="color: #008080;">162</span> <span style="color: #000000;">                database.close();<br></span><span style="color: #008080;">163</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">164</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">165</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">166</span><br><span style="color: #008080;">167</span> }</downloadinfo></downloadinfo></downloadinfo></pre><br></div>

<p>　　<span style="font-size: 15px;">具体的界面和使用代码我就不贴代码了，代码有点多。需要的可以下载Demo的源码看看。</span></p>
<p><span style="font-size: 15px;">　　因为还没有花太多时间去测，里面难免会有些bug，如果大家发现什么问题，欢迎留言探讨，谢谢！</span></p>
<p><span style="color: #ff0000;"><strong>源码下载：</strong><a href="https://github.com/liuling07/MultiTaskAndThreadDownload" title="https://github.com/liuling07/MultiTaskAndThreadDownload" target="_blank" rel="external"><span style="color: #000000;">https://github.com/liuling07/MultiTaskAndThreadDownload</span></a></span></p>
<p>&nbsp;</p>
<p>原创内容，转载请注明出处：<a href="http://www.cnblogs.com/liuling/p/2015-10-16-01.html" title="http://www.cnblogs.com/liuling/p/2015-10-16-01.html" target="_blank" rel="external">http://www.cnblogs.com/liuling/p/2015-10-16-01.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<span style="font-size: 15px;">这篇博客是AsyncTask下载系列的最后一篇文章，前面写了关于断点续传的和多线程下载的博客，这篇是在前两篇的基础上面实现的，有兴趣的可以去看下。</span></p>
<p><span style="font-size: 15px;">　　一、<a href="http://www.cnblogs.com/liuling/p/2015-10-10-01.html" title="http://www.cnblogs.com/liuling/p/2015-10-10-01.html">AsyncTask实现断点续传</a></span></p>
<p><span style="font-size: 15px;">　　二、<a href="http://www.cnblogs.com/liuling/p/2015-10-13-01.html" title="http://www.cnblogs.com/liuling/p/2015-10-13-01.html">AsyncTask实现多线程断点续传</a></span></p>
<p><span style="font-size: 15px;">　　这里模拟应用市场app下载实现了一个Demo，因为只有一个界面，所以没有将下载放到Service中，而是直接在Activity中创建。在正式的项目中，下载都是放到Service中，然后通过BroadCast通知界面更新进度。<span style="line-height: 1.5;"><br></span></span><br>]]>
    
    </summary>
    
      <category term="AsyncTask" scheme="http://www.liuling123.com/tags/AsyncTask/"/>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="多线程" scheme="http://www.liuling123.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="断点续传" scheme="http://www.liuling123.com/tags/%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android中使用自定义View实现下载进度的显示]]></title>
    <link href="http://www.liuling123.com/2015/10/customview-download-percent.html"/>
    <id>http://www.liuling123.com/2015/10/customview-download-percent.html</id>
    <published>2015-10-15T02:09:00.000Z</published>
    <updated>2016-01-03T07:09:24.000Z</updated>
    <content type="html"><![CDATA[<p><span style="font-size: 15px;">　　一般有下载功能的应用都会有这样一个场景，需要一个图标来标识不同的状态。之前在公司的项目中写过一个，今天抽空来整理一下。</span></p>
<p><span style="font-size: 15px;">　　一般下载都会有这么几种状态：未开始、等待、正在下载、下载结束，当然有时候会有下载出错的状态。等待状态是指用户点击开始下载，但是线程池中没有空闲的线程来处理该次下载，所以状态为等待。</span></p>
<p><strong><span style="font-size: 15px;">效果图：</span></strong></p>
<p><span style="font-size: 15px;"><img src="http://www.liuling123.com/wp-content/uploads/2015/11/420264-20151015180126929-146101307.gif" alt=""></span></p>
<p>&nbsp;</p>
<p>&nbsp;<br><a id="more"></a><br>　　<span style="font-size: 15px;">这里我只是演示了一下下载和暂停的状态，其他状态没有演示，在代码中设置就可以了。</span></p>
<p><span style="font-size: 15px;"><strong>实现代码：</strong></span></p>
<p><span style="font-size: 15px;">1、自定义View</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> DownloadPercentView <span style="color: #0000ff;">extends</span><span style="color: #000000;"> View {<br></span><span style="color: #008080;">  2</span><br><span style="color: #008080;">  3</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span> STATUS_PEDDING = 1<span style="color: #000000;">;<br></span><span style="color: #008080;">  4</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span> STATUS_WAITING = 2<span style="color: #000000;">;<br></span><span style="color: #008080;">  5</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span> STATUS_DOWNLOADING = 3<span style="color: #000000;">;<br></span><span style="color: #008080;">  6</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span> STATUS_PAUSED = 4<span style="color: #000000;">;<br></span><span style="color: #008080;">  7</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span> STATUS_FINISHED = 5<span style="color: #000000;">;<br></span><span style="color: #008080;">  8</span><br><span style="color: #008080;">  9</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 画实心圆的画笔</span><br><span style="color: #008080;"> 10</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Paint mCirclePaint;<br></span><span style="color: #008080;"> 11</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 画圆环的画笔</span><br><span style="color: #008080;"> 12</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Paint mRingPaint;<br></span><span style="color: #008080;"> 13</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 绘制进度文字的画笔</span><br><span style="color: #008080;"> 14</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Paint mTxtPaint;<br></span><span style="color: #008080;"> 15</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 圆形颜色</span><br><span style="color: #008080;"> 16</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> mCircleColor;<br></span><span style="color: #008080;"> 17</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 圆环颜色</span><br><span style="color: #008080;"> 18</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> mRingColor;<br></span><span style="color: #008080;"> 19</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 半径</span><br><span style="color: #008080;"> 20</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> mRadius;<br></span><span style="color: #008080;"> 21</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 圆环宽度</span><br><span style="color: #008080;"> 22</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span> mStrokeWidth = 2<span style="color: #000000;">;<br></span><span style="color: #008080;"> 23</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 圆心x坐标</span><br><span style="color: #008080;"> 24</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> mXCenter;<br></span><span style="color: #008080;"> 25</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 圆心y坐标</span><br><span style="color: #008080;"> 26</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> mYCenter;<br></span><span style="color: #008080;"> 27</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 总进度</span><br><span style="color: #008080;"> 28</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span> mTotalProgress = 100<span style="color: #000000;">;<br></span><span style="color: #008080;"> 29</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> 当前进度</span><br><span style="color: #008080;"> 30</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> mProgress;<br></span><span style="color: #008080;"> 31</span>     <span style="color: #008000;">//</span><span style="color: #008000;">下载状态</span><br><span style="color: #008080;"> 32</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span> mStatus = 1<span style="color: #000000;">;<br></span><span style="color: #008080;"> 33</span><br><span style="color: #008080;"> 34</span>     <span style="color: #008000;">//</span><span style="color: #008000;">默认显示的图片</span><br><span style="color: #008080;"> 35</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Bitmap mNotBeginImg;<br></span><span style="color: #008080;"> 36</span>     <span style="color: #008000;">//</span><span style="color: #008000;">暂停时中间显示的图片</span><br><span style="color: #008080;"> 37</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Bitmap mPausedImg;<br></span><span style="color: #008080;"> 38</span>     <span style="color: #008000;">//</span><span style="color: #008000;">等待时显示的图片</span><br><span style="color: #008080;"> 39</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Bitmap mWatiImg;<br></span><span style="color: #008080;"> 40</span>     <span style="color: #008000;">//</span><span style="color: #008000;">下载完成时显示的图片</span><br><span style="color: #008080;"> 41</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> Bitmap finishedImg;<br></span><span style="color: #008080;"> 42</span><br><span style="color: #008080;"> 43</span><br><span style="color: #008080;"> 44</span><br><span style="color: #008080;"> 45</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> DownloadPercentView(Context context, AttributeSet attrs) {<br></span><span style="color: #008080;"> 46</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">(context, attrs);<br></span><span style="color: #008080;"> 47</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> 获取自定义的属性</span><br><span style="color: #008080;"> 48</span> <span style="color: #000000;">        initAttrs(context, attrs);<br></span><span style="color: #008080;"> 49</span> <span style="color: #000000;">        initVariable();<br></span><span style="color: #008080;"> 50</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 51</span><br><span style="color: #008080;"> 52</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> initAttrs(Context context, AttributeSet attrs) {<br></span><span style="color: #008080;"> 53</span>         TypedArray typeArray =<span style="color: #000000;"> context.getTheme().obtainStyledAttributes(attrs,<br></span><span style="color: #008080;"> 54</span>                 R.styleable.DownloadPercentView, 0, 0<span style="color: #000000;">);<br></span><span style="color: #008080;"> 55</span>         mRadius = (<span style="color: #0000ff;">int</span>)typeArray.getDimension(R.styleable.DownloadPercentView_radius, 100<span style="color: #000000;">);<br></span><span style="color: #008080;"> 56</span>         mNotBeginImg =<span style="color: #000000;"> ((BitmapDrawable)typeArray.getDrawable(R.styleable.DownloadPercentView_notBeginImg)).getBitmap();<br></span><span style="color: #008080;"> 57</span>         mPausedImg =<span style="color: #000000;"> ((BitmapDrawable)typeArray.getDrawable(R.styleable.DownloadPercentView_pausedImg)).getBitmap();<br></span><span style="color: #008080;"> 58</span>         mWatiImg =<span style="color: #000000;"> ((BitmapDrawable)typeArray.getDrawable(R.styleable.DownloadPercentView_waitImg)).getBitmap();<br></span><span style="color: #008080;"> 59</span>         finishedImg =<span style="color: #000000;"> ((BitmapDrawable)typeArray.getDrawable(R.styleable.DownloadPercentView_finishedImg)).getBitmap();<br></span><span style="color: #008080;"> 60</span><br><span style="color: #008080;"> 61</span>         mNotBeginImg = big(mNotBeginImg, mRadius <em> 2, mRadius </em> 2<span style="color: #000000;">);<br></span><span style="color: #008080;"> 62</span>         mPausedImg = big(mPausedImg, mRadius <em> 2, mRadius </em> 2<span style="color: #000000;">);<br></span><span style="color: #008080;"> 63</span>         mWatiImg = big(mWatiImg, mRadius <em> 2, mRadius </em> 2<span style="color: #000000;">);<br></span><span style="color: #008080;"> 64</span>         finishedImg = big(finishedImg, mRadius <em> 2, mRadius </em> 2<span style="color: #000000;">);<br></span><span style="color: #008080;"> 65</span><br><span style="color: #008080;"> 66</span>         mStrokeWidth = (<span style="color: #0000ff;">int</span>)typeArray.getDimension(R.styleable.DownloadPercentView_strokeWidth, 2<span style="color: #000000;">);<br></span><span style="color: #008080;"> 67</span><br><span style="color: #008080;"> 68</span> <span style="color: #008000;">//</span><span style="color: #008000;">        mRadius = Math.max(mNotBeginImg.getWidth()/2, mNotBeginImg.getHeight()/2) + mStrokeWidth;</span><br><span style="color: #008080;"> 69</span>         mCircleColor = typeArray.getColor(R.styleable.DownloadPercentView_circleColor, 0xFFFFFFFF<span style="color: #000000;">);<br></span><span style="color: #008080;"> 70</span>         mRingColor = typeArray.getColor(R.styleable.DownloadPercentView_ringColor, 0xFFFFFFFF<span style="color: #000000;">);<br></span><span style="color: #008080;"> 71</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 72</span><br><span style="color: #008080;"> 73</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> initVariable() {<br></span><span style="color: #008080;"> 74</span>         <span style="color: #008000;">//</span><span style="color: #008000;">初始化绘制灰色圆的画笔</span><br><span style="color: #008080;"> 75</span>         mCirclePaint = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Paint();<br></span><span style="color: #008080;"> 76</span>         mCirclePaint.setAntiAlias(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br></span><span style="color: #008080;"> 77</span> <span style="color: #000000;">        mCirclePaint.setColor(mCircleColor);<br></span><span style="color: #008080;"> 78</span> <span style="color: #000000;">        mCirclePaint.setStyle(Paint.Style.STROKE);<br></span><span style="color: #008080;"> 79</span> <span style="color: #000000;">        mCirclePaint.setStrokeWidth(mStrokeWidth);<br></span><span style="color: #008080;"> 80</span><br><span style="color: #008080;"> 81</span>         <span style="color: #008000;">//</span><span style="color: #008000;">初始化绘制圆弧的画笔</span><br><span style="color: #008080;"> 82</span>         mRingPaint = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Paint();<br></span><span style="color: #008080;"> 83</span>         mRingPaint.setAntiAlias(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br></span><span style="color: #008080;"> 84</span> <span style="color: #000000;">        mRingPaint.setColor(mRingColor);<br></span><span style="color: #008080;"> 85</span> <span style="color: #000000;">        mRingPaint.setStyle(Paint.Style.STROKE);<br></span><span style="color: #008080;"> 86</span> <span style="color: #000000;">        mRingPaint.setStrokeWidth(mStrokeWidth);<br></span><span style="color: #008080;"> 87</span><br><span style="color: #008080;"> 88</span>         <span style="color: #008000;">//</span><span style="color: #008000;">初始化绘制文字的画笔</span><br><span style="color: #008080;"> 89</span>         mTxtPaint = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Paint();<br></span><span style="color: #008080;"> 90</span>         mTxtPaint.setAntiAlias(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br></span><span style="color: #008080;"> 91</span>         mTxtPaint.setColor(Color.parseColor(“#52ce90”<span style="color: #000000;">));<br></span><span style="color: #008080;"> 92</span> <span style="color: #000000;">        mTxtPaint.setTextAlign(Paint.Align.CENTER);<br></span><span style="color: #008080;"> 93</span>         mTxtPaint.setTextSize(24<span style="color: #000000;">);<br></span><span style="color: #008080;"> 94</span><br><span style="color: #008080;"> 95</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;"> 96</span><br><span style="color: #008080;"> 97</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 98</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span> onMeasure(<span style="color: #0000ff;">int</span> widthMeasureSpec, <span style="color: #0000ff;">int</span><span style="color: #000000;"> heightMeasureSpec) {<br></span><span style="color: #008080;"> 99</span>         <span style="color: #0000ff;">int</span> width = (<span style="color: #0000ff;">int</span>)Math.ceil(mRadius) <em> 2<span style="color: #000000;">;<br></span><span style="color: #008080;">100</span> <span style="color: #000000;">        setMeasuredDimension(width, width);<br></span><span style="color: #008080;">101</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">102</span><br><span style="color: #008080;">103</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">104</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDraw(Canvas canvas) {<br></span><span style="color: #008080;">105</span>         mXCenter = getWidth() / 2<span style="color: #000000;">;<br></span><span style="color: #008080;">106</span>         mYCenter = getHeight() / 2<span style="color: #000000;">;<br></span><span style="color: #008080;">107</span>         <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (mStatus) {<br></span><span style="color: #008080;">108</span>             <span style="color: #0000ff;">case</span><span style="color: #000000;"> STATUS_PEDDING:<br></span><span style="color: #008080;">109</span>                 canvas.drawBitmap(mNotBeginImg, 0, 0, <span style="color: #0000ff;">null</span><span style="color: #000000;">);<br></span><span style="color: #008080;">110</span>                 <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br></span><span style="color: #008080;">111</span>             <span style="color: #0000ff;">case</span><span style="color: #000000;"> STATUS_WAITING:<br></span><span style="color: #008080;">112</span>                 canvas.drawBitmap(mWatiImg, 0, 0, <span style="color: #0000ff;">null</span><span style="color: #000000;">);<br></span><span style="color: #008080;">113</span>                 <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br></span><span style="color: #008080;">114</span>             <span style="color: #0000ff;">case</span><span style="color: #000000;"> STATUS_DOWNLOADING:<br></span><span style="color: #008080;">115</span> <span style="color: #000000;">                drawDownloadingView(canvas);<br></span><span style="color: #008080;">116</span>                 <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br></span><span style="color: #008080;">117</span>             <span style="color: #0000ff;">case</span><span style="color: #000000;"> STATUS_PAUSED:<br></span><span style="color: #008080;">118</span> <span style="color: #000000;">                drawPausedView(canvas);<br></span><span style="color: #008080;">119</span>                 <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br></span><span style="color: #008080;">120</span>             <span style="color: #0000ff;">case</span><span style="color: #000000;"> STATUS_FINISHED:<br></span><span style="color: #008080;">121</span>                 canvas.drawBitmap(finishedImg, 0, 0, <span style="color: #0000ff;">null</span><span style="color: #000000;">);<br></span><span style="color: #008080;">122</span>                 <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br></span><span style="color: #008080;">123</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">124</span><br><span style="color: #008080;">125</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">126</span><br><span style="color: #008080;">127</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">128</span> <span style="color: #008000;">     </span></em> 绘制下载中的view<br><span style="color: #008080;">129</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> canvas<br></span><span style="color: #008080;">130</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">131</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> drawDownloadingView(Canvas canvas) {<br></span><span style="color: #008080;">132</span>         <span style="color: #008000;">//</span><span style="color: #008000;">绘制灰色圆环</span><br><span style="color: #008080;">133</span>         canvas.drawCircle(mXCenter, mYCenter, mRadius - mStrokeWidth/2<span style="color: #000000;">, mCirclePaint);<br></span><span style="color: #008080;">134</span><br><span style="color: #008080;">135</span>         <span style="color: #008000;">//</span><span style="color: #008000;">绘制进度扇形圆环</span><br><span style="color: #008080;">136</span>         RectF oval = <span style="color: #0000ff;">new</span><span style="color: #000000;"> RectF();<br></span><span style="color: #008080;">137</span>         <span style="color: #008000;">//</span><span style="color: #008000;">设置椭圆上下左右的坐标</span><br><span style="color: #008080;">138</span>         oval.left = mXCenter - mRadius + mStrokeWidth/2<span style="color: #000000;">;<br></span><span style="color: #008080;">139</span>         oval.top = mYCenter - mRadius + mStrokeWidth/2<span style="color: #000000;">;<br></span><span style="color: #008080;">140</span>         oval.right = mXCenter + mRadius - mStrokeWidth/2<span style="color: #000000;">;<br></span><span style="color: #008080;">141</span>         oval.bottom = mYCenter + mRadius - mStrokeWidth/2<span style="color: #000000;">;<br></span><span style="color: #008080;">142</span>         canvas.drawArc(oval, -90, ((<span style="color: #0000ff;">float</span>)mProgress / mTotalProgress) <em> 360, <span style="color: #0000ff;">false</span><span style="color: #000000;">, mRingPaint);<br></span><span style="color: #008080;">143</span><br><span style="color: #008080;">144</span>         <span style="color: #008000;">//</span><span style="color: #008000;">绘制中间百分比文字</span><br><span style="color: #008080;">145</span>         String percentTxt =<span style="color: #000000;"> String.valueOf(mProgress);<br></span><span style="color: #008080;">146</span>         <span style="color: #008000;">//</span><span style="color: #008000;">计算文字垂直居中的baseline</span><br><span style="color: #008080;">147</span>         Paint.FontMetricsInt fontMetrics =<span style="color: #000000;"> mTxtPaint.getFontMetricsInt();<br></span><span style="color: #008080;">148</span>         <span style="color: #0000ff;">float</span> baseline = oval.top + (oval.bottom - oval.top - fontMetrics.bottom + fontMetrics.top) / 2 -<span style="color: #000000;"> fontMetrics.top;<br></span><span style="color: #008080;">149</span> <span style="color: #000000;">        canvas.drawText(percentTxt, mXCenter, baseline, mTxtPaint);<br></span><span style="color: #008080;">150</span><br><span style="color: #008080;">151</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">152</span><br><span style="color: #008080;">153</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">154</span> <span style="color: #008000;">     </span></em> 绘制暂停时的view<br><span style="color: #008080;">155</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> canvas<br></span><span style="color: #008080;">156</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">157</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> drawPausedView(Canvas canvas) {<br></span><span style="color: #008080;">158</span>         <span style="color: #008000;">//</span><span style="color: #008000;">绘制灰色圆环</span><br><span style="color: #008080;">159</span>         canvas.drawCircle(mXCenter, mYCenter, mRadius - mStrokeWidth/2<span style="color: #000000;">, mCirclePaint);<br></span><span style="color: #008080;">160</span><br><span style="color: #008080;">161</span>         <span style="color: #008000;">//</span><span style="color: #008000;">绘制进度扇形圆环</span><br><span style="color: #008080;">162</span>         RectF oval = <span style="color: #0000ff;">new</span><span style="color: #000000;"> RectF();<br></span><span style="color: #008080;">163</span>         <span style="color: #008000;">//</span><span style="color: #008000;">设置椭圆上下左右的坐标</span><br><span style="color: #008080;">164</span>         oval.left = mXCenter - mRadius + mStrokeWidth/2<span style="color: #000000;">;<br></span><span style="color: #008080;">165</span>         oval.top = mYCenter - mRadius + mStrokeWidth/2<span style="color: #000000;">;<br></span><span style="color: #008080;">166</span>         oval.right = mXCenter + mRadius - mStrokeWidth/2<span style="color: #000000;">;<br></span><span style="color: #008080;">167</span>         oval.bottom = mYCenter + mRadius - mStrokeWidth/2<span style="color: #000000;">;<br></span><span style="color: #008080;">168</span>         canvas.drawArc(oval, -90, ((<span style="color: #0000ff;">float</span>) mProgress / mTotalProgress) <em> 360, <span style="color: #0000ff;">false</span><span style="color: #000000;">, mRingPaint);<br></span><span style="color: #008080;">169</span><br><span style="color: #008080;">170</span>         <span style="color: #008000;">//</span><span style="color: #008000;">绘制中间暂停图标</span><br><span style="color: #008080;">171</span>         canvas.drawBitmap(mPausedImg, 0, 0, <span style="color: #0000ff;">null</span><span style="color: #000000;">);<br></span><span style="color: #008080;">172</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">173</span><br><span style="color: #008080;">174</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">175</span> <span style="color: #008000;">     </span></em> 更新进度<br><span style="color: #008080;">176</span> <span style="color: #008000;">     <em> </em></span><span style="color: #808080;">@param</span><span style="color: #008000;"> progress<br></span><span style="color: #008080;">177</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">178</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setProgress(<span style="color: #0000ff;">int</span><span style="color: #000000;"> progress) {<br></span><span style="color: #008080;">179</span>         mProgress =<span style="color: #000000;"> progress;<br></span><span style="color: #008080;">180</span> <span style="color: #000000;">        postInvalidate();<br></span><span style="color: #008080;">181</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">182</span><br><span style="color: #008080;">183</span>     <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;">184</span> <span style="color: #008000;">     <em> 设置下载状态<br></em></span><span style="color: #008080;">185</span> <span style="color: #008000;">      </span><span style="color: #808080;">@param</span><span style="color: #008000;"> status<br></span><span style="color: #008080;">186</span>      <span style="color: #008000;">*/</span><br><span style="color: #008080;">187</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setStatus(<span style="color: #0000ff;">int</span><span style="color: #000000;"> status) {<br></span><span style="color: #008080;">188</span>         <span style="color: #0000ff;">this</span>.mStatus =<span style="color: #000000;"> status;<br></span><span style="color: #008080;">189</span> <span style="color: #000000;">        postInvalidate();<br></span><span style="color: #008080;">190</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">191</span><br><span style="color: #008080;">192</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;">193</span> <span style="color: #008000;">     <em> 获取下载状态<br></em></span><span style="color: #008080;">194</span> <span style="color: #008000;">      </span><span style="color: #808080;">@return</span><br><span style="color: #008080;">195</span>      <span style="color: #008000;">*/</span><br><span style="color: #008080;">196</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getStatus() {<br></span><span style="color: #008080;">197</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> mStatus;<br></span><span style="color: #008080;">198</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">199</span><br><span style="color: #008080;">200</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> Bitmap big(Bitmap b,<span style="color: #0000ff;">float</span> x,<span style="color: #0000ff;">float</span><span style="color: #000000;"> y)<br></span><span style="color: #008080;">201</span> <span style="color: #000000;">    {<br></span><span style="color: #008080;">202</span>         <span style="color: #0000ff;">int</span> w=<span style="color: #000000;">b.getWidth();<br></span><span style="color: #008080;">203</span>         <span style="color: #0000ff;">int</span> h=<span style="color: #000000;">b.getHeight();<br></span><span style="color: #008080;">204</span>         <span style="color: #0000ff;">float</span> sx=(<span style="color: #0000ff;">float</span>)x/<span style="color: #000000;">w;<br></span><span style="color: #008080;">205</span>         <span style="color: #0000ff;">float</span> sy=(<span style="color: #0000ff;">float</span>)y/<span style="color: #000000;">h;<br></span><span style="color: #008080;">206</span>         Matrix matrix = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Matrix();<br></span><span style="color: #008080;">207</span>         matrix.postScale(sx, sy); <span style="color: #008000;">//</span><span style="color: #008000;"> 长和宽放大缩小的比例</span><br><span style="color: #008080;">208</span>         Bitmap resizeBmp = Bitmap.createBitmap(b, 0, 0<span style="color: #000000;">, w,<br></span><span style="color: #008080;">209</span>                 h, matrix, <span style="color: #0000ff;">true</span><span style="color: #000000;">);<br></span><span style="color: #008080;">210</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> resizeBmp;<br></span><span style="color: #008080;">211</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">212</span><br><span style="color: #008080;">213</span> }</pre><br></div>

<p><span style="font-size: 15px;">2、自定义属性</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;?</span><span style="color: #ff00ff;">xml version=”1.0” encoding=”utf-8”</span><span style="color: #0000ff;">?&gt;</span><br><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">resources</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #008080;"> 3</span><br><span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">declare-styleable </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”DownloadPercentView”</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">attr </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”radius”</span><span style="color: #ff0000;"> format</span><span style="color: #0000ff;">=”dimension”</span><span style="color: #0000ff;">/&gt;</span><br><span style="color: #008080;"> 6</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">attr </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”notBeginImg”</span><span style="color: #ff0000;"> format</span><span style="color: #0000ff;">=”string”</span><span style="color: #0000ff;">/&gt;</span><br><span style="color: #008080;"> 7</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">attr </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”waitImg”</span><span style="color: #ff0000;"> format</span><span style="color: #0000ff;">=”string”</span><span style="color: #0000ff;">/&gt;</span><br><span style="color: #008080;"> 8</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">attr </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”pausedImg”</span><span style="color: #ff0000;"> format</span><span style="color: #0000ff;">=”string”</span><span style="color: #0000ff;">/&gt;</span><br><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">attr </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”finishedImg”</span><span style="color: #ff0000;"> format</span><span style="color: #0000ff;">=”string”</span><span style="color: #0000ff;">/&gt;</span><br><span style="color: #008080;">10</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">attr </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”strokeWidth”</span><span style="color: #ff0000;"> format</span><span style="color: #0000ff;">=”dimension”</span><span style="color: #0000ff;">/&gt;</span><br><span style="color: #008080;">11</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">attr </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”circleColor”</span><span style="color: #ff0000;"> format</span><span style="color: #0000ff;">=”color”</span><span style="color: #0000ff;">/&gt;</span><br><span style="color: #008080;">12</span>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">attr </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=”ringColor”</span><span style="color: #ff0000;"> format</span><span style="color: #0000ff;">=”color”</span><span style="color: #0000ff;">/&gt;</span><br><span style="color: #008080;">13</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">declare-styleable</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #008080;">14</span><br><span style="color: #008080;">15</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">resources</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p><span style="font-size: 15px;">3、使用自定义布局</span></p>
<p><span style="font-size: 15px;">　　首先在布局文件中引用：</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">RelativeLayout </span><span style="color: #ff0000;">xmlns:android</span><span style="color: #0000ff;">=”<a href="http://schemas.android.com/apk/res/android" target="_blank" rel="external">http://schemas.android.com/apk/res/android</a>“</span><br><span style="color: #008080;"> 2</span> <span style="color: #ff0000;">    xmlns:custom</span><span style="color: #0000ff;">=”<a href="http://schemas.android.com/apk/res-auto" target="_blank" rel="external">http://schemas.android.com/apk/res-auto</a>“</span><br><span style="color: #008080;"> 3</span> <span style="color: #ff0000;">    xmlns:tools</span><span style="color: #0000ff;">=”<a href="http://schemas.android.com/tools" target="_blank" rel="external">http://schemas.android.com/tools</a>“</span><br><span style="color: #008080;"> 4</span> <span style="color: #ff0000;">    android:layout_width</span><span style="color: #0000ff;">=”match_parent”</span><br><span style="color: #008080;"> 5</span> <span style="color: #ff0000;">    android:layout_height</span><span style="color: #0000ff;">=”match_parent”</span><span style="color: #ff0000;"> android:paddingLeft</span><span style="color: #0000ff;">=”@dimen/activity_horizontal_margin”</span><br><span style="color: #008080;"> 6</span> <span style="color: #ff0000;">    android:paddingRight</span><span style="color: #0000ff;">=”@dimen/activity_horizontal_margin”</span><br><span style="color: #008080;"> 7</span> <span style="color: #ff0000;">    android:paddingTop</span><span style="color: #0000ff;">=”@dimen/activity_vertical_margin”</span><br><span style="color: #008080;"> 8</span> <span style="color: #ff0000;">    android:paddingBottom</span><span style="color: #0000ff;">=”@dimen/activity_vertical_margin”</span><span style="color: #ff0000;"> tools:context</span><span style="color: #0000ff;">=”.MainActivity”</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #008080;"> 9</span><br><span style="color: #008080;">10</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">com.bbk.lling.downloadpercentdemo.DownloadPercentView<br></span><span style="color: #008080;">11</span>         <span style="color: #ff0000;">android:id</span><span style="color: #0000ff;">=”@+id/downloadView”</span><br><span style="color: #008080;">12</span> <span style="color: #ff0000;">        android:layout_width</span><span style="color: #0000ff;">=”wrap_content”</span><br><span style="color: #008080;">13</span> <span style="color: #ff0000;">        android:layout_height</span><span style="color: #0000ff;">=”wrap_content”</span><br><span style="color: #008080;">14</span> <span style="color: #ff0000;">        android:layout_centerInParent</span><span style="color: #0000ff;">=”true”</span><br><span style="color: #008080;">15</span> <span style="color: #ff0000;">        custom:notBeginImg</span><span style="color: #0000ff;">=”@drawable/ic_no_download”</span><br><span style="color: #008080;">16</span> <span style="color: #ff0000;">        custom:waitImg</span><span style="color: #0000ff;">=”@drawable/ic_wait”</span><br><span style="color: #008080;">17</span> <span style="color: #ff0000;">        custom:pausedImg</span><span style="color: #0000ff;">=”@drawable/ic_pause”</span><br><span style="color: #008080;">18</span> <span style="color: #ff0000;">        custom:finishedImg</span><span style="color: #0000ff;">=”@drawable/ic_finished”</span><br><span style="color: #008080;">19</span> <span style="color: #ff0000;">        custom:strokeWidth</span><span style="color: #0000ff;">=”2dp”</span><br><span style="color: #008080;">20</span> <span style="color: #ff0000;">        custom:circleColor</span><span style="color: #0000ff;">=”#bdbdbd”</span><br><span style="color: #008080;">21</span> <span style="color: #ff0000;">        custom:radius</span><span style="color: #0000ff;">=”18dp”</span><br><span style="color: #008080;">22</span> <span style="color: #ff0000;">        custom:ringColor</span><span style="color: #0000ff;">=”#52ce90”</span><span style="color: #0000ff;">/&gt;</span><br><span style="color: #008080;">23</span><br><span style="color: #008080;">24</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">RelativeLayout</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>&nbsp;</p>
<p>　　<span style="font-size: 15px;">然后我这里在Activity使用一个线程来模拟下载过程来演示：</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.bbk.lling.downloadpercentdemo;<br></span><span style="color: #008080;"> 2</span><br><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;<br></span><span style="color: #008080;"> 4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;<br></span><span style="color: #008080;"> 5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Handler;<br></span><span style="color: #008080;"> 6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Message;<br></span><span style="color: #008080;"> 7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;<br></span><span style="color: #008080;"> 8</span><br><span style="color: #008080;"> 9</span><br><span style="color: #008080;">10</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {<br></span><span style="color: #008080;">11</span><br><span style="color: #008080;">12</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span> MSG_UPDATE = 1<span style="color: #000000;">;<br></span><span style="color: #008080;">13</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span> MSG_FINISHED = 2<span style="color: #000000;">;<br></span><span style="color: #008080;">14</span><br><span style="color: #008080;">15</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> DownloadPercentView mDownloadPercentView;<br></span><span style="color: #008080;">16</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span> mDownloadProgress = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">17</span>     <span style="color: #0000ff;">private</span> Handler mHandler = <span style="color: #0000ff;">new</span><span style="color: #000000;"> InnerHandler();<br></span><span style="color: #008080;">18</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">boolean</span> downloading = <span style="color: #0000ff;">false</span><span style="color: #000000;">;<br></span><span style="color: #008080;">19</span><br><span style="color: #008080;">20</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">21</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {<br></span><span style="color: #008080;">22</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);<br></span><span style="color: #008080;">23</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);<br></span><span style="color: #008080;">24</span>         mDownloadPercentView =<span style="color: #000000;"> (DownloadPercentView) findViewById(R.id.downloadView);<br></span><span style="color: #008080;">25</span>         mDownloadPercentView.setOnClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> View.OnClickListener() {<br></span><span style="color: #008080;">26</span> <span style="color: #000000;">            @Override<br></span><span style="color: #008080;">27</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {<br></span><span style="color: #008080;">28</span>                 <span style="color: #0000ff;">if</span>(mDownloadPercentView.getStatus() ==<span style="color: #000000;"> DownloadPercentView.STATUS_PEDDING<br></span><span style="color: #008080;">29</span>                         || mDownloadPercentView.getStatus() ==<span style="color: #000000;"> DownloadPercentView.STATUS_PAUSED) {<br></span><span style="color: #008080;">30</span>                     downloading = <span style="color: #0000ff;">true</span><span style="color: #000000;">;<br></span><span style="color: #008080;">31</span> <span style="color: #000000;">                    mDownloadPercentView.setStatus(DownloadPercentView.STATUS_DOWNLOADING);<br></span><span style="color: #008080;">32</span>                     <span style="color: #008000;">//</span><span style="color: #008000;">模拟下载</span><br><span style="color: #008080;">33</span>                     <span style="color: #0000ff;">new</span> Thread(<span style="color: #0000ff;">new</span><span style="color: #000000;"> Runnable() {<br></span><span style="color: #008080;">34</span> <span style="color: #000000;">                        @Override<br></span><span style="color: #008080;">35</span>                         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {<br></span><span style="color: #008080;">36</span>                             <span style="color: #0000ff;">while</span><span style="color: #000000;"> (downloading) {<br></span><span style="color: #008080;">37</span>                                 <span style="color: #0000ff;">if</span>(mDownloadProgress == 100<span style="color: #000000;">) {<br></span><span style="color: #008080;">38</span> <span style="color: #000000;">                                    mHandler.sendEmptyMessage(MSG_FINISHED);<br></span><span style="color: #008080;">39</span>                                     <span style="color: #0000ff;">return</span><span style="color: #000000;">;<br></span><span style="color: #008080;">40</span> <span style="color: #000000;">                                }<br></span><span style="color: #008080;">41</span>                                 mDownloadProgress += 1<span style="color: #000000;">;<br></span><span style="color: #008080;">42</span> <span style="color: #000000;">                                mHandler.sendEmptyMessage(MSG_UPDATE);<br></span><span style="color: #008080;">43</span>                                 <span style="color: #0000ff;">try</span><span style="color: #000000;">{<br></span><span style="color: #008080;">44</span>                                     Thread.sleep(100<span style="color: #000000;">);<br></span><span style="color: #008080;">45</span>                                 } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;">46</span> <span style="color: #000000;">                                }<br></span><span style="color: #008080;">47</span><br><span style="color: #008080;">48</span> <span style="color: #000000;">                            }<br></span><span style="color: #008080;">49</span> <span style="color: #000000;">                        }<br></span><span style="color: #008080;">50</span> <span style="color: #000000;">                    }).start();<br></span><span style="color: #008080;">51</span>                 } <span style="color: #0000ff;">else</span> <span style="color: #0000ff;">if</span>(mDownloadPercentView.getStatus() ==<span style="color: #000000;"> DownloadPercentView.STATUS_DOWNLOADING){<br></span><span style="color: #008080;">52</span>                     downloading = <span style="color: #0000ff;">false</span><span style="color: #000000;">;<br></span><span style="color: #008080;">53</span> <span style="color: #000000;">                    mDownloadPercentView.setStatus(DownloadPercentView.STATUS_PAUSED);<br></span><span style="color: #008080;">54</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">55</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">56</span> <span style="color: #000000;">        });<br></span><span style="color: #008080;">57</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">58</span><br><span style="color: #008080;">59</span>     <span style="color: #0000ff;">class</span> InnerHandler <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Handler {<br></span><span style="color: #008080;">60</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;">61</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> handleMessage(Message msg) {<br></span><span style="color: #008080;">62</span>             <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (msg.what) {<br></span><span style="color: #008080;">63</span>                 <span style="color: #0000ff;">case</span><span style="color: #000000;"> MSG_FINISHED:<br></span><span style="color: #008080;">64</span> <span style="color: #000000;">                    mDownloadPercentView.setStatus(DownloadPercentView.STATUS_FINISHED);<br></span><span style="color: #008080;">65</span>                     <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br></span><span style="color: #008080;">66</span>                 <span style="color: #0000ff;">case</span><span style="color: #000000;"> MSG_UPDATE:<br></span><span style="color: #008080;">67</span> <span style="color: #000000;">                    mDownloadPercentView.setProgress(mDownloadProgress);<br></span><span style="color: #008080;">68</span>                     <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br></span><span style="color: #008080;">69</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">70</span>             <span style="color: #0000ff;">super</span><span style="color: #000000;">.handleMessage(msg);<br></span><span style="color: #008080;">71</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">72</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">73</span><br><span style="color: #008080;">74</span><br><span style="color: #008080;">75</span> }</pre><br></div>

<p>&nbsp;</p>
<p><span style="font-size: 15px;"><span style="color: #ff0000;"><strong>源码下载：</strong></span><a href="https://github.com/liuling07/DownloadPercentDemo" title="https://github.com/liuling07/DownloadPercentDemo" target="_blank" rel="external">https://github.com/liuling07/DownloadPercentDemo</a></span></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><span style="font-size: 15px;">　　一般有下载功能的应用都会有这样一个场景，需要一个图标来标识不同的状态。之前在公司的项目中写过一个，今天抽空来整理一下。</span></p>
<p><span style="font-size: 15px;">　　一般下载都会有这么几种状态：未开始、等待、正在下载、下载结束，当然有时候会有下载出错的状态。等待状态是指用户点击开始下载，但是线程池中没有空闲的线程来处理该次下载，所以状态为等待。</span></p>
<p><strong><span style="font-size: 15px;">效果图：</span></strong></p>
<p><span style="font-size: 15px;"><img src="http://www.liuling123.com/wp-content/uploads/2015/11/420264-20151015180126929-146101307.gif" alt=""></span></p>
<p>&nbsp;</p>
<p>&nbsp;<br>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="自定义控件" scheme="http://www.liuling123.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android中Parcelable接口的使用]]></title>
    <link href="http://www.liuling123.com/2015/10/parcelable-example.html"/>
    <id>http://www.liuling123.com/2015/10/parcelable-example.html</id>
    <published>2015-10-13T22:46:00.000Z</published>
    <updated>2016-01-03T07:37:32.000Z</updated>
    <content type="html"><![CDATA[<p><span style="font-size: 15px;">　　在做开发的过程中，序列化是非常常见的。比如要将对象保存本地磁盘或者在网络上传输等。实现序列化有两种方式，一种是实现Serializable接口，第二种是实现Parcelable。</span></p>
<p><span style="font-size: 15px;"><strong>Serializable与Parcelable的区别</strong></span></p>
<p><span style="font-size: 15px;">　　1、Serializable是JDK提供的接口，而Parcelable是Android SDK提供的。</span></p>
<p><span style="font-size: 15px;">　　2、Serializable序列化是基于磁盘的，而Parcelable是基于内存的。在内存中读写肯定效率要高于磁盘，所以Android中跨进程传递对象都是使用Parcelable。</span></p>
<p><strong>Parcelable接口定义</strong></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> Parcelable {<br></span><span style="color: #008080;"> 2</span>     <span style="color: #008000;">//</span><span style="color: #008000;">内容描述接口，基本不用管</span><br><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> describeContents();<br></span><span style="color: #008080;"> 4</span>     <span style="color: #008000;">//</span><span style="color: #008000;">写入接口函数，打包</span><br><span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> writeToParcel(Parcel dest, <span style="color: #0000ff;">int</span><span style="color: #000000;"> flags);<br></span><span style="color: #008080;"> 6</span>      <span style="color: #008000;">//</span><span style="color: #008000;">读取接口，目的是要从Parcel中构造一个实现了Parcelable的类的实例处理。因为实现类在这里还是不可知的，所以需要用到模板的方式，继承类名通过模板参数传入。<br></span><span style="color: #008080;"> 7</span>     <span style="color: #008000;">//</span><span style="color: #008000;">为了能够实现模板参数的传入，这里定义Creator嵌入接口,内含两个接口函数分别返回单个和多个继承类实例。</span><br><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span> Creator<t><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 9</span>            <span style="color: #0000ff;">public</span><span style="color: #000000;"> T createFromParcel(Parcel source);<br></span><span style="color: #008080;">10</span>            <span style="color: #0000ff;">public</span> T[] newArray(<span style="color: #0000ff;">int</span><span style="color: #000000;"> size);<br></span><span style="color: #008080;">11</span>        }</t></pre><br></div>

<p><span style="font-size: 15px;">　　从parcelable接口定义中，我们可以看到，实现parcelable接口，需要我们实现下面几个方法：</span></p>
<p><span style="font-size: 15px;">&nbsp;&nbsp; 　　1.describeContents方法。内容接口描述，默认返回0就可以;</span></p>
<p><span style="font-size: 15px;">&nbsp;&nbsp;　　 2.writeToParcel 方法。该方法将类的数据写入外部提供的Parcel中.即打包需要传递的数据到Parcel容器保存，以便从parcel容器获取数据，该方法声明如下：</span></p>
<p><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;　　　　writeToParcel (Parcel dest, int flags) 具体参数含义见javadoc</span></p>
<p><span style="font-size: 15px;">&nbsp;&nbsp; 　　3.静态的Parcelable.Creator接口，本接口有两个方法：</span></p>
<p><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;　　　　createFromParcel(Parcel in)&nbsp; 从Parcel容器中读取传递数据值，封装成Parcelable对象返回逻辑层。</span></p>
<p><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;　　　　newArray(int size) 创建一个类型为T，长度为size的数组，仅一句话（return new T[size])即可。方法是供外部类反序列化本类数组使用。</span></p>
<p>&nbsp;<br><a id="more"></a><br><strong>Parcelable的使用</strong></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AppContent <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Serializable, Parcelable {<br></span><span style="color: #008080;"> 2</span>     <span style="color: #008000;">//</span><span style="color: #008000;">应用名字</span><br><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;<br></span><span style="color: #008080;"> 4</span>     <span style="color: #008000;">//</span><span style="color: #008000;">应用下载链接</span><br><span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> String url;<br></span><span style="color: #008080;"> 6</span><br><span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span> downloadPercent = 0<span style="color: #000000;">;<br></span><span style="color: #008080;"> 8</span><br><span style="color: #008080;"> 9</span>     <span style="color: #0000ff;">private</span> Status status =<span style="color: #000000;"> Status.PENDING;<br></span><span style="color: #008080;">10</span><br><span style="color: #008080;">11</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> AppContent(String name, String url) {<br></span><span style="color: #008080;">12</span>         <span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;<br></span><span style="color: #008080;">13</span>         <span style="color: #0000ff;">this</span>.url =<span style="color: #000000;"> url;<br></span><span style="color: #008080;">14</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">15</span><br><span style="color: #008080;">16</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getName() {<br></span><span style="color: #008080;">17</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> name;<br></span><span style="color: #008080;">18</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">19</span><br><span style="color: #008080;">20</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setName(String name) {<br></span><span style="color: #008080;">21</span>         <span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;<br></span><span style="color: #008080;">22</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">23</span><br><span style="color: #008080;">24</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String getUrl() {<br></span><span style="color: #008080;">25</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> url;<br></span><span style="color: #008080;">26</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">27</span><br><span style="color: #008080;">28</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setUrl(String url) {<br></span><span style="color: #008080;">29</span>         <span style="color: #0000ff;">this</span>.url =<span style="color: #000000;"> url;<br></span><span style="color: #008080;">30</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">31</span><br><span style="color: #008080;">32</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> getDownloadPercent() {<br></span><span style="color: #008080;">33</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> downloadPercent;<br></span><span style="color: #008080;">34</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">35</span><br><span style="color: #008080;">36</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> setDownloadPercent(<span style="color: #0000ff;">int</span><span style="color: #000000;"> downloadPercent) {<br></span><span style="color: #008080;">37</span>         <span style="color: #0000ff;">this</span>.downloadPercent =<span style="color: #000000;"> downloadPercent;<br></span><span style="color: #008080;">38</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">39</span><br><span style="color: #008080;">40</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> Status getStatus() {<br></span><span style="color: #008080;">41</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> status;<br></span><span style="color: #008080;">42</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">43</span><br><span style="color: #008080;">44</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> setStatus(Status status) {<br></span><span style="color: #008080;">45</span>         <span style="color: #0000ff;">this</span>.status =<span style="color: #000000;"> status;<br></span><span style="color: #008080;">46</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">47</span><br><span style="color: #008080;">48</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">49</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {<br></span><span style="color: #008080;">50</span>         <span style="color: #0000ff;">return</span><span style="color: #000000;"> name;<br></span><span style="color: #008080;">51</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">52</span><br><span style="color: #008080;">53</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">54</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> describeContents() {<br></span><span style="color: #008080;">55</span>         <span style="color: #0000ff;">return</span> 0<span style="color: #000000;">;<br></span><span style="color: #008080;">56</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">57</span><br><span style="color: #008080;">58</span>     <span style="color: #008000;">//</span><span style="color: #008000;">实现Parcel接口必须覆盖实现的方法</span><br><span style="color: #008080;">59</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">60</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> writeToParcel(Parcel dest, <span style="color: #0000ff;">int</span><span style="color: #000000;"> flags) {<br></span><span style="color: #008080;">61</span>         <span style="color: #008000;">/<em></em></span><span style="color: #008000;">将AppContent的成员写入Parcel，<br></span><span style="color: #008080;">62</span> <span style="color: #008000;">          注：Parcel中的数据是按顺序写入和读取的，即先被写入的就会先被读取出来<br></span><span style="color: #008080;">63</span>          <span style="color: #008000;">*/</span><br><span style="color: #008080;">64</span> <span style="color: #000000;">        dest.writeString(name);<br></span><span style="color: #008080;">65</span> <span style="color: #000000;">        dest.writeString(url);<br></span><span style="color: #008080;">66</span> <span style="color: #000000;">        dest.writeInt(downloadPercent);<br></span><span style="color: #008080;">67</span> <span style="color: #000000;">        dest.writeValue(status);<br></span><span style="color: #008080;">68</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">69</span><br><span style="color: #008080;">70</span>     <span style="color: #008000;">//</span><span style="color: #008000;">该静态域是必须要有的，而且名字必须是CREATOR，否则会出错</span><br><span style="color: #008080;">71</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> Parcelable.Creator<appcontent> CREATOR =<br><span style="color: #008080;">72</span>             <span style="color: #0000ff;">new</span> Parcelable.Creator<appcontent><span style="color: #000000;">() {<br></span><span style="color: #008080;">73</span><br><span style="color: #008080;">74</span> <span style="color: #000000;">                @Override<br></span><span style="color: #008080;">75</span>                 <span style="color: #0000ff;">public</span><span style="color: #000000;"> AppContent createFromParcel(Parcel source) {<br></span><span style="color: #008080;">76</span>                     <span style="color: #008000;">//</span><span style="color: #008000;">从Parcel读取通过writeToParcel方法写入的AppContent的相关成员信息</span><br><span style="color: #008080;">77</span>                     String name =<span style="color: #000000;"> source.readString();<br></span><span style="color: #008080;">78</span>                     String url =<span style="color: #000000;"> source.readString();<br></span><span style="color: #008080;">79</span>                     <span style="color: #0000ff;">int</span> downloadPercent =<span style="color: #000000;"> source.readInt();<br></span><span style="color: #008080;">80</span>                     Status status = (Status)source.readValue(<span style="color: #0000ff;">new</span><span style="color: #000000;"> ClassLoader(){});<br></span><span style="color: #008080;">81</span>                     AppContent appContent = <span style="color: #0000ff;">new</span><span style="color: #000000;"> AppContent(name, url);<br></span><span style="color: #008080;">82</span> <span style="color: #000000;">                    appContent.setDownloadPercent(downloadPercent);<br></span><span style="color: #008080;">83</span> <span style="color: #000000;">                    appContent.setStatus(status);<br></span><span style="color: #008080;">84</span>                     <span style="color: #008000;">//</span><span style="color: #008000;">更加读取到的信息，创建返回Person对象</span><br><span style="color: #008080;">85</span>                     <span style="color: #0000ff;">return</span><span style="color: #000000;"> appContent;<br></span><span style="color: #008080;">86</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">87</span><br><span style="color: #008080;">88</span> <span style="color: #000000;">                @Override<br></span><span style="color: #008080;">89</span>                 <span style="color: #0000ff;">public</span> AppContent[] newArray(<span style="color: #0000ff;">int</span><span style="color: #000000;"> size)<br></span><span style="color: #008080;">90</span> <span style="color: #000000;">                {<br></span><span style="color: #008080;">91</span>                     <span style="color: #008000;">//</span><span style="color: #008000;"> TODO Auto-generated method stub<br></span><span style="color: #008080;">92</span>                     <span style="color: #008000;">//</span><span style="color: #008000;">返回AppContent对象数组</span><br><span style="color: #008080;">93</span>                     <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> AppContent[size];<br></span><span style="color: #008080;">94</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">95</span> <span style="color: #000000;">            };<br></span><span style="color: #008080;">96</span><br><span style="color: #008080;">97</span> }</appcontent></appcontent></pre><br></div>

<p>　　通过Intent进行传递：</p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;">1</span>    Intent intent = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Intent(Constants.DOWNLOAD_MSG);<br></span><span style="color: #008080;">2</span>    Bundle bundle = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Bundle();<br></span><span style="color: #008080;">3</span>    bundle.putParcelable(“appContent”<span style="color: #000000;">, appContent);<br></span><span style="color: #008080;">4</span>    intent.putExtras(bundle);</pre><br></div>

<p>&nbsp;</p>
<p>　　参考：<a href="http://www.tuicool.com/articles/MJzAZn" title="http://www.tuicool.com/articles/MJzAZn" target="_blank" rel="external">http://www.tuicool.com/articles/MJzAZn</a>，感谢作者。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><span style="font-size: 15px;">　　在做开发的过程中，序列化是非常常见的。比如要将对象保存本地磁盘或者在网络上传输等。实现序列化有两种方式，一种是实现Serializable接口，第二种是实现Parcelable。</span></p>
<p><span style="font-size: 15px;"><strong>Serializable与Parcelable的区别</strong></span></p>
<p><span style="font-size: 15px;">　　1、Serializable是JDK提供的接口，而Parcelable是Android SDK提供的。</span></p>
<p><span style="font-size: 15px;">　　2、Serializable序列化是基于磁盘的，而Parcelable是基于内存的。在内存中读写肯定效率要高于磁盘，所以Android中跨进程传递对象都是使用Parcelable。</span></p>
<p><strong>Parcelable接口定义</strong></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span><span style="color: #000000;"> Parcelable {<br></span><span style="color: #008080;"> 2</span>     <span style="color: #008000;">//</span><span style="color: #008000;">内容描述接口，基本不用管</span><br><span style="color: #008080;"> 3</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> describeContents();<br></span><span style="color: #008080;"> 4</span>     <span style="color: #008000;">//</span><span style="color: #008000;">写入接口函数，打包</span><br><span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> writeToParcel(Parcel dest, <span style="color: #0000ff;">int</span><span style="color: #000000;"> flags);<br></span><span style="color: #008080;"> 6</span>      <span style="color: #008000;">//</span><span style="color: #008000;">读取接口，目的是要从Parcel中构造一个实现了Parcelable的类的实例处理。因为实现类在这里还是不可知的，所以需要用到模板的方式，继承类名通过模板参数传入。<br></span><span style="color: #008080;"> 7</span>     <span style="color: #008000;">//</span><span style="color: #008000;">为了能够实现模板参数的传入，这里定义Creator嵌入接口,内含两个接口函数分别返回单个和多个继承类实例。</span><br><span style="color: #008080;"> 8</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span> Creator<T><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 9</span>            <span style="color: #0000ff;">public</span><span style="color: #000000;"> T createFromParcel(Parcel source);<br></span><span style="color: #008080;">10</span>            <span style="color: #0000ff;">public</span> T[] newArray(<span style="color: #0000ff;">int</span><span style="color: #000000;"> size);<br></span><span style="color: #008080;">11</span>        }</pre><br></div>

<p><span style="font-size: 15px;">　　从parcelable接口定义中，我们可以看到，实现parcelable接口，需要我们实现下面几个方法：</span></p>
<p><span style="font-size: 15px;">&nbsp;&nbsp; 　　1.describeContents方法。内容接口描述，默认返回0就可以;</span></p>
<p><span style="font-size: 15px;">&nbsp;&nbsp;　　 2.writeToParcel 方法。该方法将类的数据写入外部提供的Parcel中.即打包需要传递的数据到Parcel容器保存，以便从parcel容器获取数据，该方法声明如下：</span></p>
<p><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;　　　　writeToParcel (Parcel dest, int flags) 具体参数含义见javadoc</span></p>
<p><span style="font-size: 15px;">&nbsp;&nbsp; 　　3.静态的Parcelable.Creator接口，本接口有两个方法：</span></p>
<p><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;　　　　createFromParcel(Parcel in)&nbsp; 从Parcel容器中读取传递数据值，封装成Parcelable对象返回逻辑层。</span></p>
<p><span style="font-size: 15px;">&nbsp;&nbsp;&nbsp;&nbsp;　　　　newArray(int size) 创建一个类型为T，长度为size的数组，仅一句话（return new T[size])即可。方法是供外部类反序列化本类数组使用。</span></p>
<p>&nbsp;<br>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AsyncTask实现多线程断点续传]]></title>
    <link href="http://www.liuling123.com/2015/10/asynctask-multithread-download.html"/>
    <id>http://www.liuling123.com/2015/10/asynctask-multithread-download.html</id>
    <published>2015-10-13T04:11:00.000Z</published>
    <updated>2016-01-03T07:04:53.000Z</updated>
    <content type="html"><![CDATA[<p>　　<span style="font-size: 15px;">前面一篇博客<a href="http://www.cnblogs.com/liuling/p/2015-10-10-01.html" title="AsyncTask实现断点续传" target="_blank" rel="external">《AsyncTask实现断点续传》</a>讲解了如何实现单线程下的断点续传，也就是一个文件只有一个线程进行下载。</span></p>
<p><span style="font-size: 15px;">　 &nbsp; 对于大文件而言，使用多线程下载就会比单线程下载要快一些。多线程下载相比单线程下载要稍微复杂一点，本博文将详细讲解如何使用AsyncTask来实现多线程的断点续传下载。</span></p>
<p><span style="font-size: 15px;"><strong>一、实现原理</strong></span></p>
<p><span style="font-size: 15px;">　　多线程下载首先要通过每个文件总的下载线程数（我这里设定5个）来确定每个线程所负责下载的起止位置。</span><br><a id="more"></a></p>
<div class="cnblogs_code"><br><pre>        <span style="color: #0000ff;">long</span> blockLength = mFileLength /<span style="color: #000000;"> DEFAULT_POOL_SIZE;<br>        </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; DEFAULT_POOL_SIZE; i++<span style="color: #000000;">) {<br>            </span><span style="color: #0000ff;">long</span> beginPosition = i <em> blockLength;<span style="color: #008000;">//</span><span style="color: #008000;">每条线程下载的开始位置</span><br>            <span style="color: #0000ff;">long</span> endPosition = (i + 1) </em> blockLength;<span style="color: #008000;">//</span><span style="color: #008000;">每条线程下载的结束位置</span><br>            <span style="color: #0000ff;">if</span> (i == (DEFAULT_POOL_SIZE - 1<span style="color: #000000;">)) {<br>                endPosition </span>= mFileLength;<span style="color: #008000;">//</span><span style="color: #008000;">如果整个文件的大小不为线程个数的整数倍，则最后一个线程的结束位置即为文件的总长度</span><br><span style="color: #000000;">            }<br>           ……<br>        }</span></pre><br></div>

<p>　　<span style="font-size: 15px;">这里需要注意的是，文件大小往往不是线程个数的整数倍，所以最后一个线程的结束位置需要设置为文件长度。</span></p>
<p><span style="font-size: 15px;">　　确定好每个线程的下载起止位置之后，需要设置http请求头来下载文件的指定位置：</span></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;">1</span>       <span style="color: #008000;">//</span><span style="color: #008000;">设置下载的数据位置beginPosition字节到endPosition字节</span><br><span style="color: #008080;">2</span>       Header header_size = <span style="color: #0000ff;">new</span> BasicHeader(“Range”, “bytes=” + beginPosition + “-“ +<span style="color: #000000;"> endPosition);<br></span><span style="color: #008080;">3</span>       request.addHeader(header_size);</pre><br></div>

<p>　　以上是多线程下载的原理，但是还要实现断点续传需要在每次暂停之后记录每个线程已下载的大小，下次继续下载时从上次下载后的位置开始下载。一般项目中都会存数据库中，我这里为了简单起见直接存在了SharedPreferences中，已下载url和线程编号作为key值。</p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">       @Override<br></span><span style="color: #008080;"> 2</span>         <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onPostExecute(Long aLong) {<br></span><span style="color: #008080;"> 3</span>             Log.i(TAG, “download success “<span style="color: #000000;">);<br></span><span style="color: #008080;"> 4</span>             <span style="color: #008000;">//</span><span style="color: #008000;">下载完成移除记录</span><br><span style="color: #008080;"> 5</span> <span style="color: #000000;">            mSharedPreferences.edit().remove(currentThreadIndex).commit();<br></span><span style="color: #008080;"> 6</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;"> 7</span><br><span style="color: #008080;"> 8</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCancelled() {<br></span><span style="color: #008080;">10</span>             Log.i(TAG, “download cancelled “<span style="color: #000000;">);<br></span><span style="color: #008080;">11</span>             <span style="color: #008000;">//</span><span style="color: #008000;">记录已下载大小current</span><br><span style="color: #008080;">12</span> <span style="color: #000000;">            mSharedPreferences.edit().putLong(currentThreadIndex, current).commit();<br></span><span style="color: #008080;">13</span>         }</pre><br></div>

<p>　　下载的时候，首先获取已下载位置，如果已经下载过，就从上次下载后的位置开始下载：</p>
<div class="cnblogs_code"><br><pre>      <span style="color: #008000;">//</span><span style="color: #008000;">获取之前下载保存的信息，从之前结束的位置继续下载<br>      </span><span style="color: #008000;">//</span><span style="color: #008000;">这里加了判断file.exists()，判断是否被用户删除了，如果文件没有下载完，但是已经被用户删除了，则重新下载</span><br>      <span style="color: #0000ff;">long</span> downedPosition = mSharedPreferences.getLong(currentThreadIndex, 0<span style="color: #000000;">);<br>      </span><span style="color: #0000ff;">if</span>(file.exists() &amp;&amp; downedPosition != 0<span style="color: #000000;">) {<br>          beginPosition </span>= beginPosition +<span style="color: #000000;"> downedPosition;<br>          current </span>=<span style="color: #000000;"> downedPosition;<br>          </span><span style="color: #0000ff;">synchronized</span><span style="color: #000000;"> (mCurrentLength) {<br>               mCurrentLength </span>+=<span style="color: #000000;"> downedPosition;<br>          }<br>      }</span></pre><br></div>

<p>&nbsp;</p>
<p><strong>二、完整代码</strong></p>
<div class="cnblogs_code"><br><pre><span style="color: #008080;">  1</span> <span style="color: #0000ff;">package</span><span style="color: #000000;"> com.bbk.lling.multithreaddownload;<br></span><span style="color: #008080;">  2</span><br><span style="color: #008080;">  3</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.app.Activity;<br></span><span style="color: #008080;">  4</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.Context;<br></span><span style="color: #008080;">  5</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.content.SharedPreferences;<br></span><span style="color: #008080;">  6</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.AsyncTask;<br></span><span style="color: #008080;">  7</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Bundle;<br></span><span style="color: #008080;">  8</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Environment;<br></span><span style="color: #008080;">  9</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Handler;<br></span><span style="color: #008080;"> 10</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.os.Message;<br></span><span style="color: #008080;"> 11</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.util.Log;<br></span><span style="color: #008080;"> 12</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.view.View;<br></span><span style="color: #008080;"> 13</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.ProgressBar;<br></span><span style="color: #008080;"> 14</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.TextView;<br></span><span style="color: #008080;"> 15</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> android.widget.Toast;<br></span><span style="color: #008080;"> 16</span><br><span style="color: #008080;"> 17</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.Header;<br></span><span style="color: #008080;"> 18</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.HttpResponse;<br></span><span style="color: #008080;"> 19</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.client.HttpClient;<br></span><span style="color: #008080;"> 20</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.client.methods.HttpGet;<br></span><span style="color: #008080;"> 21</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.impl.client.DefaultHttpClient;<br></span><span style="color: #008080;"> 22</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> org.apache.http.message.BasicHeader;<br></span><span style="color: #008080;"> 23</span><br><span style="color: #008080;"> 24</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.File;<br></span><span style="color: #008080;"> 25</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.IOException;<br></span><span style="color: #008080;"> 26</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.InputStream;<br></span><span style="color: #008080;"> 27</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.OutputStream;<br></span><span style="color: #008080;"> 28</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.RandomAccessFile;<br></span><span style="color: #008080;"> 29</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.net.MalformedURLException;<br></span><span style="color: #008080;"> 30</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.ArrayList;<br></span><span style="color: #008080;"> 31</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.List;<br></span><span style="color: #008080;"> 32</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.concurrent.Executor;<br></span><span style="color: #008080;"> 33</span> <span style="color: #0000ff;">import</span><span style="color: #000000;"> java.util.concurrent.Executors;<br></span><span style="color: #008080;"> 34</span><br><span style="color: #008080;"> 35</span><br><span style="color: #008080;"> 36</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MainActivity <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Activity {<br></span><span style="color: #008080;"> 37</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String TAG = “MainActivity”<span style="color: #000000;">;<br></span><span style="color: #008080;"> 38</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> DEFAULT_POOL_SIZE = 5<span style="color: #000000;">;<br></span><span style="color: #008080;"> 39</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> <span style="color: #0000ff;">int</span> GET_LENGTH_SUCCESS = 1<span style="color: #000000;">;<br></span><span style="color: #008080;"> 40</span>     <span style="color: #008000;">//</span><span style="color: #008000;">下载路径</span><br><span style="color: #008080;"> 41</span>     <span style="color: #0000ff;">private</span> String downloadPath = Environment.getExternalStorageDirectory() +<br><span style="color: #008080;"> 42</span>             File.separator + “download”<span style="color: #000000;">;<br></span><span style="color: #008080;"> 43</span><br><span style="color: #008080;"> 44</span> <span style="color: #008000;">//</span><span style="color: #008000;">    private String mUrl = “</span><span style="color: #008000; text-decoration: underline;"><a href="http://ftp.neu.edu.cn/mirrors/eclipse/technology/epp/downloads/release/juno/SR2/eclipse-java-juno-SR2-linux-gtk-x86_64.tar.gz" target="_blank" rel="external">http://ftp.neu.edu.cn/mirrors/eclipse/technology/epp/downloads/release/juno/SR2/eclipse-java-juno-SR2-linux-gtk-x86_64.tar.gz</a></span><span style="color: #008000;">“;</span><br><span style="color: #008080;"> 45</span>     <span style="color: #0000ff;">private</span> String mUrl = “<a href="http://p.gdown.baidu.com/c4cb746699b92c9b6565cc65aa2e086552651f73c5d0e634a51f028e32af6abf3d68079eeb75401c76c9bb301e5fb71c144a704cb1a2f527a2e8ca3d6fe561dc5eaf6538e5b3ab0699308d13fe0b711a817c88b0f85a01a248df82824ace3cd7f2832c7c19173236" target="_blank" rel="external">http://p.gdown.baidu.com/c4cb746699b92c9b6565cc65aa2e086552651f73c5d0e634a51f028e32af6abf3d68079eeb75401c76c9bb301e5fb71c144a704cb1a2f527a2e8ca3d6fe561dc5eaf6538e5b3ab0699308d13fe0b711a817c88b0f85a01a248df82824ace3cd7f2832c7c19173236</a>“<span style="color: #000000;">;<br></span><span style="color: #008080;"> 46</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> ProgressBar mProgressBar;<br></span><span style="color: #008080;"> 47</span>     <span style="color: #0000ff;">private</span><span style="color: #000000;"> TextView mPercentTV;<br></span><span style="color: #008080;"> 48</span>     SharedPreferences mSharedPreferences = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 49</span>     <span style="color: #0000ff;">long</span> mFileLength = 0<span style="color: #000000;">;<br></span><span style="color: #008080;"> 50</span>     Long mCurrentLength = 0L<span style="color: #000000;">;<br></span><span style="color: #008080;"> 51</span><br><span style="color: #008080;"> 52</span>     <span style="color: #0000ff;">private</span> InnerHandler mHandler = <span style="color: #0000ff;">new</span><span style="color: #000000;"> InnerHandler();<br></span><span style="color: #008080;"> 53</span><br><span style="color: #008080;"> 54</span>     <span style="color: #008000;">//</span><span style="color: #008000;">创建线程池</span><br><span style="color: #008080;"> 55</span>     <span style="color: #0000ff;">private</span> Executor mExecutor =<span style="color: #000000;"> Executors.newCachedThreadPool();<br></span><span style="color: #008080;"> 56</span><br><span style="color: #008080;"> 57</span>     <span style="color: #0000ff;">private</span> List<downloadasynctask> mTaskList = <span style="color: #0000ff;">new</span> ArrayList<downloadasynctask><span style="color: #000000;">();<br></span><span style="color: #008080;"> 58</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;"> 59</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {<br></span><span style="color: #008080;"> 60</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCreate(savedInstanceState);<br></span><span style="color: #008080;"> 61</span> <span style="color: #000000;">        setContentView(R.layout.activity_main);<br></span><span style="color: #008080;"> 62</span>         mProgressBar =<span style="color: #000000;"> (ProgressBar) findViewById(R.id.progressbar);<br></span><span style="color: #008080;"> 63</span>         mPercentTV =<span style="color: #000000;"> (TextView) findViewById(R.id.percent_tv);<br></span><span style="color: #008080;"> 64</span>         mSharedPreferences = getSharedPreferences(“download”<span style="color: #000000;">, Context.MODE_PRIVATE);<br></span><span style="color: #008080;"> 65</span>         <span style="color: #008000;">//</span><span style="color: #008000;">开始下载</span><br><span style="color: #008080;"> 66</span>         findViewById(R.id.begin).setOnClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> View.OnClickListener() {<br></span><span style="color: #008080;"> 67</span> <span style="color: #000000;">            @Override<br></span><span style="color: #008080;"> 68</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {<br></span><span style="color: #008080;"> 69</span>                 <span style="color: #0000ff;">new</span><span style="color: #000000;"> Thread() {<br></span><span style="color: #008080;"> 70</span> <span style="color: #000000;">                    @Override<br></span><span style="color: #008080;"> 71</span>                     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {<br></span><span style="color: #008080;"> 72</span>                         <span style="color: #008000;">//</span><span style="color: #008000;">创建存储文件夹</span><br><span style="color: #008080;"> 73</span>                         File dir = <span style="color: #0000ff;">new</span><span style="color: #000000;"> File(downloadPath);<br></span><span style="color: #008080;"> 74</span>                         <span style="color: #0000ff;">if</span> (!<span style="color: #000000;">dir.exists()) {<br></span><span style="color: #008080;"> 75</span> <span style="color: #000000;">                            dir.mkdir();<br></span><span style="color: #008080;"> 76</span> <span style="color: #000000;">                        }<br></span><span style="color: #008080;"> 77</span>                         <span style="color: #008000;">//</span><span style="color: #008000;">获取文件大小</span><br><span style="color: #008080;"> 78</span>                         HttpClient client = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DefaultHttpClient();<br></span><span style="color: #008080;"> 79</span>                         HttpGet request = <span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpGet(mUrl);<br></span><span style="color: #008080;"> 80</span>                         HttpResponse response = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;"> 81</span><br><span style="color: #008080;"> 82</span>                         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 83</span>                             response =<span style="color: #000000;"> client.execute(request);<br></span><span style="color: #008080;"> 84</span>                             mFileLength =<span style="color: #000000;"> response.getEntity().getContentLength();<br></span><span style="color: #008080;"> 85</span>                         } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (Exception e) {<br></span><span style="color: #008080;"> 86</span> <span style="color: #000000;">                            Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;"> 87</span>                         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {<br></span><span style="color: #008080;"> 88</span>                             <span style="color: #0000ff;">if</span> (request != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;"> 89</span> <span style="color: #000000;">                                request.abort();<br></span><span style="color: #008080;"> 90</span> <span style="color: #000000;">                            }<br></span><span style="color: #008080;"> 91</span> <span style="color: #000000;">                        }<br></span><span style="color: #008080;"> 92</span> <span style="color: #000000;">                        Message.obtain(mHandler, GET_LENGTH_SUCCESS).sendToTarget();<br></span><span style="color: #008080;"> 93</span> <span style="color: #000000;">                    }<br></span><span style="color: #008080;"> 94</span> <span style="color: #000000;">                }.start();<br></span><span style="color: #008080;"> 95</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;"> 96</span> <span style="color: #000000;">        });<br></span><span style="color: #008080;"> 97</span><br><span style="color: #008080;"> 98</span>         <span style="color: #008000;">//</span><span style="color: #008000;">暂停下载</span><br><span style="color: #008080;"> 99</span>         findViewById(R.id.end).setOnClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> View.OnClickListener() {<br></span><span style="color: #008080;">100</span> <span style="color: #000000;">            @Override<br></span><span style="color: #008080;">101</span>             <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {<br></span><span style="color: #008080;">102</span>                 <span style="color: #0000ff;">for</span><span style="color: #000000;"> (DownloadAsyncTask task : mTaskList) {<br></span><span style="color: #008080;">103</span>                     <span style="color: #0000ff;">if</span> (task != <span style="color: #0000ff;">null</span> &amp;&amp; (task.getStatus() == AsyncTask.Status.RUNNING || !<span style="color: #000000;">task.isCancelled())) {<br></span><span style="color: #008080;">104</span>                         task.cancel(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br></span><span style="color: #008080;">105</span> <span style="color: #000000;">                    }<br></span><span style="color: #008080;">106</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">107</span> <span style="color: #000000;">                mTaskList.clear();<br></span><span style="color: #008080;">108</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">109</span> <span style="color: #000000;">        });<br></span><span style="color: #008080;">110</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">111</span><br><span style="color: #008080;">112</span>     <span style="color: #008000;">/<strong></strong></span><br><span style="color: #008080;">113</span> <span style="color: #008000;">     <em> 开始下载<br></em></span><span style="color: #008080;">114</span> <span style="color: #008000;">      根据待下载文件大小计算每个线程下载位置，并创建AsyncTask<br></span><span style="color: #008080;">115</span>      <span style="color: #008000;"><em>/</em></span><br><span style="color: #008080;">116</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> beginDownload() {<br></span><span style="color: #008080;">117</span>         mCurrentLength = 0L<span style="color: #000000;">;<br></span><span style="color: #008080;">118</span> <span style="color: #000000;">        mPercentTV.setVisibility(View.VISIBLE);<br></span><span style="color: #008080;">119</span>         mProgressBar.setProgress(0<span style="color: #000000;">);<br></span><span style="color: #008080;">120</span>         <span style="color: #0000ff;">long</span> blockLength = mFileLength /<span style="color: #000000;"> DEFAULT_POOL_SIZE;<br></span><span style="color: #008080;">121</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; DEFAULT_POOL_SIZE; i++<span style="color: #000000;">) {<br></span><span style="color: #008080;">122</span>             <span style="color: #0000ff;">long</span> beginPosition = i  blockLength;<span style="color: #008000;">//</span><span style="color: #008000;">每条线程下载的开始位置</span><br><span style="color: #008080;">123</span>             <span style="color: #0000ff;">long</span> endPosition = (i + 1) * blockLength;<span style="color: #008000;">//</span><span style="color: #008000;">每条线程下载的结束位置</span><br><span style="color: #008080;">124</span>             <span style="color: #0000ff;">if</span> (i == (DEFAULT_POOL_SIZE - 1<span style="color: #000000;">)) {<br></span><span style="color: #008080;">125</span>                 endPosition = mFileLength;<span style="color: #008000;">//</span><span style="color: #008000;">如果整个文件的大小不为线程个数的整数倍，则最后一个线程的结束位置即为文件的总长度</span><br><span style="color: #008080;">126</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">127</span>             DownloadAsyncTask task = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DownloadAsyncTask(beginPosition, endPosition);<br></span><span style="color: #008080;">128</span> <span style="color: #000000;">            mTaskList.add(task);<br></span><span style="color: #008080;">129</span> <span style="color: #000000;">            task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, mUrl, String.valueOf(i));<br></span><span style="color: #008080;">130</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">131</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">132</span><br><span style="color: #008080;">133</span>     <span style="color: #008000;">/</span><br><span style="color: #008080;">134</span> <span style="color: #008000;">     <em> 更新进度条<br></em></span><span style="color: #008080;">135</span>      <span style="color: #008000;">/</span><br><span style="color: #008080;">136</span>     <span style="color: #0000ff;">synchronized</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> updateProgress() {<br></span><span style="color: #008080;">137</span>         <span style="color: #0000ff;">int</span> percent = (<span style="color: #0000ff;">int</span>) Math.ceil((<span style="color: #0000ff;">float</span>)mCurrentLength / (<span style="color: #0000ff;">float</span>)mFileLength <em> 100<span style="color: #000000;">);<br></span><span style="color: #008080;">138</span> <span style="color: #008000;">//</span><span style="color: #008000;">        Log.i(TAG, “downloading  “ + mCurrentLength + “,” + mFileLength + “,” + percent);</span><br><span style="color: #008080;">139</span>         <span style="color: #0000ff;">if</span>(percent &gt;<span style="color: #000000;"> mProgressBar.getProgress()) {<br></span><span style="color: #008080;">140</span> <span style="color: #000000;">            mProgressBar.setProgress(percent);<br></span><span style="color: #008080;">141</span>             mPercentTV.setText(“下载进度：” + percent + “%”<span style="color: #000000;">);<br></span><span style="color: #008080;">142</span>             <span style="color: #0000ff;">if</span> (mProgressBar.getProgress() ==<span style="color: #000000;"> mProgressBar.getMax()) {<br></span><span style="color: #008080;">143</span>                 Toast.makeText(MainActivity.<span style="color: #0000ff;">this</span>, “下载结束”<span style="color: #000000;">, Toast.LENGTH_SHORT).show();<br></span><span style="color: #008080;">144</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">145</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">146</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">147</span><br><span style="color: #008080;">148</span> <span style="color: #000000;">    @Override<br></span><span style="color: #008080;">149</span>     <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDestroy() {<br></span><span style="color: #008080;">150</span>         <span style="color: #0000ff;">for</span><span style="color: #000000;">(DownloadAsyncTask task: mTaskList) {<br></span><span style="color: #008080;">151</span>             <span style="color: #0000ff;">if</span>(task != <span style="color: #0000ff;">null</span> &amp;&amp; task.getStatus() ==<span style="color: #000000;"> AsyncTask.Status.RUNNING) {<br></span><span style="color: #008080;">152</span>                 task.cancel(<span style="color: #0000ff;">true</span><span style="color: #000000;">);<br></span><span style="color: #008080;">153</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">154</span> <span style="color: #000000;">            mTaskList.clear();<br></span><span style="color: #008080;">155</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">156</span>         <span style="color: #0000ff;">super</span><span style="color: #000000;">.onDestroy();<br></span><span style="color: #008080;">157</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">158</span><br><span style="color: #008080;">159</span>     <span style="color: #008000;">/**</span><br><span style="color: #008080;">160</span> <span style="color: #008000;">     </span></em> 下载的AsyncTask<br><span style="color: #008080;">161</span>      <span style="color: #008000;"><em>/</em></span><br><span style="color: #008080;">162</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">class</span> DownloadAsyncTask <span style="color: #0000ff;">extends</span> AsyncTask<string, integer="" ,="" long=""><span style="color: #000000;"> {<br></span><span style="color: #008080;">163</span>         <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">final</span> String TAG = “DownloadAsyncTask”<span style="color: #000000;">;<br></span><span style="color: #008080;">164</span>         <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">long</span> beginPosition = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">165</span>         <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">long</span> endPosition = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">166</span><br><span style="color: #008080;">167</span>         <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">long</span> current = 0<span style="color: #000000;">;<br></span><span style="color: #008080;">168</span><br><span style="color: #008080;">169</span>         <span style="color: #0000ff;">private</span><span style="color: #000000;"> String currentThreadIndex;<br></span><span style="color: #008080;">170</span><br><span style="color: #008080;">171</span><br><span style="color: #008080;">172</span>         <span style="color: #0000ff;">public</span> DownloadAsyncTask(<span style="color: #0000ff;">long</span> beginPosition, <span style="color: #0000ff;">long</span><span style="color: #000000;"> endPosition) {<br></span><span style="color: #008080;">173</span>             <span style="color: #0000ff;">this</span>.beginPosition =<span style="color: #000000;"> beginPosition;<br></span><span style="color: #008080;">174</span>             <span style="color: #0000ff;">this</span>.endPosition =<span style="color: #000000;"> endPosition;<br></span><span style="color: #008080;">175</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">176</span><br><span style="color: #008080;">177</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;">178</span>         <span style="color: #0000ff;">protected</span><span style="color: #000000;"> Long doInBackground(String… params) {<br></span><span style="color: #008080;">179</span>             Log.i(TAG, “downloading”<span style="color: #000000;">);<br></span><span style="color: #008080;">180</span>             String url = params[0<span style="color: #000000;">];<br></span><span style="color: #008080;">181</span>             currentThreadIndex = url + params[1<span style="color: #000000;">];<br></span><span style="color: #008080;">182</span>             <span style="color: #0000ff;">if</span>(url == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">183</span>                 <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">184</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">185</span>             HttpClient client = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DefaultHttpClient();<br></span><span style="color: #008080;">186</span>             HttpGet request = <span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpGet(url);<br></span><span style="color: #008080;">187</span>             HttpResponse response = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">188</span>             InputStream is = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">189</span>             RandomAccessFile fos = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">190</span>             OutputStream output = <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">191</span><br><span style="color: #008080;">192</span>             <span style="color: #0000ff;">try</span><span style="color: #000000;"> {<br></span><span style="color: #008080;">193</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">本地文件</span><br><span style="color: #008080;">194</span>                 File file = <span style="color: #0000ff;">new</span> File(downloadPath + File.separator + url.substring(url.lastIndexOf(“/“) + 1<span style="color: #000000;">));<br></span><span style="color: #008080;">195</span><br><span style="color: #008080;">196</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">获取之前下载保存的信息，从之前结束的位置继续下载<br></span><span style="color: #008080;">197</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">这里加了判断file.exists()，判断是否被用户删除了，如果文件没有下载完，但是已经被用户删除了，则重新下载</span><br><span style="color: #008080;">198</span>                 <span style="color: #0000ff;">long</span> downedPosition = mSharedPreferences.getLong(currentThreadIndex, 0<span style="color: #000000;">);<br></span><span style="color: #008080;">199</span>                 <span style="color: #0000ff;">if</span>(file.exists() &amp;&amp; downedPosition != 0<span style="color: #000000;">) {<br></span><span style="color: #008080;">200</span>                     beginPosition = beginPosition +<span style="color: #000000;"> downedPosition;<br></span><span style="color: #008080;">201</span>                     current =<span style="color: #000000;"> downedPosition;<br></span><span style="color: #008080;">202</span>                     <span style="color: #0000ff;">synchronized</span><span style="color: #000000;"> (mCurrentLength) {<br></span><span style="color: #008080;">203</span>                         mCurrentLength +=<span style="color: #000000;"> downedPosition;<br></span><span style="color: #008080;">204</span> <span style="color: #000000;">                    }<br></span><span style="color: #008080;">205</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">206</span><br><span style="color: #008080;">207</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">设置下载的数据位置beginPosition字节到endPosition字节</span><br><span style="color: #008080;">208</span>                 Header header_size = <span style="color: #0000ff;">new</span> BasicHeader(“Range”, “bytes=” + beginPosition + “-“ +<span style="color: #000000;"> endPosition);<br></span><span style="color: #008080;">209</span> <span style="color: #000000;">                request.addHeader(header_size);<br></span><span style="color: #008080;">210</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">执行请求获取下载输入流</span><br><span style="color: #008080;">211</span>                 response =<span style="color: #000000;"> client.execute(request);<br></span><span style="color: #008080;">212</span>                 is =<span style="color: #000000;"> response.getEntity().getContent();<br></span><span style="color: #008080;">213</span><br><span style="color: #008080;">214</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">创建文件输出流</span><br><span style="color: #008080;">215</span>                 fos = <span style="color: #0000ff;">new</span> RandomAccessFile(file, “rw”<span style="color: #000000;">);<br></span><span style="color: #008080;">216</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">从文件的size以后的位置开始写入，其实也不用，直接往后写就可以。有时候多线程下载需要用</span><br><span style="color: #008080;">217</span> <span style="color: #000000;">                fos.seek(beginPosition);<br></span><span style="color: #008080;">218</span><br><span style="color: #008080;">219</span>                 <span style="color: #0000ff;">byte</span> buffer [] = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">byte</span>[1024<span style="color: #000000;">];<br></span><span style="color: #008080;">220</span>                 <span style="color: #0000ff;">int</span> inputSize = -1<span style="color: #000000;">;<br></span><span style="color: #008080;">221</span>                 <span style="color: #0000ff;">while</span>((inputSize = is.read(buffer)) != -1<span style="color: #000000;">) {<br></span><span style="color: #008080;">222</span>                     fos.write(buffer, 0<span style="color: #000000;">, inputSize);<br></span><span style="color: #008080;">223</span>                     current +=<span style="color: #000000;"> inputSize;<br></span><span style="color: #008080;">224</span>                     <span style="color: #0000ff;">synchronized</span><span style="color: #000000;"> (mCurrentLength) {<br></span><span style="color: #008080;">225</span>                         mCurrentLength +=<span style="color: #000000;"> inputSize;<br></span><span style="color: #008080;">226</span> <span style="color: #000000;">                    }<br></span><span style="color: #008080;">227</span>                     <span style="color: #0000ff;">this</span><span style="color: #000000;">.publishProgress();<br></span><span style="color: #008080;">228</span>                     <span style="color: #0000ff;">if</span><span style="color: #000000;"> (isCancelled()) {<br></span><span style="color: #008080;">229</span>                         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">230</span> <span style="color: #000000;">                    }<br></span><span style="color: #008080;">231</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">232</span>             } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (MalformedURLException e) {<br></span><span style="color: #008080;">233</span> <span style="color: #000000;">                Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;">234</span>             } <span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException e) {<br></span><span style="color: #008080;">235</span> <span style="color: #000000;">                Log.e(TAG, e.getMessage());<br></span><span style="color: #008080;">236</span>             } <span style="color: #0000ff;">finally</span><span style="color: #000000;">{<br></span><span style="color: #008080;">237</span>                 <span style="color: #0000ff;">try</span><span style="color: #000000;">{<br></span><span style="color: #008080;">238</span>                     <span style="color: #008000;">/</span><span style="color: #008000;">if(is != null) {<br></span><span style="color: #008080;">239</span> <span style="color: #008000;">                        is.close();<br></span><span style="color: #008080;">240</span> <span style="color: #008000;">                    }</span><span style="color: #008000;">*/</span><br><span style="color: #008080;">241</span>                     <span style="color: #0000ff;">if</span> (request != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">242</span> <span style="color: #000000;">                        request.abort();<br></span><span style="color: #008080;">243</span> <span style="color: #000000;">                    }<br></span><span style="color: #008080;">244</span>                     <span style="color: #0000ff;">if</span>(output != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">245</span> <span style="color: #000000;">                        output.close();<br></span><span style="color: #008080;">246</span> <span style="color: #000000;">                    }<br></span><span style="color: #008080;">247</span>                     <span style="color: #0000ff;">if</span>(fos != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {<br></span><span style="color: #008080;">248</span> <span style="color: #000000;">                        fos.close();<br></span><span style="color: #008080;">249</span> <span style="color: #000000;">                    }<br></span><span style="color: #008080;">250</span>                 } <span style="color: #0000ff;">catch</span><span style="color: #000000;">(Exception e) {<br></span><span style="color: #008080;">251</span> <span style="color: #000000;">                    e.printStackTrace();<br></span><span style="color: #008080;">252</span> <span style="color: #000000;">                }<br></span><span style="color: #008080;">253</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">254</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;<br></span><span style="color: #008080;">255</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">256</span><br><span style="color: #008080;">257</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;">258</span>         <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onPreExecute() {<br></span><span style="color: #008080;">259</span>             Log.i(TAG, “download begin “<span style="color: #000000;">);<br></span><span style="color: #008080;">260</span>             <span style="color: #0000ff;">super</span><span style="color: #000000;">.onPreExecute();<br></span><span style="color: #008080;">261</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">262</span><br><span style="color: #008080;">263</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;">264</span>         <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onProgressUpdate(Integer… values) {<br></span><span style="color: #008080;">265</span>             <span style="color: #0000ff;">super</span><span style="color: #000000;">.onProgressUpdate(values);<br></span><span style="color: #008080;">266</span>             <span style="color: #008000;">//</span><span style="color: #008000;">更新界面进度条</span><br><span style="color: #008080;">267</span> <span style="color: #000000;">            updateProgress();<br></span><span style="color: #008080;">268</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">269</span><br><span style="color: #008080;">270</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;">271</span>         <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onPostExecute(Long aLong) {<br></span><span style="color: #008080;">272</span>             Log.i(TAG, “download success “<span style="color: #000000;">);<br></span><span style="color: #008080;">273</span>             <span style="color: #008000;">//</span><span style="color: #008000;">下载完成移除记录</span><br><span style="color: #008080;">274</span> <span style="color: #000000;">            mSharedPreferences.edit().remove(currentThreadIndex).commit();<br></span><span style="color: #008080;">275</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">276</span><br><span style="color: #008080;">277</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;">278</span>         <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCancelled() {<br></span><span style="color: #008080;">279</span>             Log.i(TAG, “download cancelled “<span style="color: #000000;">);<br></span><span style="color: #008080;">280</span>             <span style="color: #008000;">//</span><span style="color: #008000;">记录已下载大小current</span><br><span style="color: #008080;">281</span> <span style="color: #000000;">            mSharedPreferences.edit().putLong(currentThreadIndex, current).commit();<br></span><span style="color: #008080;">282</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">283</span><br><span style="color: #008080;">284</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;">285</span>         <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCancelled(Long aLong) {<br></span><span style="color: #008080;">286</span>             Log.i(TAG, “download cancelled(Long aLong)”<span style="color: #000000;">);<br></span><span style="color: #008080;">287</span>             <span style="color: #0000ff;">super</span><span style="color: #000000;">.onCancelled(aLong);<br></span><span style="color: #008080;">288</span> <span style="color: #000000;">            mSharedPreferences.edit().putLong(currentThreadIndex, current).commit();<br></span><span style="color: #008080;">289</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">290</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">291</span><br><span style="color: #008080;">292</span>     <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">class</span> InnerHandler <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Handler {<br></span><span style="color: #008080;">293</span> <span style="color: #000000;">        @Override<br></span><span style="color: #008080;">294</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> handleMessage(Message msg) {<br></span><span style="color: #008080;">295</span>             <span style="color: #0000ff;">switch</span><span style="color: #000000;"> (msg.what) {<br></span><span style="color: #008080;">296</span>                 <span style="color: #0000ff;">case</span><span style="color: #000000;"> GET_LENGTH_SUCCESS :<br></span><span style="color: #008080;">297</span> <span style="color: #000000;">                    beginDownload();<br></span><span style="color: #008080;">298</span>                     <span style="color: #0000ff;">break</span><span style="color: #000000;">;<br></span><span style="color: #008080;">299</span> <span style="color: #000000;">            }<br></span><span style="color: #008080;">300</span>             <span style="color: #0000ff;">super</span><span style="color: #000000;">.handleMessage(msg);<br></span><span style="color: #008080;">301</span> <span style="color: #000000;">        }<br></span><span style="color: #008080;">302</span> <span style="color: #000000;">    }<br></span><span style="color: #008080;">303</span><br><span style="color: #008080;">304</span> }</string,></downloadasynctask></downloadasynctask></pre><br></div>

<p>　　<span style="font-size: 15px;">布局文件和前面一篇博客<a href="http://www.cnblogs.com/liuling/p/2015-10-10-01.html" title="AsyncTask实现断点续传" target="_blank" rel="external">《AsyncTask实现断点续传》</a>布局文件是一样的，这里就不贴代码了。</span></p>
<p><span style="font-size: 15px;">　　以上代码亲测可用，几百M大文件也没问题。</span></p>
<p><strong><span style="font-size: 15px;">三、遇到的坑</span></strong></p>
<p><span style="font-size: 15px;">　　问题描述：在使用上面代码下载</span><span style="font-family: 'Courier New'; font-size: 12px; line-height: 1.5;"><a href="http://ftp.neu.edu.cn/mirrors/eclipse/technology/epp/downloads/release/juno/SR2/eclipse-java-juno-SR2-linux-gtk-x86_64.tar.gz" target="_blank" rel="external">http://ftp.neu.edu.cn/mirrors/eclipse/technology/epp/downloads/release/juno/SR2/eclipse-java-juno-SR2-linux-gtk-x86_64.tar.gz</a><span style="font-size: 15px;">文件的时候，不知道为什么暂停时候执行AsyncTask.cancel(true)来取消下载任务，不执行onCancel()函数，也就没有记录该线程下载的位置。并且再次点击下载的时候，5个Task都只执行了onPreEexcute()方法，压根就不执行doInBackground()方法。而下载其他文件没有这个问题。</span></span></p>
<p><span style="font-family: 'Courier New'; font-size: 12px; line-height: 1.5;"><span style="font-size: 15px;">　　这个问题折腾了我好久，它又没有报任何异常，调试又调试不出来。看AsyncTask的源码、上stackoverflow也没有找到原因。看到这个网站（<a href="https://groups.google.com/forum/#!topic/android-developers/B-oBiS7npfQ）时，我还真以为是AsyncTask的一个bug。" target="_blank" rel="external">https://groups.google.com/forum/#!topic/android-developers/B-oBiS7npfQ）时，我还真以为是AsyncTask的一个bug。</a></span></span></p>
<p><span style="font-size: 15px;">　　百番周折，问题居然出现在上面代码239行（这里已注释）。不知道为什么，执行这一句的时候，线程就阻塞在那里了，所以doInBackground()方法一直没有结束，onCancel()方法当然也不会执行了。同时，因为使用的是线程池Executor，线程数为5个，点击取消之后5个线程都阻塞了，所以再次点击下载的时候只执行了onPreEexcute()方法，没有空闲的线程去执行doInBackground()方法。真是巨坑无比有木有。。。</span></p>
<p><span style="font-size: 15px;">　　虽然问题解决了，但是为什么有的文件下载执行到</span>is.close()的时候线程会阻塞而有的不会？这还是个谜。如果哪位大神知道是什么原因，还望指点指点！</p>
<p>&nbsp;</p>
<p><span style="font-size: 15px;"><span style="color: #ff0000;"><strong>源码下载：</strong></span><a href="https://github.com/liuling07/MultiTaskAndThreadDownload" title="https://github.com/liuling07/MultiTaskAndThreadDownload" target="_blank" rel="external">https://github.com/liuling07/MultiTaskAndThreadDownload</a></span></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　<span style="font-size: 15px;">前面一篇博客<a href="http://www.cnblogs.com/liuling/p/2015-10-10-01.html" title="AsyncTask实现断点续传">《AsyncTask实现断点续传》</a>讲解了如何实现单线程下的断点续传，也就是一个文件只有一个线程进行下载。</span></p>
<p><span style="font-size: 15px;">　 &nbsp; 对于大文件而言，使用多线程下载就会比单线程下载要快一些。多线程下载相比单线程下载要稍微复杂一点，本博文将详细讲解如何使用AsyncTask来实现多线程的断点续传下载。</span></p>
<p><span style="font-size: 15px;"><strong>一、实现原理</strong></span></p>
<p><span style="font-size: 15px;">　　多线程下载首先要通过每个文件总的下载线程数（我这里设定5个）来确定每个线程所负责下载的起止位置。</span><br>]]>
    
    </summary>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="多线程" scheme="http://www.liuling123.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="断点续传" scheme="http://www.liuling123.com/tags/%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AsyncTask源码分析]]></title>
    <link href="http://www.liuling123.com/2015/10/asynctask-source.html"/>
    <id>http://www.liuling123.com/2015/10/asynctask-source.html</id>
    <published>2015-10-10T08:19:00.000Z</published>
    <updated>2016-01-03T08:01:39.000Z</updated>
    <content type="html"><![CDATA[<p>关于AsyncTask的用法可以参看前面一篇博客<a href="http://www.cnblogs.com/liuling/p/2015-10-10-01.html" title="AsyncTask实现断点续传" target="_blank" rel="external">《AsyncTask实现断点续传》</a>，本文只解析AsyncTask的源代码。</p>
<p>AsyncTask.execute方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final AsyncTask&#60;Params, Progress, Result&#62; execute(Params... params) &#123;&#10;&#9;return executeOnExecutor(sDefaultExecutor, params);&#10;&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>execute方法里面直接调用了executeOnexecute方法。</p>
<p>AsyncTask.executeOnexecute方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final AsyncTask&#60;Params, Progress, Result&#62; executeOnExecutor(Executor exec,&#10;            Params... params) &#123;&#10;    if (mStatus != Status.PENDING) &#123;&#10;        switch (mStatus) &#123;&#10;            case RUNNING:&#10;                throw new IllegalStateException(&#34;Cannot execute task:&#34;&#10;                        + &#34; the task is already running.&#34;);&#10;            case FINISHED:&#10;                throw new IllegalStateException(&#34;Cannot execute task:&#34;&#10;                        + &#34; the task has already been executed &#34;&#10;                        + &#34;(a task can be executed only once)&#34;);&#10;        &#125;&#10;    &#125;&#10;    mStatus = Status.RUNNING;&#10;    onPreExecute();&#10;    mWorker.mParams = params;&#10;    exec.execute(mFuture);&#10;    return this;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>3-13行是检测AsyncTask的状态，如果状态不为PENDING，则会抛异常，这也是为什么一个AsyncTask只能被执行一次的原因。14行将状态改为RUNNING，表示该任务正在运行。然后调用AsyncTask的onPreExecute()方法。</p>
<p>由下面代码可以看出，AsyncTask有三种状态：PENDING（未运行）、RUNNING（正在运行）、FINISHED（已运行完毕）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public enum Status &#123;&#10;    /**&#10;     * Indicates that the task has not been executed yet.&#10;     */&#10;    PENDING,&#10;    /**&#10;     * Indicates that the task is running.&#10;     */&#10;    RUNNING,&#10;    /**&#10;     * Indicates that &#123;@link AsyncTask#onPostExecute&#125; has finished.&#10;     */&#10;    FINISHED,&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>FutureTask代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class FutureTask&#60;V&#62; implements RunnableFuture&#60;V&#62; &#123;&#10;    ......&#10;    //&#26500;&#36896;&#26041;&#27861;&#20256;&#20837;&#19968;&#20010;Callable&#23545;&#35937;&#10;    public FutureTask(Callable&#60;V&#62; callable) &#123;&#10;        if (callable == null)&#10;            throw new NullPointerException();&#10;        this.callable = callable;&#10;        this.state = NEW;       // ensure visibility of callable&#10;    &#125;&#10;    public void run() &#123;&#10;        if (state != NEW ||&#10;            !UNSAFE.compareAndSwapObject(this, runnerOffset,&#10;                                         null, Thread.currentThread()))&#10;            return;&#10;        try &#123;&#10;            Callable&#60;V&#62; c = callable;&#10;            if (c != null &#38;&#38; state == NEW) &#123;&#10;                V result;&#10;                boolean ran;&#10;                try &#123;&#10;                    result = c.call();//&#36825;&#37324;&#35843;&#29992;&#20102;callable.call()&#26041;&#27861;&#10;                    ran = true;&#10;                &#125; catch (Throwable ex) &#123;&#10;                    result = null;&#10;                    ran = false;&#10;                    setException(ex);&#10;                &#125;&#10;                if (ran)&#10;                    set(result);&#10;            &#125;&#10;        &#125; finally &#123;&#10;            // runner must be non-null until state is settled to&#10;            // prevent concurrent calls to run()&#10;            runner = null;&#10;            // state must be re-read after nulling runner to prevent&#10;            // leaked interrupts&#10;            int s = state;&#10;            if (s &#62;= INTERRUPTING)&#10;                handlePossibleCancellationInterrupt(s);&#10;        &#125;&#10;    &#125;&#10;    ......&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>AsyncTask构造方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AsyncTask&#60;Params, Progress, Result&#62; &#123;&#10;    ......&#10;    /**&#10;     * Creates a new asynchronous task. This constructor must be invoked on the UI thread.&#10;     */&#10;    public AsyncTask() &#123;&#10;        mWorker = new WorkerRunnable&#60;Params, Result&#62;() &#123;&#10;            public Result call() throws Exception &#123;&#10;                mTaskInvoked.set(true);&#10;                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);&#10;                //noinspection unchecked&#10;                return postResult(doInBackground(mParams));&#10;            &#125;&#10;        &#125;;&#10;        //&#21019;&#24314;FutureTask&#23545;&#35937;&#30340;&#26102;&#20505;&#20256;&#20837;&#20102;mWorker&#20316;&#20026;Callable&#10;        mFuture = new FutureTask&#60;Result&#62;(mWorker) &#123;&#10;            @Override&#10;            protected void done() &#123;&#10;                try &#123;&#10;                    postResultIfNotInvoked(get());&#10;                &#125; catch (InterruptedException e) &#123;&#10;                    android.util.Log.w(LOG_TAG, e);&#10;                &#125; catch (ExecutionException e) &#123;&#10;                    throw new RuntimeException(&#34;An error occured while executing doInBackground()&#34;,&#10;                            e.getCause());&#10;                &#125; catch (CancellationException e) &#123;&#10;                    postResultIfNotInvoked(null);&#10;                &#125;&#10;            &#125;&#10;        &#125;;&#10;    &#125;&#10;    ......&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>由FutureTask源码我们可以看出，run()方法里面调用了c.call()，而AsyncTask 中创建FutureTask的时候传入了mWorker，所以FutureTask.run()方法里面c.call()调用的是mWorker对象的call()方法，而AsyncTask里mWorker重写了call方法，即上面8-14行，所以c.call()会执行到mWorker.call()方法来。call方法里面11行将线程的优先级设置为后台线程，这样当多个线程并发后很多无关紧要的线程分配的CPU时间将会减少，有利于主线程的处理。</p>
<p>接下来11行执行了doInBackground(mParams)方法，通常我们会重写该方法来实现业务逻辑操作。然后执行postResult方法，并且将结果返回给FutureTask（因为是FutureTask.run方法调用的此call方法，所以需要返回结果到FutureTask.run方法）。这里我们先看看postResult：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private Result postResult(Result result) &#123;&#10;    @SuppressWarnings(&#34;unchecked&#34;)&#10;    Message message = sHandler.obtainMessage(MESSAGE_POST_RESULT,&#10;            new AsyncTaskResult&#60;Result&#62;(this, result));&#10;    message.sendToTarget();&#10;    return result;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>这里的sHandler是InternalHandler对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static class InternalHandler extends Handler &#123;&#10;    @SuppressWarnings(&#123;&#34;unchecked&#34;, &#34;RawUseOfParameterizedType&#34;&#125;)&#10;    @Override&#10;    public void handleMessage(Message msg) &#123;&#10;        AsyncTaskResult result = (AsyncTaskResult) msg.obj;&#10;        switch (msg.what) &#123;&#10;            case MESSAGE_POST_RESULT:&#10;                // There is only one result&#10;                result.mTask.finish(result.mData[0]);&#10;                break;&#10;            case MESSAGE_POST_PROGRESS:&#10;                result.mTask.onProgressUpdate(result.mData);&#10;                break;&#10;        &#125;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>由第9行代码可知最终会执行AsyncTask的finish方法，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private void finish(Result result) &#123;&#10;    if (isCancelled()) &#123;&#10;        onCancelled(result);&#10;    &#125; else &#123;&#10;        onPostExecute(result);&#10;    &#125;&#10;    mStatus = Status.FINISHED;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>finish的作用是如果task被取消了就执行onCancelled方法，如果没有被取消而是正常执行完毕，则执行onPostExecute方法（这也是为什么task被调用了cancel方法，不会执行onPostExecute的原因）。最后将task的状态标记为FINISHED。</p>
<p>上面说到mWorker.call会将执行结果返回给FutureTask.run()方法并且继续往下执行，我们再次看看FutureTask.run方法（20-30行）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean ran;&#10;try &#123;&#10;     result = c.call();&#10;     ran = true;&#10;&#125; catch (Throwable ex) &#123;&#10;     result = null;&#10;     ran = false;&#10;     setException(ex);&#10;&#125;&#10;if (ran)&#10;     set(result);</span><br></pre></td></tr></table></figure>
<p>由上面代码可以看到，执行完c.call后，会执行set(result)方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected void set(V v) &#123;&#10;    if (UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)) &#123;&#10;        outcome = v;&#10;        UNSAFE.putOrderedInt(this, stateOffset, NORMAL); // final state&#10;        finishCompletion();&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>最终会执行finishCompletion()方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private void finishCompletion() &#123;&#10;    // assert state &#62; COMPLETING;&#10;    for (WaitNode q; (q = waiters) != null;) &#123;&#10;        if (UNSAFE.compareAndSwapObject(this, waitersOffset, q, null)) &#123;&#10;            for (;;) &#123;&#10;                Thread t = q.thread;&#10;                if (t != null) &#123;&#10;                    q.thread = null;&#10;                    LockSupport.unpark(t);&#10;                &#125;&#10;                WaitNode next = q.next;&#10;                if (next == null)&#10;                    break;&#10;                q.next = null; // unlink to help gc&#10;                q = next;&#10;            &#125;&#10;            break;&#10;        &#125;&#10;    &#125;&#10;    done();&#10;    callable = null;        // to reduce footprint&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>看到21行代码，会执行FutureTask的done()方法，而这个方法在AsyncTask构造函数中初始化FutureTask对象的时候被重写了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mFuture = new FutureTask&#60;Result&#62;(mWorker) &#123;&#10;    @Override&#10;    protected void done() &#123;&#10;        try &#123;&#10;            postResultIfNotInvoked(get());&#10;        &#125; catch (InterruptedException e) &#123;&#10;            android.util.Log.w(LOG_TAG, e);&#10;        &#125; catch (ExecutionException e) &#123;&#10;            throw new RuntimeException(&#34;An error occured while executing doInBackground()&#34;,&#10;                    e.getCause());&#10;        &#125; catch (CancellationException e) &#123;&#10;            postResultIfNotInvoked(null);&#10;        &#125;&#10;    &#125;&#10;&#125;;</span><br></pre></td></tr></table></figure>
<p>这里主要是验证postResult是否被调用了，如果没有被调用着调用postResult函数，因为前面mWorker.call方法里面调用过了，所以这里不错操作。</p>
<p>顺便提一下，在AsyncTask的doInBackground方法中如果需要更新UI的话，则调用AsyncTask的publishProgress方法即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected final void publishProgress(Progress... values) &#123;&#10;     if (!isCancelled()) &#123;&#10;         sHandler.obtainMessage(MESSAGE_POST_PROGRESS,&#10;                 new AsyncTaskResult&#60;Progress&#62;(this, values)).sendToTarget();&#10;     &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>publishProgress方法最终也会通过sHandler来调用AsyncTask的onProgressUpdate方法，一般我们如果需要获取进度的话都需要重写AsyncTask的onProgressUpdate。</p>
<p>好了，AsyncTask的源码也分析完了。再次总结一下Asynctask使用的注意事项：</p>
<ol>
<li>异步任务的实例必须在UI线程中创建。</li>
<li>execute(Params… params)方法必须在UI线程中调用。</li>
<li>不要手动调用onPreExecute()，doInBackground(Params… params)，onProgressUpdate(Progress… values)，onPostExecute(Result result)这几个方法。</li>
<li>不能在doInBackground(Params… params)中更改UI组件的信息。</li>
<li>一个任务实例只能执行一次，如果执行第二次将会抛出异常。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于AsyncTask的用法可以参看前面一篇博客<a href="http://www.cnblogs.com/liuling/p/2015-10-10-01.html" title="AsyncTask实现断点续传">《AsyncTask实现断点续传》</a>，本文只解析AsyncTask的源代码。</p>
<p>AsyncTask.execute方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final AsyncTask&#60;Params, Progress, Result&#62; execute(Params... params) &#123;&#10;&#9;return executeOnExecutor(sDefaultExecutor, params);&#10;&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="AsyncTask" scheme="http://www.liuling123.com/tags/AsyncTask/"/>
    
      <category term="android" scheme="http://www.liuling123.com/tags/android/"/>
    
      <category term="Android" scheme="http://www.liuling123.com/categories/Android/"/>
    
  </entry>
  
</feed>
